<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="4.3.2_0_6a661c5e0" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg>" / " \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182759Z" creationid="makenowjust" creationdate="20200413T182759Z">
        <seg>" / " \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"***#{ {{value}} }***"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020423Z" creationid="hirofumiwakasugi" creationdate="20151001T020423Z">
        <seg>"***#{ {{value}} }***"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"ARS" =&gt; 10.55,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"ARS" =&gt; 10.55,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"EUR" =&gt; 1.0,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>"EUR" =&gt; 1.0,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"George Harrison",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174751Z" creationid="makenowjust" creationdate="20200413T174751Z">
        <seg>"George Harrison",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Hello world!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162732Z" creationid="makenowjust" creationdate="20200413T162732Z">
        <seg>"Hello world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Hello world! The time is #{Time.now}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072712Z" creationid="hirofumiwakasugi" creationdate="20150901T072712Z">
        <seg>"Hello world! The time is #{Time.now}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"JPY" =&gt; 134.15,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"JPY" =&gt; 134.15,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"John Lennon",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174748Z" creationid="makenowjust" creationdate="20200413T174748Z">
        <seg>"John Lennon",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Miau"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031541Z" creationid="hirofumiwakasugi" creationdate="20150910T031541Z">
        <seg>"Miau"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{user_input}🎶🎸🥁".colorize.mode(:blink)}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184438Z" creationid="makenowjust" creationdate="20200413T184438Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: #{"🎵#{user_input}🎶🎸🥁".colorize.mode(:blink)}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182801Z" creationid="makenowjust" creationdate="20200413T182801Z">
        <seg>"Na-na-na na, hey Jude"

lyrics = user_input.presence || default_lyrics

puts "The Beatles are singing: 🎵#{lyrics.upcase}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Paul McCartney",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174749Z" creationid="makenowjust" creationdate="20200413T174749Z">
        <seg>"Paul McCartney",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175224Z" creationid="makenowjust" creationdate="20200413T175224Z">
        <seg>"Ringo Starr"
]
say_hi_to = ""

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174753Z" creationid="makenowjust" creationdate="20200413T174753Z">
        <seg>"Ringo Starr"
]
shout = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Ringo Starr"
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180417Z" creationid="makenowjust" creationdate="20200413T180417Z">
        <seg>"Ringo Starr"
]
shout = false
say_hi_to = ""
strawberry = false

option_parser = OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"USD" =&gt; 1.12,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>"USD" =&gt; 1.12,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Unsafe" means that memory corruption, segmentation faults and crashes are possible to achieve.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012816Z" creationid="hirofumiwakasugi" creationdate="20151009T012735Z">
        <seg>「安全でない」というのは、メモリの破壊、セグメンテーション違反、そしてクラッシュの可能性があることを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"Woof!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031540Z" creationid="hirofumiwakasugi" creationdate="20150910T031540Z">
        <seg>"Woof!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\""                  # double quote
"\\"                  # backslash
"\a"                  # alert
"\b"                  # backspace
"\e"                  # escape
"\f"                  # form feed
"\n"                  # newline
"\r"                  # carriage return
"\t"                  # tab
"\v"                  # vertical tab
"\888"                # octal ASCII character
"\xFF"                # hexadecimal ASCII character
"\uFFFF"              # hexadecimal unicode character
"\u{0}".."\u{10FFFF}" # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191907Z" creationid="makenowjust" creationdate="20200419T191803Z">
        <seg>"\""                  # ダブルクォート
"\\"                  # バックスラッシュ
"\a"                  # アラート
"\b"                  # バックスペース
"\e"                  # エスケープ
"\f"                  # フォームフィード (改ページ)
"\n"                  # 改行
"\r"                  # キャリッジリターン (復帰)
"\t"                  # タブ文字
"\v"                  # 垂直タブ
"\888"                # 8進数による ASCII 文字
"\xFF"                # 16進数による ASCII 文字
"\uFFFF"              # 16進数によるユニコード文字
"\u{0}".."\u{10FFFF}" # 16進数によるユニコード文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\#{a + b}"  # =&gt; "#{a + b}"
%q(#{a + b}) # =&gt; "#{a + b}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192730Z" creationid="makenowjust" creationdate="20200419T192730Z">
        <seg>"\#{a + b}"  # =&gt; "#{a + b}"
%q(#{a + b}) # =&gt; "#{a + b}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\101" # =&gt; "A"
"\123" # =&gt; "S"
"\12"  # =&gt; "\n"
"\1"   # string with one character with code point 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192042Z" creationid="makenowjust" creationdate="20200419T192042Z">
        <seg>"\101" # =&gt; "A"
"\123" # =&gt; "S"
"\12"  # =&gt; "\n"
"\1"   # コードポイント1の文字が1つだけの文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\u0041"    # =&gt; "A"
"\u{41}"    # =&gt; "A"
"\u{1F52E}" # =&gt; "&amp;#x1F52E;"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192103Z" creationid="makenowjust" creationdate="20200419T192103Z">
        <seg>"\u0041"    # =&gt; "A"
"\u{41}"    # =&gt; "A"
"\u{1F52E}" # =&gt; "🔮"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"\u{48 45 4C 4C 4F}" # =&gt; "HELLO"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192149Z" creationid="makenowjust" creationdate="20200419T192149Z">
        <seg>"\u{48 45 4C 4C 4F}" # =&gt; "HELLO"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"base": "https://github.com/crystal-lang/crystal-book/edit/master",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040217Z" creationid="makenowjust" creationdate="20200420T035410Z">
        <seg>"base": "https://github.com/crystal-jp/ja.crystal-lang.org/edit/master/locale/ja/crystal-book",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"class"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011920Z" creationid="hirofumiwakasugi" creationdate="20151009T011920Z">
        <seg>"class"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"contributePrefix": "https://github.com/crystal-lang/crystal-book/"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035459Z" creationid="makenowjust" creationdate="20200420T035459Z">
        <seg>"contributePrefix": "https://github.com/crystal-lang/crystal-book/"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"edit-link": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035515Z" creationid="makenowjust" creationdate="20200420T035515Z">
        <seg>"edit-link": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"ga": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035935Z" creationid="makenowjust" creationdate="20200420T035935Z">
        <seg>"ga": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"gitbook": "3.2.2",</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035526Z" creationid="makenowjust" creationdate="20200420T035526Z">
        <seg>"gitbook": "3.2.2",</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194211Z" creationid="makenowjust" creationdate="20200419T194211Z">
        <seg>"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194658Z" creationid="makenowjust" creationdate="20200419T194658Z">
        <seg>"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194800Z" creationid="makenowjust" creationdate="20200419T194800Z">
        <seg>"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191538Z" creationid="makenowjust" creationdate="20200419T191538Z">
        <seg>"hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"hello"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024643Z" creationid="hirofumiwakasugi" creationdate="20150909T024643Z">
        <seg>"hello"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"instance"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011919Z" creationid="hirofumiwakasugi" creationdate="20151009T011919Z">
        <seg>"instance"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"label": "Edit This Page"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035417Z" creationid="makenowjust" creationdate="20200420T035417Z">
        <seg>"label": "このページを編集"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"links": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035523Z" creationid="makenowjust" creationdate="20200420T035523Z">
        <seg>"links": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"one"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035954Z" creationid="hirofumiwakasugi" creationdate="20151001T035954Z">
        <seg>"one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"one"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030945Z" creationid="hirofumiwakasugi" creationdate="20150916T030945Z">
        <seg>"one"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"plugins": ["ga", "edit-link", "offline"],</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035309Z" creationid="makenowjust" creationdate="20200420T035309Z">
        <seg>"plugins": ["edit-link", "offline"],</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"pluginsConfig": {</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035511Z" creationid="makenowjust" creationdate="20200420T035511Z">
        <seg>"pluginsConfig": {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"token": "UA-42353458-1"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035928Z" creationid="makenowjust" creationdate="20200420T035324Z">
        <seg>"token": "UA-42353458-1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213225Z" creationid="makenowjust" creationdate="20200412T213225Z">
        <seg>"unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>"🍓" : "-"} #{member}"
end

unless say_hi_to.empty?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180437Z" creationid="makenowjust" creationdate="20200413T180437Z">
        <seg>"🍓" : "-"} #{member}"
end

unless say_hi_to.empty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045654Z" creationid="hirofumiwakasugi" creationdate="20151007T045654Z">
        <seg>#</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# To create a unicorn:
#
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
#
# The above produces:
#
# ```text
# "I'm a unicorn"
# ```
#
# Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>#
# To create a unicorn:
#
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
#
# The above produces:
#
# ```text
# "I'm a unicorn"
# ```
#
# Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# ```
# Unicorn.new.horns # =&gt; 1
# ```
def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211725Z" creationid="makenowjust" creationdate="20200412T211725Z">
        <seg>#
# ```
# Unicorn.new.horns # =&gt; 1
# ```
def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#
# ```
# Unicorn.new.horns #=&gt; 1
# ```
def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140135Z" creationid="hirofumiwakasugi" creationdate="20151010T140135Z">
        <seg>#
# ```
# Unicorn.new.horns #=&gt; 1
# ```
def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#     end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T201055Z" creationid="makenowjust" creationdate="20200413T201055Z">
        <seg>#     end
end{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#     unicorn = Unicorn.new
#     unicorn.speak</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212032Z" creationid="makenowjust" creationdate="20200412T212032Z">
        <seg>#     unicorn = Unicorn.new
#     unicorn.speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    One,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    One,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Three,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    Three,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Two,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052628Z" creationid="hirofumiwakasugi" creationdate="20151007T052628Z">
        <seg>#    Two,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    Zero,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052627Z" creationid="hirofumiwakasugi" creationdate="20151007T052627Z">
        <seg>#    Zero,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    double some_float;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>#    double some_float;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int dst_time;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045656Z" creationid="hirofumiwakasugi" creationdate="20151007T045656Z">
        <seg>#    int dst_time;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int minutes_west;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045655Z" creationid="hirofumiwakasugi" creationdate="20151007T045655Z">
        <seg>#    int minutes_west;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    int some_int;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>#    int some_int;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#    void callback(int (*f)(int));</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024217Z" creationid="hirofumiwakasugi" creationdate="20151008T024217Z">
        <seg>#    void callback(int (*f)(int));</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  enum SomeEnum {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052627Z" creationid="hirofumiwakasugi" creationdate="20151007T052627Z">
        <seg>#  enum SomeEnum {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  struct TimeZone {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045654Z" creationid="hirofumiwakasugi" creationdate="20151007T045654Z">
        <seg>#  struct TimeZone {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  union IntOrFloat {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052209Z" creationid="hirofumiwakasugi" creationdate="20151007T052209Z">
        <seg>#  union IntOrFloat {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>#  };</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045656Z" creationid="hirofumiwakasugi" creationdate="20151007T045656Z">
        <seg>#  };</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># &amp;&amp;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T051346Z" creationid="hirofumiwakasugi" creationdate="20150905T051346Z">
        <seg># &amp;&amp;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># (actual - expected).abs &lt;= delta
actual.should contain(expected)         # passes if actual.includes?(expected)
actual.should match(expected)           # passes if actual =~ expected</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T140522Z" creationid="akiji" creationdate="20200505T140522Z">
        <seg># (actual - expected).abs &lt;= delta
actual.should contain(expected)         # actual.includes?(expected) が真なら合格
actual.should match(expected)           # actual =~ expected が真なら合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031031Z" creationid="hirofumiwakasugi" creationdate="20150909T031031Z">
        <seg># ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093557Z" creationid="makenowjust" creationdate="20200424T093557Z">
        <seg># ...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013615Z" creationid="hirofumiwakasugi" creationdate="20150907T013615Z">
        <seg># ...
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
rescue ex : MyException | MyOtherException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013138Z" creationid="hirofumiwakasugi" creationdate="20150907T013138Z">
        <seg># ...
rescue ex : MyException | MyOtherException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
rescue ex1 : MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012446Z" creationid="hirofumiwakasugi" creationdate="20150907T012446Z">
        <seg># ...
rescue ex1 : MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ...
when {1, 2, 3} # Syntax error: wrong number of tuple elements (given 3, expected 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093534Z" creationid="makenowjust" creationdate="20200424T093534Z">
        <seg># ...
when {1, 2, 3} # Syntax error: wrong number of tuple elements (given 3, expected 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) #=&gt; 12
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120625Z" creationid="hirofumiwakasugi" creationdate="20150906T120625Z">
        <seg># 2 x Int32 = 2 x 4 = 8
instance_sizeof(Point) #=&gt; 12
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :ditto:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215318Z" creationid="makenowjust" creationdate="20200412T215318Z">
        <seg># :ditto:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :ditto:
def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212643Z" creationid="makenowjust" creationdate="20200412T212643Z">
        <seg># :ditto:
def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :inherit:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213758Z" creationid="makenowjust" creationdate="20200412T213758Z">
        <seg># :inherit:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># :nodoc:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144013Z" creationid="hirofumiwakasugi" creationdate="20151010T144013Z">
        <seg># :nodoc:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># =&gt; true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173841Z" creationid="makenowjust" creationdate="20200422T173841Z">
        <seg># =&gt; true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A Proc accepting a single Int32 argument and returning a String
Proc(Int32, String)

# A proc accepting no arguments and returning Void
Proc(Void)

# A proc accepting two arguments (one Int32 and one String) and returning a Char
Proc(Int32, String, Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171910Z" creationid="makenowjust" creationdate="20200422T171536Z">
        <seg># Int32 の引数を受け付けて、String を返す Proc の型を表す
Proc(Int32, String)

# 引数を受け付けず Void を返す Proc の型を表す
Proc(Void)

# Int32 と String という2つの引数を受け付け Char を返す Proc の型を表す
Proc(Int32, String, Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit more useful: any two arguments Proc that returns an Int32:
def foo(x : _, _ -&gt; Int32)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012249Z" creationid="hirofumiwakasugi" creationdate="20151009T012249Z">
        <seg># もう少し役に立つパターンで、引数を2つ取って Int32 を返す Proc
def foo(x : _, _ -&gt; Int32)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit shorter:
if (a = @a).is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022633Z" creationid="hirofumiwakasugi" creationdate="20150903T022633Z">
        <seg># より簡潔な書き方
if (a = @a).is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A bit shorter:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030640Z" creationid="hirofumiwakasugi" creationdate="20150903T030640Z">
        <seg># より簡潔な書き方
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A buffered channel of capacity 2
channel = Channel(Int32).new(2)

spawn do</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103759Z" creationid="akiji" creationdate="20200429T144030Z">
        <seg># 容量が2のバッファ付きチャネル
channel = Channel(Int32).new(2)

spawn do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc with one argument
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021112Z" creationid="hirofumiwakasugi" creationdate="20150902T021112Z">
        <seg># 引数を1つ持つ Proc
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc with two arguments:
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021130Z" creationid="hirofumiwakasugi" creationdate="20150902T021121Z">
        <seg># 引数を2つ持つ Proc
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A proc without arguments
-&gt;{ 1 } # Proc(Int32)

# A proc with one argument
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# A proc with two arguments:
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171144Z" creationid="makenowjust" creationdate="20200422T171102Z">
        <seg># 引数を持たない Proc
-&gt;{ 1 } # Proc(Int32)

# 1つの引数を持つ Proc
-&gt;(x : Int32) { x.to_s } # Proc(Int32, String)

# 2つの引数を持つ Proc
-&gt;(x : Int32, y : Int32) { x + y } # Proc(Int32, Int32, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A setter
person.name=("John")

# The above can be written as:
person.name = "John"

# An indexed assignment
objects.[]=(2, 3)

# The above can be written as:
objects[2] = 3

# Not assignment-related, but also syntax sugar:
objects.[](2, 3)

# The above can be written as:
objects[2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174603Z" creationid="makenowjust" creationdate="20200422T174507Z">
        <seg># セッターメソッドの呼び出し
person.name=("John")

# 上記は次ように書ける
person.name = "John"

# インデックスに対する代入
objects.[]=(2, 3)

# 上記は次のように書ける
objects[2] = 3

# 代入とは関係ないけれど、こういうシンタックスシュガーも
objects.[](2, 3)

# 上記は次のように書ける
objects[2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211654Z" creationid="makenowjust" creationdate="20200412T211654Z">
        <seg># A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of Proc(Int32, String, Char)
Array(Int32, String -&gt; Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171851Z" creationid="makenowjust" creationdate="20200422T171847Z">
        <seg># Proc(Int32, String, Char) の配列の型を表す
Array(Int32, String -&gt; Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of named tuples of x: Int32, y: String
Array({x: Int32, y: String})</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170128Z" creationid="makenowjust" creationdate="20200422T170128Z">
        <seg># x が Int32、 y が String であるような名前付きタプルの配列の型を表す
Array({x: Int32, y: String})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An array of tuples of Int32, String and Char
Array({Int32, String, Char})</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170138Z" creationid="makenowjust" creationdate="20200422T165146Z">
        <seg># Int32、String、Char のタプルの配列の型を表す
Array({Int32, String, Char})</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># An indexed assignment
objects.[]=(2, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054712Z" creationid="hirofumiwakasugi" creationdate="20150902T054712Z">
        <seg># インデックスを指定した代入
objects.[]=(2, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Another example:
if 1 &gt; 2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013543Z" creationid="hirofumiwakasugi" creationdate="20150903T013543Z">
        <seg># 例2
if 1 &gt; 2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022630Z" creationid="hirofumiwakasugi" creationdate="20150901T073243Z">
        <seg># 配列 (Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># As a suffix</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012834Z" creationid="hirofumiwakasugi" creationdate="20150903T012805Z">
        <seg># 後置 if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># As an expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013030Z" creationid="hirofumiwakasugi" creationdate="20150903T013022Z">
        <seg># 式としての if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053909Z" creationid="hirofumiwakasugi" creationdate="20150902T053904Z">
        <seg># 代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a class variable
@@class = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054112Z" creationid="hirofumiwakasugi" creationdate="20150902T054112Z">
        <seg>#  クラス変数への代入
@@class = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a global variable
$global = 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054124Z" creationid="hirofumiwakasugi" creationdate="20150902T054124Z">
        <seg># グローバル変数への代入
$global = 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to a local variable
local = 1

# Assigns to an instance variable
@instance = 2

# Assigns to a class variable
@@class = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174245Z" creationid="makenowjust" creationdate="20200422T174221Z">
        <seg># ローカル変数への代入
local = 1

# インスタンス変数への代入
@instance = 2

# クラス変数への代入
@@class = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Assigns to an instance variable
@instance = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053953Z" creationid="hirofumiwakasugi" creationdate="20150902T053953Z">
        <seg># インスタンス変数への代入
@instance = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Attributes</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071820Z" creationid="hirofumiwakasugi" creationdate="20150919T071445Z">
        <seg># 属性 (Attribute)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Bad: This is not attached to any class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033552Z" creationid="hirofumiwakasugi" creationdate="20151010T033519Z">
        <seg># よくない例: これはどのクラスにも紐付けられません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Block forwarding</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024230Z" creationid="hirofumiwakasugi" creationdate="20150916T025620Z">
        <seg># ブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Blocks and Procs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013126Z" creationid="hirofumiwakasugi" creationdate="20150916T013117Z">
        <seg># ブロックと Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022650Z" creationid="hirofumiwakasugi" creationdate="20150901T050949Z">
        <seg># 真偽値 (Bool)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># C bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T141459Z" creationid="hirofumiwakasugi" creationdate="20151003T141459Z">
        <seg># C バインディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Callbacks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024120Z" creationid="hirofumiwakasugi" creationdate="20150902T023632Z">
        <seg># コールバック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Can also be written as a suffix
close_door unless door_closed?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022902Z" creationid="hirofumiwakasugi" creationdate="20150903T022902Z">
        <seg># 後置することも可能
close_door unless door_closed?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Capturing blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040138Z" creationid="hirofumiwakasugi" creationdate="20150916T035548Z">
        <seg># ブロックの捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Char</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022713Z" creationid="hirofumiwakasugi" creationdate="20150901T051210Z">
        <seg># 文字 (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212601Z" creationid="makenowjust" creationdate="20200412T212601Z">
        <seg># Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Class variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040358Z" creationid="hirofumiwakasugi" creationdate="20150910T040342Z">
        <seg># クラス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Classes and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021653Z" creationid="hirofumiwakasugi" creationdate="20150904T021646Z">
        <seg># クラスとメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Closures</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053421Z" creationid="hirofumiwakasugi" creationdate="20150918T053413Z">
        <seg># クロージャ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Coding Style</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141932Z" creationid="hirofumiwakasugi" creationdate="20151009T141850Z">
        <seg># コーディングスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Comments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050436Z" creationid="hirofumiwakasugi" creationdate="20150901T050436Z">
        <seg># コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Compile-time flags</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043628Z" creationid="hirofumiwakasugi" creationdate="20150906T115931Z">
        <seg># コンパイル時のフラグ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055210Z" creationid="hirofumiwakasugi" creationdate="20150913T055203Z">
        <seg># 定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Control expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023852Z" creationid="hirofumiwakasugi" creationdate="20151009T023852Z">
        <seg># 制御式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Conventions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141412Z" creationid="hirofumiwakasugi" creationdate="20151009T141322Z">
        <seg># 規約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144050Z" creationid="hirofumiwakasugi" creationdate="20151010T144050Z">
        <seg># Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Cross-compilation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044416Z" creationid="hirofumiwakasugi" creationdate="20150909T044408Z">
        <seg># クロスコンパイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083639Z" creationid="hirofumiwakasugi" creationdate="20150831T050519Z">
        <seg># プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ctrl+D

default_lyrics = "Na, na, na, na-na-na na" \</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182757Z" creationid="makenowjust" creationdate="20200413T182757Z">
        <seg># Ctrl+D

default_lyrics = "Na, na, na, na-na-na na" \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Default and named arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T073703Z" creationid="hirofumiwakasugi" creationdate="20150906T073625Z">
        <seg># デフォルト引数と名前付き引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Documenting code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012252Z" creationid="hirofumiwakasugi" creationdate="20151009T141854Z">
        <seg># コードのドキュメント化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ending with question and exclamation marks
:question?
:exclamation!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131417Z" creationid="hirofumiwakasugi" creationdate="20150901T131350Z">
        <seg># 名前が ? や ! で終わるシンボル
:question?
:exclamation!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Enums</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T023927Z" creationid="hirofumiwakasugi" creationdate="20150914T023927Z">
        <seg># Enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'String#+' with types Int32
john.name + 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043144Z" creationid="hirofumiwakasugi" creationdate="20150905T043144Z">
        <seg># Error: no overload matches 'String#+' with types Int32
john.name + 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'add' with types Bool, Bool
add true, false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042650Z" creationid="hirofumiwakasugi" creationdate="20150907T042650Z">
        <seg># Error: no overload matches 'add' with types Bool, Bool
add true, false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135923Z" creationid="hirofumiwakasugi" creationdate="20151009T135923Z">
        <seg># Error: no overload matches 'restricted_add' with types Six, Int32
restricted_add Six.new, 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: the next line gives a parser error</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043752Z" creationid="hirofumiwakasugi" creationdate="20150909T043752Z">
        <seg># 次の行はパースエラーとなる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: undefined method 'length' for Int32
john.name.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043142Z" creationid="hirofumiwakasugi" creationdate="20150905T043142Z">
        <seg># Error: undefined method 'length' for Int32
john.name.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Error: undefined method 'size' for Int32
john.name.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025344Z" creationid="hirofumiwakasugi" creationdate="20151009T025344Z">
        <seg># Error: undefined method 'size' for Int32
john.name.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Everything is an object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061745Z" creationid="hirofumiwakasugi" creationdate="20150904T012623Z">
        <seg># すべてがオブジェクト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Exception handling</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T010529Z" creationid="hirofumiwakasugi" creationdate="20150907T010502Z">
        <seg># 例外処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># First declare vars</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021023Z" creationid="hirofumiwakasugi" creationdate="20151002T021007Z">
        <seg># まず変数を宣言する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># First, this method is defined</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072605Z" creationid="hirofumiwakasugi" creationdate="20150906T072558Z">
        <seg># 最初にこのメソッドが定義されている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Floats</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022728Z" creationid="hirofumiwakasugi" creationdate="20150901T073255Z">
        <seg># 浮動小数点数 (Float)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># For the operators
:+
:-
:*
:/
:==
:&lt;
:&lt;=
:&gt;
:&gt;=
:!
:!=
:=~
:!~
:&amp;
:|
:^
:~
:**
:&gt;&gt;
:&lt;&lt;
:%
:[]
:[]?
:[]=
:&lt;=&gt;
:===
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131433Z" creationid="hirofumiwakasugi" creationdate="20150901T131433Z">
        <seg># 演算子
:+
:-
:*
:/
:==
:&lt;
:&lt;=
:&gt;
:&gt;=
:!
:!=
:=~
:!~
:&amp;
:|
:^
:~
:**
:&gt;&gt;
:&lt;&lt;
:%
:[]
:[]?
:[]=
:&lt;=&gt;
:===
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Fresh variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044635Z" creationid="hirofumiwakasugi" creationdate="20151002T014547Z">
        <seg># フレッシュな変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># From a tar.gz</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061923Z" creationid="hirofumiwakasugi" creationdate="20150831T050418Z">
        <seg># tar.gz からインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># From sources</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060014Z" creationid="hirofumiwakasugi" creationdate="20150831T054710Z">
        <seg># ソースコードからインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Generics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T053729Z" creationid="hirofumiwakasugi" creationdate="20150910T042033Z">
        <seg># ジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Global variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053417Z" creationid="hirofumiwakasugi" creationdate="20150902T053409Z">
        <seg># グローバル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># HTTP Server</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072521Z" creationid="hirofumiwakasugi" creationdate="20150831T064731Z">
        <seg># HTTP サーバー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hash</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022737Z" creationid="hirofumiwakasugi" creationdate="20150901T074025Z">
        <seg># ハッシュ (Hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054726Z" creationid="hirofumiwakasugi" creationdate="20150831T054726Z">
        <seg># Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Hooks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012230Z" creationid="hirofumiwakasugi" creationdate="20151002T012205Z">
        <seg># フック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In C:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024224Z" creationid="hirofumiwakasugi" creationdate="20151007T045653Z">
        <seg># C では:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In C: double cos(double x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143724Z" creationid="hirofumiwakasugi" creationdate="20151003T143719Z">
        <seg># C では double cos(double x) となっている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># In file two.cr
require "./one"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040833Z" creationid="hirofumiwakasugi" creationdate="20150909T040833Z">
        <seg># two.cr ファイル
require "./one"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071436Z" creationid="hirofumiwakasugi" creationdate="20150906T071436Z">
        <seg># 1歳年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by the given number of years</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071454Z" creationid="hirofumiwakasugi" creationdate="20150906T071454Z">
        <seg># 受け取った数値だけ年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Increases age by the given number of years, as a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071528Z" creationid="hirofumiwakasugi" creationdate="20150906T071528Z">
        <seg># 「String 型で」受け取った数値だけ年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T022942Z" creationid="hirofumiwakasugi" creationdate="20150910T022936Z">
        <seg># 継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Installation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053756Z" creationid="hirofumiwakasugi" creationdate="20150831T053748Z">
        <seg># インストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Instance variables type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T125640Z" creationid="hirofumiwakasugi" creationdate="20150904T125335Z">
        <seg># インスタンス変数と型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022745Z" creationid="hirofumiwakasugi" creationdate="20150901T051254Z">
        <seg># 整数 (Integer)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invoked when Foo is garbage-collected</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041658Z" creationid="hirofumiwakasugi" creationdate="20150910T041658Z">
        <seg># Foo がガベージコレクトされるときに実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the add method in the program
add(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021439Z" creationid="hirofumiwakasugi" creationdate="20150904T015211Z">
        <seg># プログラムで add メソッドを実行
add(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the first definition
person.become_older 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072914Z" creationid="hirofumiwakasugi" creationdate="20150906T072914Z">
        <seg># これは最初に定義されたメソッドを実行する
person.become_older 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Invokes the second definition
person.become_older "12"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072931Z" creationid="hirofumiwakasugi" creationdate="20150906T072931Z">
        <seg># これは2番目に定義されたメソッドを実行する
person.become_older "12"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050728Z" creationid="hirofumiwakasugi" creationdate="20150901T050720Z">
        <seg># リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Local variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T051622Z" creationid="hirofumiwakasugi" creationdate="20150902T051615Z">
        <seg># ローカル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Low-level primitives</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033540Z" creationid="hirofumiwakasugi" creationdate="20150902T053536Z">
        <seg># ローレベルプリミティブ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Macro methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012220Z" creationid="hirofumiwakasugi" creationdate="20151001T041809Z">
        <seg># マクロメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Macros</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014441Z" creationid="hirofumiwakasugi" creationdate="20151001T014441Z">
        <seg># マクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes the unicorn speak to STDOUT</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg># Makes the unicorn speak to STDOUT</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes the unicorn speak to STDOUT
#
# NOTE: Although unicorns don't normally talk, this one is special
# TODO: Check if unicorn is asleep and raise exception if not able to speak
# TODO: Create another `speak` method that takes and prints a string
def speak</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214634Z" creationid="makenowjust" creationdate="20200412T214634Z">
        <seg># Makes the unicorn speak to STDOUT
#
# NOTE: Although unicorns don't normally talk, this one is special
# TODO: Check if unicorn is asleep and raise exception if not able to speak
# TODO: Create another `speak` method that takes and prints a string
def speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Makes this animal talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040149Z" creationid="hirofumiwakasugi" creationdate="20150910T040129Z">
        <seg># Animal に talk を定義</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if 0 === value1, no test done against value2
when {_, 0}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093648Z" creationid="makenowjust" creationdate="20200424T093648Z">
        <seg># 0 === value1 の場合にマッチして、 value2 に対するチェックは行なわれない
when {_, 0}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if 0 === value2, no test done against value1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094429Z" creationid="makenowjust" creationdate="20200424T093707Z">
        <seg># 0 === value2 の場合にマッチして、 value1 に対するチェックは行なわれない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if value1.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093746Z" creationid="makenowjust" creationdate="20200424T093727Z">
        <seg># value1.even? &amp;&amp; value2.even? のときにマッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Matches if value1.is_a?(String) &amp;&amp; value2.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093847Z" creationid="makenowjust" creationdate="20200424T093847Z">
        <seg># value1.is_a?(String) &amp;&amp; value2.is_a?(Int32) のときにマッチ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Methods and instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121622Z" creationid="hirofumiwakasugi" creationdate="20150904T121612Z">
        <seg># メソッドとインスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T130326Z" creationid="hirofumiwakasugi" creationdate="20150911T130320Z">
        <seg># モジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Multiple assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055224Z" creationid="hirofumiwakasugi" creationdate="20150902T055157Z">
        <seg># 多重代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050840Z" creationid="hirofumiwakasugi" creationdate="20150901T050840Z">
        <seg># Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Not assignment-related, but also syntax sugar:
objects.[](2, 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054747Z" creationid="hirofumiwakasugi" creationdate="20150902T054747Z">
        <seg># 代入ではないが、以下のシンタックスシュガーも有効
objects.[](2, 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Now we cast that pointer to the same type, and
# we should get the same value
array2 = ptr as Array(Int32)
array2.same?(array) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020318Z" creationid="hirofumiwakasugi" creationdate="20150930T020305Z">
        <seg># ポインタをその型にキャストすると、
# 同一の値が得られる
array2 = ptr as Array(Int32)
array2.same?(array) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043802Z" creationid="hirofumiwakasugi" creationdate="20150909T043802Z">
        <seg># OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># OK
add Six.new, 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135900Z" creationid="hirofumiwakasugi" creationdate="20151009T135900Z">
        <seg># OK
add Six.new, 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ok
add 1, 2 # Ok</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042707Z" creationid="hirofumiwakasugi" creationdate="20150907T042648Z">
        <seg># これは OK
add 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Arch Linux</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021510Z" creationid="hirofumiwakasugi" creationdate="20151009T021435Z">
        <seg># Arch Linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Debian and Ubuntu</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053648Z" creationid="hirofumiwakasugi" creationdate="20150831T052610Z">
        <seg># Debian や Ubuntu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On Mac OSX using Homebrew</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055126Z" creationid="hirofumiwakasugi" creationdate="20150831T055126Z">
        <seg># Mac OS X (Homebrew を利用)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># On RedHat and CentOS</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055033Z" creationid="hirofumiwakasugi" creationdate="20150831T054955Z">
        <seg># RedHat や CentOS</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024905Z" creationid="hirofumiwakasugi" creationdate="20150905T052333Z">
        <seg># 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ouptut:
# Skipping 1
# Got 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025711Z" creationid="hirofumiwakasugi" creationdate="20150916T025711Z">
        <seg># 出力:
# Skipping 1
# Got 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output
# 10
# 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030115Z" creationid="hirofumiwakasugi" creationdate="20150916T030115Z">
        <seg># 出力:
# 10
# 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output:
# Before foo
# 1
# After foo
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025557Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg># 出力:
# Before foo
# 1
# After foo
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022448Z" creationid="hirofumiwakasugi" creationdate="20150916T022448Z">
        <seg># 出力: 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: 6
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022229Z" creationid="hirofumiwakasugi" creationdate="20150916T022229Z">
        <seg># 出力: 6
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: OH NO!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012113Z" creationid="hirofumiwakasugi" creationdate="20150907T012113Z">
        <seg># 出力: OH NO!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued MyException
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012247Z" creationid="hirofumiwakasugi" creationdate="20150907T012247Z">
        <seg># 出力: Rescued MyException
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued MyException: OH NO!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012422Z" creationid="hirofumiwakasugi" creationdate="20150907T012422Z">
        <seg># 出力: Rescued MyException: OH NO!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Output: Rescued!
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012008Z" creationid="hirofumiwakasugi" creationdate="20150907T012000Z">
        <seg># 出力: Rescued!
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Overloading</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070556Z" creationid="hirofumiwakasugi" creationdate="20150906T070551Z">
        <seg># オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071446Z" creationid="hirofumiwakasugi" creationdate="20150831T054952Z">
        <seg># 概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Passes if this block raises an exception of type MyError</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234752Z" creationid="akiji" creationdate="20200516T101202Z">
        <seg># ブロック内でMyError型の例外が発生し、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Passes if this block raises an exception of type MyError.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101122Z" creationid="akiji" creationdate="20200507T013338Z">
        <seg># ブロック内でMyError型の例外が発生すれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Performance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022632Z" creationid="hirofumiwakasugi" creationdate="20150905T051354Z">
        <seg># パフォーマンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Prints "Bye bye ...!" for ever
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041701Z" creationid="hirofumiwakasugi" creationdate="20150910T041701Z">
        <seg># Prints "Bye bye ...!" for ever
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020906Z" creationid="hirofumiwakasugi" creationdate="20150902T020906Z">
        <seg># Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc literal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061544Z" creationid="hirofumiwakasugi" creationdate="20150918T061544Z">
        <seg># Proc リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Proc pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135209Z" creationid="hirofumiwakasugi" creationdate="20151009T135209Z">
        <seg># Proc pointer</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Range</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022803Z" creationid="hirofumiwakasugi" creationdate="20150902T014000Z">
        <seg># 範囲 (Range)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Regex</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022811Z" creationid="hirofumiwakasugi" creationdate="20150902T013959Z">
        <seg># 正規表現 (Regex)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Requiring files</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162046Z" creationid="hirofumiwakasugi" creationdate="20150901T050320Z">
        <seg>#ファイルの require</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Return types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024222Z" creationid="hirofumiwakasugi" creationdate="20150901T130925Z">
        <seg># 戻り値の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the name of `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213218Z" creationid="makenowjust" creationdate="20200412T213218Z">
        <seg># Returns the name of `self`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the number of horns this unicorn has</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144052Z" creationid="hirofumiwakasugi" creationdate="20151010T144052Z">
        <seg># Returns the number of horns this unicorn has</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Returns the number of horns this unicorn has.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211722Z" creationid="makenowjust" creationdate="20200412T211722Z">
        <seg># Returns the number of horns this unicorn has.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Run all specs in files matching spec/**/*_spec.cr
crystal spec

# Run  all specs in files matching spec/**/*_spec.cr without colors
crystal spec --no-color

# Run all specs in files matching spec/my/test/**/*_spec.cr
crystal spec spec/my/test/

# Run all specs in spec/my/test/file_spec.cr
crystal spec spec/my/test/file_spec.cr

# Run the spec or group defined in line 14 of spec/my/test/file_spec.cr
crystal spec spec/my/test/file_spec.cr:14

# Run all specs tagged with "fast"
crystal spec --tag 'fast'

# Run all specs not tagged with "slow"
crystal spec --tag '~slow'</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200521T001007Z" creationid="akiji" creationdate="20200518T070525Z">
        <seg># ファイル名が spec/**/*_spec.cr にマッチするファイル内の全specを実行
crystal spec

# ファイル名が spec/**/*_spec.cr にマッチするファイル内の全specを実行（出力を色分けしない）
crystal spec --no-color

# ファイル名が spec/my/test/**/*_spec.cr にマッチするファイル内の全specを実行
crystal spec spec/my/test/

# 特定のファイル spec/my/test/file_spec.cr 内の全specを実行 
crystal spec spec/my/test/file_spec.cr

# 特定のファイル spec/my/test/file_spec.cr の14行目で定義されたspecや、グループ内のspecを実行
crystal spec spec/my/test/file_spec.cr:14

# "fast" タグが付けられたspecを全て実行
crystal spec --tag 'fast'

# "slow" タグが付いていないspecを全て実行
crystal spec --tag '~slow'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as "  Hello\n    world"
&lt;&lt;-STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062401Z" creationid="hirofumiwakasugi" creationdate="20160204T062401Z">
        <seg># "  Hello\n    world" と同じ
&lt;&lt;-STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as:
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060250Z" creationid="hirofumiwakasugi" creationdate="20150902T060250Z">
        <seg># 上記は以下と同じ
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Same as:
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060327Z" creationid="hirofumiwakasugi" creationdate="20150902T060327Z">
        <seg># 上記は以下と同じ
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Sample output:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021041Z" creationid="hirofumiwakasugi" creationdate="20151002T021041Z">
        <seg># 出力例:
# Declaring: __temp_255
# Declaring: __temp_256
# Declaring: __temp_257
# __temp_255: 0
# __temp_256: 1
# __temp_257: 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Second option: use `Object#try` found in the standard library
@a.try do |a|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020410Z" creationid="hirofumiwakasugi" creationdate="20150903T020339Z">
        <seg># 方法2: 標準ライブラリの `Object#try` を使う
@a.try do |a|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># See what a unicorn would say with `Unicorn#speak`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142314Z" creationid="hirofumiwakasugi" creationdate="20151010T142314Z">
        <seg># See what a unicorn would say with `Unicorn#speak`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Since "String" is more restrictive than no restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072655Z" creationid="hirofumiwakasugi" creationdate="20150906T072607Z">
        <seg># 「String」の指定は制約なしのものより制約的であるため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Since the only way to get here is if a is truthy,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014415Z" creationid="hirofumiwakasugi" creationdate="20150903T014312Z">
        <seg># ここに到達するためには if が真でなければならない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Some documentation common to every *id*.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213750Z" creationid="makenowjust" creationdate="20200412T213750Z">
        <seg># Some documentation common to every *id*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213753Z" creationid="makenowjust" creationdate="20200412T213753Z">
        <seg># Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Splats and tuples</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T041746Z" creationid="hirofumiwakasugi" creationdate="20150907T041746Z">
        <seg># splat 展開とタプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022820Z" creationid="hirofumiwakasugi" creationdate="20150901T080750Z">
        <seg># 文字列 (String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Structs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053653Z" creationid="hirofumiwakasugi" creationdate="20150907T042239Z">
        <seg># 構造体 (Struct)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Summary</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T051321Z" creationid="hirofumiwakasugi" creationdate="20150831T051321Z">
        <seg># Summary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested angles
%&lt;hello &lt;"world"&gt;&gt; # same as "hello &lt;\"world\"&gt;"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105144Z" creationid="hirofumiwakasugi" creationdate="20150901T104920Z">
        <seg># ダブルクォートと入れ子の山カッコ (アングルブラケット) を含む
%&lt;hello &lt;"world"&gt;&gt; # "hello &lt;\"world\"&gt;" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested brackets
%[hello ["world"]] # same as "hello [\"world\"]"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104824Z" creationid="hirofumiwakasugi" creationdate="20150901T104611Z">
        <seg># ダブルクォートと入れ子の角カッコ (ブラケット) を含む
%[hello ["world"]] # "hello [\"world\"]" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Supports double quotes and nested curlies
%{hello {"world"}} # same as "hello {\"world\"}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104944Z" creationid="hirofumiwakasugi" creationdate="20150901T104839Z">
        <seg># ダブルクォートと入れ子の波カッコ (ブレース) を含む
%{hello {"world"}} # "hello {\"world\"}" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022831Z" creationid="hirofumiwakasugi" creationdate="20150901T071023Z">
        <seg># シンボル (Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Syntax and Semantics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050310Z" creationid="hirofumiwakasugi" creationdate="20150901T050310Z">
        <seg># シンタックスとセマンティクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ternary if</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013648Z" creationid="hirofumiwakasugi" creationdate="20150903T013642Z">
        <seg># 3項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The Program</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T013825Z" creationid="hirofumiwakasugi" creationdate="20150904T013825Z">
        <seg># プログラム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
objects[2, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054803Z" creationid="hirofumiwakasugi" creationdate="20150902T054803Z">
        <seg># 上記は以下のように書くことができる
objects[2, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
objects[2] = 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054809Z" creationid="hirofumiwakasugi" creationdate="20150902T054724Z">
        <seg># 上記は以下のように書くことができる
objects[2] = 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above can be written as:
person.name = "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054814Z" creationid="hirofumiwakasugi" creationdate="20150902T054654Z">
        <seg># 上記は以下のように書くことができる
person.name = "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as this:
temp = "Crystal,1,github".split(",")
name   = temp[0]
age    = temp[1]
source = temp[2]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060047Z" creationid="hirofumiwakasugi" creationdate="20150902T060047Z">
        <seg># 上記は以下と同じ
temp = "Crystal,1,github".split(",")
name   = temp[0]
age    = temp[1]
source = temp[2]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as this:
temp1 = "Crystal"
temp2 = 1
name  = temp1
age   = temp2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055439Z" creationid="hirofumiwakasugi" creationdate="20150902T055439Z">
        <seg># 上記は以下と同じ
temp1 = "Crystal"
temp2 = 1
name  = temp1
age   = temp2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
a = if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013728Z" creationid="hirofumiwakasugi" creationdate="20150903T013728Z">
        <seg># 上記は以下と同じ
a = if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014243Z" creationid="hirofumiwakasugi" creationdate="20150907T014243Z">
        <seg># 上記は以下と同じ
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013521Z" creationid="hirofumiwakasugi" creationdate="20150903T013513Z">
        <seg># 上記は以下と同じ
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if cond1 || cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010134Z" creationid="hirofumiwakasugi" creationdate="20151001T010134Z">
        <seg># 上記は以下と同じ
if cond1 || cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012932Z" creationid="hirofumiwakasugi" creationdate="20150903T012907Z">
        <seg># 上記は以下と同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
if var.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010049Z" creationid="hirofumiwakasugi" creationdate="20151001T010049Z">
        <seg># 上記は以下と同じ
if var.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
names = ["John", "Peter", "Jack"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060214Z" creationid="hirofumiwakasugi" creationdate="20150902T060214Z">
        <seg># 上記は以下と同じ
names = ["John", "Peter", "Jack"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023542Z" creationid="hirofumiwakasugi" creationdate="20150903T023542Z">
        <seg># 上記は以下と同じ
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = num
if tmp.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010116Z" creationid="hirofumiwakasugi" creationdate="20151001T010116Z">
        <seg># 上記は以下と同じ
tmp = num
if tmp.even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052620Z" creationid="hirofumiwakasugi" creationdate="20150905T052620Z">
        <seg># 上記は以下と同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is the same as:
while !some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052419Z" creationid="hirofumiwakasugi" creationdate="20150905T052419Z">
        <seg># 上記は以下と同じ
while !some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The above is valid with these operators:
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054447Z" creationid="hirofumiwakasugi" creationdate="20150902T054433Z">
        <seg># 上記は以下の演算子でも有効
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type denoting a named tuple of x: Int32, y: String
NamedTuple(x: Int32, y: String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170014Z" creationid="makenowjust" creationdate="20200422T165947Z">
        <seg># x が Int32 で y が String であるような名前付きタプルの型を表す
NamedTuple(x: Int32, y: String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type denoting a tuple of Int32, String and Char
Tuple(Int32, String, Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165007Z" creationid="makenowjust" creationdate="20200422T164945Z">
        <seg># Int32、String、Char のタプルの型を表す
Tuple(Int32, String, Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># The type of value1 is known to be a String by the compiler,</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093920Z" creationid="makenowjust" creationdate="20200424T093920Z">
        <seg># このとき value1 と String 型 となることが保証され、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Then print them</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021032Z" creationid="hirofumiwakasugi" creationdate="20151002T021012Z">
        <seg># それから出力する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This correctly generates:
#
#     def foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035824Z" creationid="hirofumiwakasugi" creationdate="20151001T035824Z">
        <seg># 以下が正しく生成される
#
#     def foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This generates:
#
#     def foo
#       1
#     end
define_method foo, 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014701Z" creationid="hirofumiwakasugi" creationdate="20151001T014701Z">
        <seg># これで以下が生成されます
#
#     def foo
#       1
#     end
define_method foo, 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a comment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000228Z" creationid="makenowjust" creationdate="20200414T000228Z">
        <seg># This is a comment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is a forward declaration</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045918Z" creationid="hirofumiwakasugi" creationdate="20151007T045918Z">
        <seg># 以下が宣言フォーワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># This is the empty-tuple case
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030232Z" creationid="hirofumiwakasugi" creationdate="20150908T030230Z">
        <seg># 空のタプルの場合
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Truthy and falsey values</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005214Z" creationid="hirofumiwakasugi" creationdate="20150903T005158Z">
        <seg># 真偽値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022854Z" creationid="hirofumiwakasugi" creationdate="20150901T131530Z">
        <seg># タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type grammar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T004701Z" creationid="hirofumiwakasugi" creationdate="20150908T022338Z">
        <seg># 型文法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type reflection</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T004527Z" creationid="hirofumiwakasugi" creationdate="20150930T004504Z">
        <seg># 型のリフレクション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Type restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042437Z" creationid="hirofumiwakasugi" creationdate="20150907T042437Z">
        <seg># 型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Types and methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011549Z" creationid="hirofumiwakasugi" creationdate="20150904T011542Z">
        <seg># 型とメソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unicorn.new.horns # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215316Z" creationid="makenowjust" creationdate="20200412T215316Z">
        <seg># Unicorn.new.horns # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unicorn.new.horns #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg># Unicorn.new.horns #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Uninitialized variable declaration</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120457Z" creationid="hirofumiwakasugi" creationdate="20150906T114917Z">
        <seg># 初期化しない変数宣言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unsafe code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012416Z" creationid="hirofumiwakasugi" creationdate="20151009T012405Z">
        <seg># 安全でない (unsafe) コード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Unusual, but still can happen</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012051Z" creationid="hirofumiwakasugi" creationdate="20150916T012050Z">
        <seg># あまり考えられないが、絶対にないとは言えない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Using the compiler</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071702Z" creationid="hirofumiwakasugi" creationdate="20150901T071653Z">
        <seg># コンパイラを使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053403Z" creationid="hirofumiwakasugi" creationdate="20151007T053358Z">
        <seg># 変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Virtual and abstract types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031215Z" creationid="hirofumiwakasugi" creationdate="20150905T052421Z">
        <seg># virtual 型と abstract 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Visibility</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032003Z" creationid="hirofumiwakasugi" creationdate="20150905T052029Z">
        <seg># 可視性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We cannot access name inside the macro expansion here,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030902Z" creationid="hirofumiwakasugi" creationdate="20151009T030902Z">
        <seg># ここで、マクロ展開によって name にアクセスすることはできない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># We want to create an array 1, 2, 3 of Int32 | Float64
ary2 = ary.map { |x| x as Int32 | Float64 }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061411Z" creationid="hirofumiwakasugi" creationdate="20150930T061411Z">
        <seg># Int32 | Float64型 の 1, 2, 3 の配列にしたい
ary2 = ary.map { |x| x as Int32 | Float64 }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Will print "Cleanup..." after invoking something_dangerous,
# regardless of whether it raised or not
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013454Z" creationid="hirofumiwakasugi" creationdate="20150907T013435Z">
        <seg># 例外が発生したかどうかに関わらず、
# something_dangerous が実行された後に「Cleanup...」が出力される 

```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># With spaces and symbols
:"symbol with spaces"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131413Z" creationid="hirofumiwakasugi" creationdate="20150901T131314Z">
        <seg># 名前にスペースを含むシンボル
:"symbol with spaces"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Yields the current age of this person and increases</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071807Z" creationid="hirofumiwakasugi" creationdate="20150906T071717Z">
        <seg># 現在の年齢を yield して</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144052Z" creationid="hirofumiwakasugi" creationdate="20151010T144052Z">
        <seg># ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```
# unicorn = Unicorn.new
# unicorn.speak
# ```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212013Z" creationid="makenowjust" creationdate="20200412T212013Z">
        <seg># ```
# unicorn = Unicorn.new
# unicorn.speak
# ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ```text
# "I'm a unicorn"
# ```</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212111Z" creationid="makenowjust" creationdate="20200412T212111Z">
        <seg># ```text
# "I'm a unicorn"
# ```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061719Z" creationid="hirofumiwakasugi" creationdate="20160204T061719Z">
        <seg># a : Int32
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062429Z" creationid="hirofumiwakasugi" creationdate="20160204T062429Z">
        <seg># a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061348Z" creationid="hirofumiwakasugi" creationdate="20160204T061348Z">
        <seg># a : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061712Z" creationid="hirofumiwakasugi" creationdate="20160204T061712Z">
        <seg># a : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083253Z" creationid="makenowjust" creationdate="20200424T083253Z">
        <seg># a : String
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a : String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061720Z" creationid="hirofumiwakasugi" creationdate="20160204T061720Z">
        <seg># a : String
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022016Z" creationid="hirofumiwakasugi" creationdate="20150903T022016Z">
        <seg># a :: Int32
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052145Z" creationid="hirofumiwakasugi" creationdate="20150905T052145Z">
        <seg># a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014203Z" creationid="hirofumiwakasugi" creationdate="20150930T014203Z">
        <seg># a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012210Z" creationid="hirofumiwakasugi" creationdate="20150903T012210Z">
        <seg># a :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a :: String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022016Z" creationid="hirofumiwakasugi" creationdate="20150903T022016Z">
        <seg># a :: String
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># a can't be nil.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014532Z" creationid="hirofumiwakasugi" creationdate="20150903T014424Z">
        <seg># ということは、a  が nil というのはあり得ないので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># add method with type restrictions
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135914Z" creationid="hirofumiwakasugi" creationdate="20151009T135914Z">
        <seg># 型制約のある add メソッド
def restricted_add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># add method without type restrictions
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135851Z" creationid="hirofumiwakasugi" creationdate="20151009T135851Z">
        <seg># 型制約のない add メソッド
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># alias</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023817Z" creationid="hirofumiwakasugi" creationdate="20150902T023048Z">
        <seg># エイリアス (alias)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># always execute this</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014337Z" creationid="hirofumiwakasugi" creationdate="20150907T014337Z">
        <seg># ここは必ず実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># always execute this
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014328Z" creationid="hirofumiwakasugi" creationdate="20150907T014328Z">
        <seg># ここは必ず実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and do the inclusion check at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031129Z" creationid="hirofumiwakasugi" creationdate="20151009T031028Z">
        <seg># そして、それを含んでいるかのチェックをランタイムに行う必要がある</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and the error message contains "error message".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101219Z" creationid="akiji" creationdate="20200516T101219Z">
        <seg># エラーメッセージが"error message"だったら合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and the error message matches the regular expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234758Z" creationid="akiji" creationdate="20200516T101254Z">
        <seg># かつエラーメッセージが正規表現にマッチすれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># and the type of value2 is known to be an Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093932Z" creationid="makenowjust" creationdate="20200424T093932Z">
        <seg># value2 は Int32 型となることが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># any other kind of exception
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012505Z" creationid="hirofumiwakasugi" creationdate="20150907T012505Z">
        <seg># その他の例外
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># as</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014115Z" creationid="hirofumiwakasugi" creationdate="20150930T014115Z">
        <seg># as</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># at all, the compiler puts this method before the previous</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072850Z" creationid="hirofumiwakasugi" creationdate="20150906T072608Z">
        <seg># オーバーロードの条件に合致していた場合は、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T050519Z" creationid="hirofumiwakasugi" creationdate="20150831T050519Z">
        <seg># break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># but current type is an Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033633Z" creationid="hirofumiwakasugi" creationdate="20150909T033633Z">
        <seg># 現在の型が Animal なのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># but current type is the Program
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033723Z" creationid="hirofumiwakasugi" creationdate="20150909T033654Z">
        <seg># 現在の型が Program なのでエラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># case</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022913Z" creationid="hirofumiwakasugi" creationdate="20150903T022913Z">
        <seg># case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ditto</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144054Z" creationid="hirofumiwakasugi" creationdate="20151010T144054Z">
        <seg># ditto</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># do something...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113108Z" creationid="hirofumiwakasugi" creationdate="20150906T113108Z">
        <seg># do something...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># e : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061715Z" creationid="hirofumiwakasugi" creationdate="20160204T061715Z">
        <seg># e : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># e :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012732Z" creationid="hirofumiwakasugi" creationdate="20150903T012732Z">
        <seg># e :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># elements is Tuple(Int32, Int32, Int32, Float64)
sum 1, 2, 3, 4.5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042223Z" creationid="hirofumiwakasugi" creationdate="20150907T042223Z">
        <seg># Tuple(Int32, Int32, Int32, Float64)
sum 1, 2, 3, 4.5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># enum</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T013958Z" creationid="hirofumiwakasugi" creationdate="20150902T013958Z">
        <seg># enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute if an exception is raised</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014254Z" creationid="hirofumiwakasugi" creationdate="20150907T014254Z">
        <seg># 例外が発生するとここが実行される</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute if an exception is raised
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014235Z" creationid="hirofumiwakasugi" creationdate="20150907T014235Z">
        <seg># 例外が発生するとここが実行される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute this if an exception is raised
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013847Z" creationid="hirofumiwakasugi" creationdate="20150907T013847Z">
        <seg># 例外が発生するとここが実行される
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># execute this if an exception isn't raised
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013915Z" creationid="hirofumiwakasugi" creationdate="20150907T013907Z">
        <seg># 例外が発生しなかった場合のみここが実行される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: all_my_cli.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180415Z" creationid="makenowjust" creationdate="20200413T180415Z">
        <seg># file: all_my_cli.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: hello_goodbye.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175223Z" creationid="makenowjust" creationdate="20200413T175223Z">
        <seg># file: hello_goodbye.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: help.cr
require "option_parser"

OptionParser.parse do |parser|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172454Z" creationid="makenowjust" creationdate="20200413T172454Z">
        <seg># file: help.cr
require "option_parser"

OptionParser.parse do |parser|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183050Z" creationid="makenowjust" creationdate="20200413T182755Z">
        <seg> # file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182407Z" creationid="makenowjust" creationdate="20200413T182407Z">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input.upcase}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181858Z" creationid="makenowjust" creationdate="20200413T181858Z">
        <seg># file: let_it_cli.cr
puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets
puts "The Beatles are singing: 🎵#{user_input}🎶🎸🥁"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: let_it_cli.cr
require "colorize"

puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184436Z" creationid="makenowjust" creationdate="20200413T184436Z">
        <seg># file: let_it_cli.cr
require "colorize"

puts "Welcome to The Beatles Sing Along version 1.0!"
puts "Enter a phrase you want The Beatles to sing"
print "&gt; "
user_input = gets

exit if user_input.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: twist_and_shout.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174747Z" creationid="makenowjust" creationdate="20200413T174747Z">
        <seg># file: twist_and_shout.cr
require "option_parser"

the_beatles = [</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># file: yellow_cli.cr
require "colorize"

puts "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183318Z" creationid="makenowjust" creationdate="20200413T183318Z">
        <seg># file: yellow_cli.cr
require "colorize"

puts "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># finalize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041437Z" creationid="hirofumiwakasugi" creationdate="20150910T041437Z">
        <seg># finalize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># first is Int32 | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023043Z" creationid="hirofumiwakasugi" creationdate="20150916T023043Z">
        <seg># first は Int32 | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># for 'Employee:Class#new' (1 for 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023925Z" creationid="hirofumiwakasugi" creationdate="20150910T023849Z">
        <seg># wrong number of arguments のエラーが発生
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># fun</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143531Z" creationid="hirofumiwakasugi" creationdate="20151003T143531Z">
        <seg># fun</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># goes to 'puts a'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052248Z" creationid="hirofumiwakasugi" creationdate="20150905T052248Z">
        <seg># ループを抜けて 'puts a' に行く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># handle error ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160118T020615Z" creationid="hirofumiwakasugi" creationdate="20151010T011944Z">
        <seg># エラーハンドリング…</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a can be nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015347Z" creationid="hirofumiwakasugi" creationdate="20150903T015333Z">
        <seg># @a は nil ということもあり得る
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to be a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022613Z" creationid="hirofumiwakasugi" creationdate="20150903T022459Z">
        <seg># ここでは @a が String であることが保証され「ない」
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to be a String
end

a = @a
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083225Z" creationid="makenowjust" creationdate="20200424T083225Z">
        <seg># ここでも @a が String であることは保証されない
end

a = @a
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to respond to `abs`
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030611Z" creationid="hirofumiwakasugi" creationdate="20150903T030547Z">
        <seg># ここでは @a が `abs` に応答することが保証「されない」
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here @a is not guaranteed to respond to `abs`
end

a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084105Z" creationid="makenowjust" creationdate="20200424T084105Z">
        <seg># ここでも @a は `abs` メソッドを持つことが保証されない
end

a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `@@a` can be nil
end

a = nil
closure = -&gt;{ a = "foo" }

if a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081935Z" creationid="makenowjust" creationdate="20200424T081935Z">
        <seg># ここでも `@@a` が nil の可能性がある
end

a = nil
closure = -&gt;{ a = "foo" }

if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `@a` can be nil
end

if @@a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081921Z" creationid="makenowjust" creationdate="20200424T081921Z">
        <seg># ここでも `@a` が nil の可能性がある
end

if @@a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `a` can be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081953Z" creationid="makenowjust" creationdate="20200424T081941Z">
        <seg># ここでも `a` が nil の可能性がある
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here `a` can't be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082106Z" creationid="makenowjust" creationdate="20200424T082106Z">
        <seg># ここで `a` は nil にはならない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a can't be nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020353Z" creationid="hirofumiwakasugi" creationdate="20150903T020222Z">
        <seg># ここでは a が nil ということはあり得ない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a can't be nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020428Z" creationid="hirofumiwakasugi" creationdate="20150903T020428Z">
        <seg># ここでは a が nil ということはあり得ない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085246Z" creationid="makenowjust" creationdate="20200424T085246Z">
        <seg># ここで a は Int32 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Int32, because a is truthy in this branch
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085848Z" creationid="makenowjust" creationdate="20200424T085848Z">
        <seg># この節は a が真となる場合に評価されるので、ここで a は Int32 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Nil
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085239Z" creationid="makenowjust" creationdate="20200424T085239Z">
        <seg># ここで a は Nil 型
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is Nil because a is falsey in this branch
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085824Z" creationid="makenowjust" creationdate="20200424T085818Z">
        <seg># この節は a が偽となる場合に評価されるので、ここで a は Nil 型
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021709Z" creationid="hirofumiwakasugi" creationdate="20150903T021709Z">
        <seg># a は必ず String
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String
end

if b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082857Z" creationid="makenowjust" creationdate="20200424T082857Z">
        <seg># ここで a は String 型
end

if b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String and b is a Number
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083136Z" creationid="makenowjust" creationdate="20200424T083136Z">
        <seg># ここで a は String 型で b は Number 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is a String and b is a Number
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022339Z" creationid="hirofumiwakasugi" creationdate="20150903T022339Z">
        <seg># ここでは a は String で b は Number
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022641Z" creationid="hirofumiwakasugi" creationdate="20150903T022608Z">
        <seg># ここでは a が String であることが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end

# A bit shorter:
if (a = @a).is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083329Z" creationid="makenowjust" creationdate="20200424T083313Z">
        <seg># ここで a は String であることが保証される
end

# より簡潔な書き方:
if (a = @a).is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to be a String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022651Z" creationid="hirofumiwakasugi" creationdate="20150903T022640Z">
        <seg># ここでは a が String であることが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030630Z" creationid="hirofumiwakasugi" creationdate="20150903T030630Z">
        <seg># ここでは a が `abs` に応答することが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end

# A bit shorter:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084130Z" creationid="makenowjust" creationdate="20200424T084130Z">
        <seg># ここでは a が `abs` メソッドを持つことが保証されます
end

# より簡潔な書き方:
if (a = @a).responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is guaranteed to respond to `abs`
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030646Z" creationid="hirofumiwakasugi" creationdate="20150903T030646Z">
        <seg># ここでは a が `abs` に応答することが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is not nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081440Z" creationid="makenowjust" creationdate="20200424T081440Z">
        <seg># ここでは a は nil ではない
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a is not nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014817Z" creationid="hirofumiwakasugi" creationdate="20150903T014725Z">
        <seg># ここでは a は nil ではない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be Int32, since Int32#abs exists but String#abs doesn't
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084037Z" creationid="hirofumiwakasugi" creationdate="20150903T030437Z">
        <seg># Int32#abs は存在するが String#abs は存在しないので、ここでは Int32 となり、
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be String
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084046Z" creationid="makenowjust" creationdate="20200424T084019Z">
        <seg># ここでは a は String となる
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a will be String
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030535Z" creationid="hirofumiwakasugi" creationdate="20150903T030535Z">
        <seg># ここでは String となる
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a's type will be reduced to those responding to the 'abs' method
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083929Z" creationid="makenowjust" creationdate="20200424T083929Z">
        <seg># ここで a の型は 'abs' メソッドを持つ型のみに縮小されている
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here a's type will be reduced to those responding to the 'abs' method
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030444Z" creationid="hirofumiwakasugi" creationdate="20150903T030314Z">
        <seg># ここでは、a の型は必ず 'abs' メソッドに応答するものに制限される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is String because it's not an Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085920Z" creationid="makenowjust" creationdate="20200424T085920Z">
        <seg># b が Int32 ではないときに評価されるので、ここで b は String 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is a Number
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082924Z" creationid="makenowjust" creationdate="20200424T082924Z">
        <seg># ここで b は Number 型
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here b is a Number
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021718Z" creationid="hirofumiwakasugi" creationdate="20150903T021718Z">
        <seg># b は必ず Number
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here both a and b are guaranteed not to be Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081528Z" creationid="makenowjust" creationdate="20200424T081528Z">
        <seg># ここでは a も b も Nil ではないことが保証される
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here both a and b are guaranteed not to be Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014839Z" creationid="hirofumiwakasugi" creationdate="20150903T014805Z">
        <seg># ここでは a も b も Nil でないことが保証される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here var is neither a String nor an Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010037Z" creationid="hirofumiwakasugi" creationdate="20151001T010037Z">
        <seg># ここでは var は String と Int32 のどちらでもない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># here we know that the first call did not return Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021306Z" creationid="hirofumiwakasugi" creationdate="20150903T021121Z">
        <seg># ここで、最初の呼び出しが Nil を返していないことはわかっている</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005824Z" creationid="hirofumiwakasugi" creationdate="20150903T005824Z">
        <seg># if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014124Z" creationid="hirofumiwakasugi" creationdate="20150903T014114Z">
        <seg># if 変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var.is_a?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021530Z" creationid="hirofumiwakasugi" creationdate="20150903T021456Z">
        <seg># if 変数.is_a?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># if var.responds_to?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030006Z" creationid="hirofumiwakasugi" creationdate="20150903T025945Z">
        <seg># if 変数.responds_to?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># implement conversion ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012218Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg># 変換の実装…</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># in spec/project_spec.cr
require "../src/project"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090803Z" creationid="makenowjust" creationdate="20200427T090803Z">
        <seg># spec/project_spec.cr
require "../src/project"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># instance_sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120355Z" creationid="hirofumiwakasugi" creationdate="20150906T120355Z">
        <seg># instance_sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># instead we need to use the macro language to construct an array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031006Z" creationid="hirofumiwakasugi" creationdate="20151009T031006Z">
        <seg># その代わりに、マクロの記法を使って配列を構築する必要がある</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># invokes Foo's baz method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021151Z" creationid="hirofumiwakasugi" creationdate="20150904T021151Z">
        <seg># Foo の baz メソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># invokes the program's add method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021130Z" creationid="hirofumiwakasugi" creationdate="20150904T021130Z">
        <seg># プログラムの add メソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># is passed instead
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044920Z" creationid="hirofumiwakasugi" creationdate="20151005T044920Z">
        <seg># wrapper.to_unsafe が代わりに渡される
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># is_a?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T005239Z" creationid="hirofumiwakasugi" creationdate="20150930T005239Z">
        <seg># is_a?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># its age by the value returned by the block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071812Z" creationid="hirofumiwakasugi" creationdate="20150906T071725Z">
        <seg># そのブロックの戻り値にしたがって年をとる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># lib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142125Z" creationid="hirofumiwakasugi" creationdate="20151003T142125Z">
        <seg># lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># method is, so wrapper.to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151121T153759Z" creationid="hirofumiwakasugi" creationdate="20151005T044902Z">
        <seg># to_unsafe があるため、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># must be X::MyInt, not Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023302Z" creationid="hirofumiwakasugi" creationdate="20151008T023202Z">
        <seg># Int32 ではなく X::MyInt でなければならない
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># new, initialize and allocate</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022232Z" creationid="hirofumiwakasugi" creationdate="20150904T022214Z">
        <seg># new/initialize/allocate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052311Z" creationid="hirofumiwakasugi" creationdate="20150905T052311Z">
        <seg># next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># object_id returns the address of an object in memory,
# so we create a pointer with that address
ptr = Pointer(Void).new(array.object_id)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020202Z" creationid="hirofumiwakasugi" creationdate="20150930T020202Z">
        <seg># object_id はメモリ上のオブジェクトのアドレスを返すため、
# そのアドレスからポインタを作ることができる
ptr = Pointer(Void).new(array.object_id)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># one when considering which overload matches.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072842Z" creationid="hirofumiwakasugi" creationdate="20150906T072738Z">
        <seg># コンパイラはこのメソッドを最初のものより先に並べる (優先させる)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyException or MyOtherException
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013158Z" creationid="hirofumiwakasugi" creationdate="20150907T013138Z">
        <seg># MyException/MyOtherException のみ
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyException...
rescue ex2 : MyOtherException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012453Z" creationid="hirofumiwakasugi" creationdate="20150907T012453Z">
        <seg># MyException のみ
rescue ex2 : MyOtherException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># only MyOtherException...
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012458Z" creationid="hirofumiwakasugi" creationdate="20150907T012458Z">
        <seg># MyOtherException のみ
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># out</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043319Z" creationid="hirofumiwakasugi" creationdate="20151005T043319Z">
        <seg># out</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># pointerof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T130937Z" creationid="hirofumiwakasugi" creationdate="20150905T130937Z">
        <seg># pointerof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># responds_to?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T012702Z" creationid="hirofumiwakasugi" creationdate="20150930T012702Z">
        <seg># responds_to?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># second is Char | String | Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023048Z" creationid="hirofumiwakasugi" creationdate="20150916T023048Z">
        <seg># second は Char | String | Nil
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># sizeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035215Z" creationid="hirofumiwakasugi" creationdate="20150906T035215Z">
        <seg># sizeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># so the flags are: darwin, x86_64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043023Z" creationid="hirofumiwakasugi" creationdate="20150908T043023Z">
        <seg># この場合のフラグは darwin と x86_64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for 64 bits platforms
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043314Z" creationid="hirofumiwakasugi" creationdate="20150908T043243Z">
        <seg># 64ビットプラットフォームに固有のコード
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for linux 64 bits
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043426Z" creationid="hirofumiwakasugi" creationdate="20150908T043426Z">
        <seg># Linux の64ビットに固有のコード
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># some specific code for non-64 bits platforms
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043316Z" creationid="hirofumiwakasugi" creationdate="20150908T043305Z">
        <seg># 64ビットではないプラットフォームに固有のコード
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># spec/myapp_spec.cr:7

Finished in 880 microseconds
1 examples, 1 failures, 0 errors, 0 pending

Failed examples:

crystal spec spec/myapp_spec.cr:6 # Myapp works</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165205Z" creationid="makenowjust" creationdate="20200419T165205Z">
        <seg># spec/myapp_spec.cr:7

Finished in 880 microseconds
1 examples, 1 failures, 0 errors, 0 pending

Failed examples:

crystal spec spec/myapp_spec.cr:6 # Myapp works</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># struct</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053516Z" creationid="hirofumiwakasugi" creationdate="20151003T141453Z">
        <seg># 構造体 (struct)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># the `Legendary` module</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212127Z" creationid="makenowjust" creationdate="20200412T212127Z">
        <seg># the `Legendary` module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># this will always be executed
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013625Z" creationid="hirofumiwakasugi" creationdate="20150907T013625Z">
        <seg># ここは必ず実行される
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># to C function
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024730Z" creationid="hirofumiwakasugi" creationdate="20151008T024714Z">
        <seg># C の関数には渡せない
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044206Z" creationid="hirofumiwakasugi" creationdate="20151005T044206Z">
        <seg># to_unsafe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022207Z" creationid="hirofumiwakasugi" creationdate="20151008T022131Z">
        <seg># 型 (type)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># typeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062438Z" creationid="hirofumiwakasugi" creationdate="20150930T062438Z">
        <seg># typeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># union</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053540Z" creationid="hirofumiwakasugi" creationdate="20151007T052034Z">
        <seg># 共用体 (union)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># unless</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022723Z" creationid="hirofumiwakasugi" creationdate="20150903T022723Z">
        <seg># unless</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># until</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052352Z" creationid="hirofumiwakasugi" creationdate="20150905T052352Z">
        <seg># until</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061605Z" creationid="hirofumiwakasugi" creationdate="20160204T061605Z">
        <seg># var : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061551Z" creationid="hirofumiwakasugi" creationdate="20160204T061551Z">
        <seg># var : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010029Z" creationid="hirofumiwakasugi" creationdate="20151001T010029Z">
        <seg># var :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># var :: String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010027Z" creationid="hirofumiwakasugi" creationdate="20151001T010027Z">
        <seg># var :: String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># while</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052030Z" creationid="hirofumiwakasugi" creationdate="20150905T052030Z">
        <seg># while</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># ||</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052633Z" creationid="hirofumiwakasugi" creationdate="20150905T052633Z">
        <seg># ||</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Alternative ways to do error handling</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023311Z" creationid="hirofumiwakasugi" creationdate="20150907T023311Z">
        <seg>## 例外処理の他の方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## AlwaysInline</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073053Z" creationid="hirofumiwakasugi" creationdate="20150919T073053Z">
        <seg>## AlwaysInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array of String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140030Z" creationid="hirofumiwakasugi" creationdate="20150901T135818Z">
        <seg>## 文字列の配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array of Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140056Z" creationid="hirofumiwakasugi" creationdate="20150901T140056Z">
        <seg>## シンボルの配列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Array-like types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140128Z" creationid="hirofumiwakasugi" creationdate="20150901T140128Z">
        <seg>## 配列ライクな型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Binary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025935Z" creationid="hirofumiwakasugi" creationdate="20150909T025935Z">
        <seg>## 2項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## CallConvention</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073603Z" creationid="hirofumiwakasugi" creationdate="20150919T073603Z">
        <seg>## CallConvention</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Catch-all initialization</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054815Z" creationid="hirofumiwakasugi" creationdate="20150905T054815Z">
        <seg>## Catch-all initialization</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Checking the condition at the end of a loop</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052153Z" creationid="hirofumiwakasugi" creationdate="20150905T052153Z">
        <seg>## 条件によってループを抜ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Classes as restrictions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030026Z" creationid="hirofumiwakasugi" creationdate="20150908T025409Z">
        <seg>## クラスによる制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Compiling and running at once</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071943Z" creationid="hirofumiwakasugi" creationdate="20150901T071943Z">
        <seg>## コンパイルと同時に実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Conditionals</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035929Z" creationid="hirofumiwakasugi" creationdate="20151001T035825Z">
        <seg>## 条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Converting between pointer types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015557Z" creationid="hirofumiwakasugi" creationdate="20150930T015434Z">
        <seg>## ポインタ型同士の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Converting between pointer types and other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020020Z" creationid="hirofumiwakasugi" creationdate="20150930T020009Z">
        <seg>## ポインタ型と他の型の変換</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Creating a project or library</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072138Z" creationid="hirofumiwakasugi" creationdate="20150901T072138Z">
        <seg>## プロジェクトやライブラリの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Creating an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072020Z" creationid="hirofumiwakasugi" creationdate="20150901T072020Z">
        <seg>## 実行ファイルの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Defining custom exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011545Z" creationid="hirofumiwakasugi" creationdate="20150907T011545Z">
        <seg>## 独自の例外を定義する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Enums from integers</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011435Z" creationid="hirofumiwakasugi" creationdate="20150916T010814Z">
        <seg>## 整数から Enum を作る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Flags</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074728Z" creationid="hirofumiwakasugi" creationdate="20150919T074728Z">
        <seg>## Flags</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Flags enums</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T045224Z" creationid="hirofumiwakasugi" creationdate="20150914T024723Z">
        <seg>## Flags Enum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Forwarding non-captured blocks</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025438Z" creationid="hirofumiwakasugi" creationdate="20150917T025434Z">
        <seg>## 捕捉されないブロックのフォワーディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Free variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035525Z" creationid="hirofumiwakasugi" creationdate="20150908T030254Z">
        <seg>## 自由変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Free variables in constructors</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040552Z" creationid="hirofumiwakasugi" creationdate="20150908T040552Z">
        <seg>## コンストラクタにおける自由変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## From methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022025Z" creationid="hirofumiwakasugi" creationdate="20150902T022025Z">
        <seg>## メソッドから Proc を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Generic structs and modules</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061119Z" creationid="hirofumiwakasugi" creationdate="20150924T060902Z">
        <seg>## ジェネリックな構造体とモジュール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Generic types inheritance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061624Z" creationid="hirofumiwakasugi" creationdate="20150924T061624Z">
        <seg>## ジェネリック型の継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Hash-like types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143020Z" creationid="hirofumiwakasugi" creationdate="20150901T143020Z">
        <seg>## ハッシュライクな型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Heredoc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061749Z" creationid="hirofumiwakasugi" creationdate="20160204T061749Z">
        <seg>## ヒアドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Indexing</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030920Z" creationid="hirofumiwakasugi" creationdate="20150909T030133Z">
        <seg>## インデックス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Install</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021536Z" creationid="hirofumiwakasugi" creationdate="20151009T021536Z">
        <seg>## インストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Install
Once the repository is configured you're ready to install Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071613Z" creationid="hirofumiwakasugi" creationdate="20150831T053128Z">
        <seg>## インストール
リポジトリの構成が完了すると、Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020509Z" creationid="hirofumiwakasugi" creationdate="20150901T105226Z">
        <seg>## 文字列埋め込み (String Interpolation)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Invoking</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021845Z" creationid="hirofumiwakasugi" creationdate="20150902T021845Z">
        <seg>## Proc の実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Link</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072310Z" creationid="hirofumiwakasugi" creationdate="20150919T072310Z">
        <seg>## Link</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Macro calls</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035857Z" creationid="hirofumiwakasugi" creationdate="20151001T021310Z">
        <seg>## マクロにおけるメソッド呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Meaning</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031707Z" creationid="hirofumiwakasugi" creationdate="20150909T031215Z">
        <seg>## 演算子の意味について</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011351Z" creationid="hirofumiwakasugi" creationdate="20150916T011351Z">
        <seg>## メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Naming</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010149Z" creationid="hirofumiwakasugi" creationdate="20151010T010149Z">
        <seg>## 命名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Nilable</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010851Z" creationid="hirofumiwakasugi" creationdate="20151009T010703Z">
        <seg>## Nil を許容する (nilable)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Nilable instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053635Z" creationid="hirofumiwakasugi" creationdate="20150905T053635Z">
        <seg>## Nil を許容する (nilable) インスタンス変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## NoInline</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073144Z" creationid="hirofumiwakasugi" creationdate="20150919T073144Z">
        <seg>## NoInline</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other commands and options</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072203Z" creationid="hirofumiwakasugi" creationdate="20150901T072203Z">
        <seg>## その他のコマンドやオプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other forms</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160409Z" creationid="hirofumiwakasugi" creationdate="20150905T160409Z">
        <seg>## その他の形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Other uses for generic types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072702Z" creationid="hirofumiwakasugi" creationdate="20150912T072021Z">
        <seg>## ジェネリック型のその他の用途</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Overloads</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014852Z" creationid="hirofumiwakasugi" creationdate="20150916T014759Z">
        <seg>## オーバーロード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Packed</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072507Z" creationid="hirofumiwakasugi" creationdate="20150919T072507Z">
        <seg>## Packed</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Paths and generics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010354Z" creationid="hirofumiwakasugi" creationdate="20151009T010039Z">
        <seg>## パスとジェネリクス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Performance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030953Z" creationid="hirofumiwakasugi" creationdate="20150916T030953Z">
        <seg>## パフォーマンス</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Pointer</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010918Z" creationid="hirofumiwakasugi" creationdate="20151009T010918Z">
        <seg>## ポインタ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Private top-level methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040722Z" creationid="hirofumiwakasugi" creationdate="20150909T040701Z">
        <seg>## トップレベルの private メソッド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011308Z" creationid="hirofumiwakasugi" creationdate="20151009T011308Z">
        <seg>## Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raises</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073451Z" creationid="hirofumiwakasugi" creationdate="20150919T073451Z">
        <seg>## Raises</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raises attribute</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T030141Z" creationid="hirofumiwakasugi" creationdate="20151008T024845Z">
        <seg>## Raise 属性</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Raising exception</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012813Z" creationid="hirofumiwakasugi" creationdate="20150907T010836Z">
        <seg>## 例外を発生させる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Redefining methods, and previous_def</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123019Z" creationid="hirofumiwakasugi" creationdate="20150904T122932Z">
        <seg>## メソッドの再定義と previous_def</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Rescuing exceptions</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013102Z" creationid="hirofumiwakasugi" creationdate="20150907T011908Z">
        <seg>## 例外の捕捉</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ReturnsTwice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073224Z" creationid="hirofumiwakasugi" creationdate="20150919T073224Z">
        <seg>## ReturnsTwice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Scope</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015422Z" creationid="hirofumiwakasugi" creationdate="20151001T015229Z">
        <seg>## スコープ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Setup repository</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052818Z" creationid="hirofumiwakasugi" creationdate="20150831T052654Z">
        <seg>## リポジトリの設定</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Short one-argument syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153206Z" creationid="hirofumiwakasugi" creationdate="20160115T152930Z">
        <seg>## 単一引数の場合の短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Short syntax form</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014047Z" creationid="hirofumiwakasugi" creationdate="20150907T014047Z">
        <seg>## 短縮記法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Specifying the types of instance variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093240Z" creationid="hirofumiwakasugi" creationdate="20150905T093131Z">
        <seg>## インスタンス変数の型を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## StaticArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011052Z" creationid="hirofumiwakasugi" creationdate="20151009T011052Z">
        <seg>## 静的配列 (StaticArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## String keys</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142958Z" creationid="hirofumiwakasugi" creationdate="20150901T142958Z">
        <seg>## キーが文字列のハッシュ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Symbol keys</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142753Z" creationid="hirofumiwakasugi" creationdate="20150901T142700Z">
        <seg>## キーがシンボルのハッシュ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ThreadLocal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072358Z" creationid="hirofumiwakasugi" creationdate="20150919T072358Z">
        <seg>## ThreadLocal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Troubleshooting on OSX 10.11 (El Capitan)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061015Z" creationid="hirofumiwakasugi" creationdate="20160204T061015Z">
        <seg>## OSX 10.11 (El Capitan) での注意</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011132Z" creationid="hirofumiwakasugi" creationdate="20151009T011132Z">
        <seg>## タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014344Z" creationid="hirofumiwakasugi" creationdate="20150907T014344Z">
        <seg>## 型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type of closured variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054141Z" creationid="hirofumiwakasugi" creationdate="20150918T054141Z">
        <seg>## クロージャの変数の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type restrictions in splats</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025907Z" creationid="hirofumiwakasugi" creationdate="20150908T025823Z">
        <seg>## splat 展開での型制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Type variables inference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070729Z" creationid="hirofumiwakasugi" creationdate="20150912T070034Z">
        <seg>## 型変数の型推論</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Unary operators</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025408Z" creationid="hirofumiwakasugi" creationdate="20150909T025304Z">
        <seg>## 単項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Underscore</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012030Z" creationid="hirofumiwakasugi" creationdate="20151009T012030Z">
        <seg>## アンダースコア</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Union</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010431Z" creationid="hirofumiwakasugi" creationdate="20151009T010431Z">
        <seg>## 型の組み合わせ (ユニオン)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Upgrade</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053203Z" creationid="hirofumiwakasugi" creationdate="20150831T053203Z">
        <seg>## アップグレード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011633Z" creationid="hirofumiwakasugi" creationdate="20150916T011601Z">
        <seg>## 用途</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage for casting to a bigger type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062412Z" creationid="hirofumiwakasugi" creationdate="20150930T022448Z">
        <seg>## 大きな型へのキャストの利用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Usage for when the compiler can't infer the type of a block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062404Z" creationid="hirofumiwakasugi" creationdate="20150930T061634Z">
        <seg>## コンパイラがブロックの型を推論できないときの利用方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Variadic arguments and splatting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040717Z" creationid="hirofumiwakasugi" creationdate="20151001T040717Z">
        <seg>## 可変長引数と展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Whitespace</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011841Z" creationid="hirofumiwakasugi" creationdate="20151010T011841Z">
        <seg>## 空白 (whitespace)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## Yield arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015648Z" creationid="hirofumiwakasugi" creationdate="20150916T015539Z">
        <seg>## yield の引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024257Z" creationid="hirofumiwakasugi" creationdate="20150916T024257Z">
        <seg>## break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## break and next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062000Z" creationid="hirofumiwakasugi" creationdate="20150918T062000Z">
        <seg>## break と next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## class</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011834Z" creationid="hirofumiwakasugi" creationdate="20151009T011834Z">
        <seg>## クラス (class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013734Z" creationid="hirofumiwakasugi" creationdate="20150907T013734Z">
        <seg>## else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013143Z" creationid="hirofumiwakasugi" creationdate="20150907T013143Z">
        <seg>## ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## extend self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142607Z" creationid="hirofumiwakasugi" creationdate="20150911T142607Z">
        <seg>## extend self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025550Z" creationid="hirofumiwakasugi" creationdate="20150916T025550Z">
        <seg>## next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## require "./filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155924Z" creationid="hirofumiwakasugi" creationdate="20150905T155924Z">
        <seg>## require "./filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## require "filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T144752Z" creationid="hirofumiwakasugi" creationdate="20150905T144752Z">
        <seg>## require "ファイル名"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011653Z" creationid="hirofumiwakasugi" creationdate="20151009T011653Z">
        <seg>## self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## self restriction</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022705Z" creationid="hirofumiwakasugi" creationdate="20150908T022635Z">
        <seg>## self 制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## super</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024426Z" creationid="hirofumiwakasugi" creationdate="20150910T024426Z">
        <seg>## super</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## typeof</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012250Z" creationid="hirofumiwakasugi" creationdate="20151009T012250Z">
        <seg>## typeof</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## with ... yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030226Z" creationid="hirofumiwakasugi" creationdate="20150916T030226Z">
        <seg>## with ... yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>## yield value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023351Z" creationid="hirofumiwakasugi" creationdate="20150916T023229Z">
        <seg>## yield の値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### A Complete Example</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144048Z" creationid="hirofumiwakasugi" creationdate="20151010T144029Z">
        <seg>### 全体の例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Acronyms</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010716Z" creationid="hirofumiwakasugi" creationdate="20151010T010701Z">
        <seg>### 頭字語 (Acronym)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Constants</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041439Z" creationid="hirofumiwakasugi" creationdate="20151001T041439Z">
        <seg>### 定数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Directory and File Names</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011037Z" creationid="hirofumiwakasugi" creationdate="20151010T011037Z">
        <seg>### ディレクトリとファイル名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Generate Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144107Z" creationid="hirofumiwakasugi" creationdate="20151010T144107Z">
        <seg>### ドキュメントの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Iteration
To iterate an `ArrayLiteral`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040350Z" creationid="hirofumiwakasugi" creationdate="20151001T040258Z">
        <seg>### イテレーション
`ArrayLiteral` をイテレートするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Libs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010940Z" creationid="hirofumiwakasugi" creationdate="20151010T010921Z">
        <seg>### ライブラリ (Lib)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>### Type information</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041040Z" creationid="hirofumiwakasugi" creationdate="20151001T041040Z">
        <seg>### 型情報</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal -v
Crystal 0.31.1 (2019-10-02)

LLVM: 8.0.1
Default target: x86_64-apple-macosx</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172032Z" creationid="makenowjust" creationdate="20200413T172032Z">
        <seg>$ crystal -v
Crystal 0.31.1 (2019-10-02)

LLVM: 8.0.1
Default target: x86_64-apple-macosx</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175339Z" creationid="makenowjust" creationdate="20200413T175339Z">
        <seg>$ crystal ./hello_goodbye.cr -- -g "Penny Lane"

You say goodbye, and Ringo Starr say hello to Penny Lane!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175905Z" creationid="makenowjust" creationdate="20200413T175905Z">
        <seg>$ crystal ./hello_goodbye.cr -- -n
Unhandled exception: Invalid option: -n (OptionParser::InvalidOption)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174323Z" creationid="makenowjust" creationdate="20200413T174323Z">
        <seg>$ crystal ./help.cr -- -h

Welcome to The Beatles App!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182447Z" creationid="makenowjust" creationdate="20200413T182447Z">
        <seg>$ crystal ./let_it_cli.cr
Showing last frame.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr
$ ./hello_world
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150603Z" creationid="makenowjust" creationdate="20200419T150603Z">
        <seg>$ crystal build hello_world.cr
$ ./hello_world
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr --release</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150703Z" creationid="makenowjust" creationdate="20200419T150703Z">
        <seg>$ crystal build hello_world.cr --release</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal build hello_world.cr --release --static</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152729Z" creationid="makenowjust" creationdate="20200419T152729Z">
        <seg>$ crystal build hello_world.cr --release --static</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal env
CRYSTAL_CACHE_DIR="/home/crystal/.cache/crystal"
CRYSTAL_PATH="/usr/bin/../share/crystal/src:lib"
CRYSTAL_VERSION="0.28.0"
CRYSTAL_LIBRARY_PATH="/usr/bin/../lib/crystal/lib"
$ crystal env CRYSTAL_VERSION
0.28.0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163401Z" creationid="makenowjust" creationdate="20200419T163401Z">
        <seg>$ crystal env
CRYSTAL_CACHE_DIR="/home/crystal/.cache/crystal"
CRYSTAL_PATH="/usr/bin/../share/crystal/src:lib"
CRYSTAL_VERSION="0.28.0"
CRYSTAL_LIBRARY_PATH="/usr/bin/../lib/crystal/lib"
$ crystal env CRYSTAL_VERSION
0.28.0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal eval 'puts "Hello World"'
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160056Z" creationid="makenowjust" creationdate="20200419T160056Z">
        <seg>$ crystal eval 'puts "Hello World"'
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal init app myapp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153545Z" creationid="makenowjust" creationdate="20200419T153545Z">
        <seg>$ crystal init app myapp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal init lib my_cool_lib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161504Z" creationid="makenowjust" creationdate="20200419T161504Z">
        <seg>$ crystal init lib my_cool_lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174951Z" creationid="makenowjust" creationdate="20200413T174951Z">
        <seg>$ crystal run ./twist_and_shout.cr -- -t

Group members:
==============
JOHN LENNON
PAUL MCCARTNEY
GEORGE HARRISON
RINGO STARR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal spec
F

Failures:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165157Z" creationid="makenowjust" creationdate="20200419T165157Z">
        <seg>$ crystal spec
F

Failures:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal tool format file.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215751Z" creationid="makenowjust" creationdate="20200412T215751Z">
        <seg>$ crystal tool format file.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal tool format src/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215826Z" creationid="makenowjust" creationdate="20200412T215826Z">
        <seg>$ crystal tool format src/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ crystal version
Crystal 0.25.1 [b782738ff] (2018-06-27)

LLVM: 4.0.0
Default target: x86_64-unknown-linux-gnu</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160758Z" creationid="makenowjust" creationdate="20200419T160758Z">
        <seg>$ crystal version
Crystal 0.25.1 [b782738ff] (2018-06-27)

LLVM: 4.0.0
Default target: x86_64-unknown-linux-gnu</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ docker-compose up
...
gitbook_1  | Starting server ...
gitbook_1  | Serving book on http://localhost:4000
gitbook_1  | Restart after change in file node_modules/.bin
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164715Z" creationid="makenowjust" creationdate="20200413T164715Z">
        <seg>$ docker-compose up
...
gitbook_1  | Starting server ...
gitbook_1  | Serving book on http://localhost:4000
gitbook_1  | Restart after change in file node_modules/.bin
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal build hello_world.cr
$ ./hello_world Crystal
Hello Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155131Z" creationid="makenowjust" creationdate="20200419T155131Z">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal build hello_world.cr
$ ./hello_world Crystal
Hello Crystal!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal run hello_world.cr -- Crystal
Hello Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154709Z" creationid="makenowjust" creationdate="20200419T154709Z">
        <seg>$ echo 'puts "Hello #{ARGV[0]?}!"' &gt; hello_world.cr
$ crystal run hello_world.cr -- Crystal
Hello Crystal!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello World!"' &gt; hello_world.cr
$ crystal run hello_world.cr
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150249Z" creationid="makenowjust" creationdate="20200419T150249Z">
        <seg>$ echo 'puts "Hello World!"' &gt; hello_world.cr
$ crystal run hello_world.cr
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ echo 'puts "Hello World"' | crystal eval
Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160058Z" creationid="makenowjust" creationdate="20200419T160058Z">
        <seg>$ echo 'puts "Hello World"' | crystal eval
Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book.git
$ cd crystal-book
$ npm install -g gitbook-cli@2.3.0
$ npm install
$ gitbook install
$ gitbook serve
Live reload server started on port: 35729
Press CTRL+C to quit ...

info: 8 plugins are installed
info: loading plugin "ga"...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164543Z" creationid="makenowjust" creationdate="20200413T164543Z">
        <seg>$ git clone https://github.com/crystal-lang/crystal-book.git
$ cd crystal-book
$ npm install -g gitbook-cli@2.3.0
$ npm install
$ gitbook install
$ gitbook serve
Live reload server started on port: 35729
Press CTRL+C to quit ...

info: 8 plugins are installed
info: loading plugin "ga"...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>$errno : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053758Z" creationid="hirofumiwakasugi" creationdate="20151007T053758Z">
        <seg>$errno : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%(hello ("world")) # =&gt; "hello (\"world\")"
%[hello ["world"]] # =&gt; "hello [\"world\"]"
%{hello {"world"}} # =&gt; "hello {\"world\"}"
%&lt;hello &lt;"world"&gt;&gt; # =&gt; "hello &lt;\"world\"&gt;"
%|hello "world"|   # =&gt; "hello \"world\""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193502Z" creationid="makenowjust" creationdate="20200419T193502Z">
        <seg>%(hello ("world")) # =&gt; "hello (\"world\")"
%[hello ["world"]] # =&gt; "hello [\"world\"]"
%{hello {"world"}} # =&gt; "hello {\"world\"}"
%&lt;hello &lt;"world"&gt;&gt; # =&gt; "hello &lt;\"world\"&gt;"
%|hello "world"|   # =&gt; "hello \"world\""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%i(foo bar baz)  # =&gt; [:foo, :bar, :baz]
%i(foo\nbar baz) # =&gt; [:"foo\nbar", :baz]
%i(foo(bar) baz) # =&gt; [:"foo(bar)", :baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172121Z" creationid="makenowjust" creationdate="20200420T172121Z">
        <seg>%i(foo bar baz)  # =&gt; [:foo, :bar, :baz]
%i(foo\nbar baz) # =&gt; [:"foo\nbar", :baz]
%i(foo(bar) baz) # =&gt; [:"foo(bar)", :baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%i(foo\ bar baz) # =&gt; [:"foo bar", :baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172244Z" creationid="makenowjust" creationdate="20200420T172244Z">
        <seg>%i(foo\ bar baz) # =&gt; [:"foo bar", :baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%name{index} = {{index}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021008Z" creationid="hirofumiwakasugi" creationdate="20151002T021008Z">
        <seg>%name{index} = {{index}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%r((/)) # =&gt; /(\/)/
%r[[/]] # =&gt; /[\/]/
%r{{/}} # =&gt; /{\/}/
%r&lt;&lt;/&gt;&gt; # =&gt; /&lt;\/&gt;/
%r|/|   # =&gt; /\//</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042413Z" creationid="makenowjust" creationdate="20200421T042413Z">
        <seg>%r((/)) # =&gt; /(\/)/
%r[[/]] # =&gt; /[\/]/
%r{{/}} # =&gt; /{\/}/
%r&lt;&lt;/&gt;&gt; # =&gt; /&lt;\/&gt;/
%r|/|   # =&gt; /\//</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(foo bar baz)  # =&gt; ["foo", "bar", "baz"]
%w(foo\nbar baz) # =&gt; ["foo\\nbar", "baz"]
%w(foo(bar) baz) # =&gt; ["foo(bar)", "baz"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193934Z" creationid="makenowjust" creationdate="20200419T193934Z">
        <seg>%w(foo bar baz)  # =&gt; ["foo", "bar", "baz"]
%w(foo\nbar baz) # =&gt; ["foo\\nbar", "baz"]
%w(foo(bar) baz) # =&gt; ["foo(bar)", "baz"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(foo\ bar baz) # =&gt; ["foo bar", "baz"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194135Z" creationid="makenowjust" creationdate="20200419T194135Z">
        <seg>%w(foo\ bar baz) # =&gt; ["foo bar", "baz"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%w(one two three) # =&gt; ["one", "two", "three"]
%i(one two three) # =&gt; [:one, :two, :three]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173341Z" creationid="makenowjust" creationdate="20200420T173341Z">
        <seg>%w(one two three) # =&gt; ["one", "two", "three"]
%i(one two three) # =&gt; [:one, :two, :three]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>%x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020012Z" creationid="hirofumiwakasugi" creationdate="20151002T020012Z">
        <seg>%x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; (objects[1] = 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174929Z" creationid="makenowjust" creationdate="20200422T174929Z">
        <seg>&amp;&amp; (objects[1] = 2) と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; - Logical AND Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101705Z" creationid="makenowjust" creationdate="20200424T101507Z">
        <seg>&amp;&amp; - 論理積 (かつ) 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&amp;&amp; value2.odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093739Z" creationid="makenowjust" creationdate="20200424T093739Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'\''         # single quote
'\\'         # backslash
'\a'         # alert
'\b'         # backspace
'\e'         # escape
'\f'         # form feed
'\n'         # newline
'\r'         # carriage return
'\t'         # tab
'\v'         # vertical tab
'\uFFFF'     # hexadecimal unicode character
'\u{10FFFF}' # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190802Z" creationid="makenowjust" creationdate="20200419T185947Z">
        <seg>'\''         # シングルクォート
'\\'         # バックスラッシュ
'\a'         # アラート
'\b'         # バックスペース
'\e'         # エスケープ
'\f'         # フォームフィード (改ページ)
'\n'         # 改行
'\r'         # キャリッジリターン (復帰)
'\t'         # タブ文字
'\v'         # 垂直タブ
'\uFFFF'     # 16進数によるユニコード文字
'\u{10FFFF}' # 16進数によるユニコード文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'\u0041'    # =&gt; 'A'
'\u{41}'    # =&gt; 'A'
'\u{1F52E}' # =&gt; '&amp;#x1F52E;'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190630Z" creationid="makenowjust" creationdate="20200419T190547Z">
        <seg>'\u0041'    # =&gt; 'A'
'\u{41}'    # =&gt; 'A'
'\u{1F52E}' # =&gt; '🔮'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>'a'
'z'
'0'
'_'
'あ'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185803Z" creationid="makenowjust" creationdate="20200419T185803Z">
        <seg>'a'
'z'
'0'
'_'
'あ'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(0..5).to_a  # =&gt; [0, 1, 2, 3, 4, 5]
(0...5).to_a # =&gt; [0, 1, 2, 3, 4]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034445Z" creationid="makenowjust" creationdate="20200421T034445Z">
        <seg>(0..5).to_a  # =&gt; [0, 1, 2, 3, 4, 5]
(0...5).to_a # =&gt; [0, 1, 2, 3, 4]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* C (the default)
* Fast
* Cold
* WebKit_JS
* AnyReg
* X86_StdCall
* X86_FastCall</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074652Z" creationid="hirofumiwakasugi" creationdate="20150919T074652Z">
        <seg>* C (the default)
* Fast
* Cold
* WebKit_JS
* AnyReg
* X86_StdCall
* X86_FastCall</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code blocks that have Crystal code can be surrounded with triple backticks or indented with four spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140803Z" creationid="hirofumiwakasugi" creationdate="20151010T140539Z">
        <seg>* Crystal のコードブロックは3つのバックティック (バッククォート) で囲むか、スペース4つでインデントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code involving C bindings
* [Uninitialized variable declaration](declare_var.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012638Z" creationid="hirofumiwakasugi" creationdate="20151009T012627Z">
        <seg>* C バインディングを伴うコード
* [初期化しない変数宣言](declare_var.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Code involving raw pointers: the [Pointer](http://crystal-lang.org/api/Pointer.html) type and [pointerof](pointerof.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012550Z" creationid="hirofumiwakasugi" creationdate="20151009T012550Z">
        <seg>* 生のポインタを伴うコード: [ポインタ](http://crystal-lang.org/api/Pointer.html) 型と [pointerof](pointerof.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Documentation should be positioned right above definitions of classes, modules, and methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033440Z" creationid="hirofumiwakasugi" creationdate="20151010T033309Z">
        <seg>* ドキュメンテーションコメントはクラス、モジュール、そしてメソッド定義のすぐ上に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a directory named "filename" is found and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T154529Z" creationid="hirofumiwakasugi" creationdate="20150905T154453Z">
        <seg>* もし「ファイル名」のディレクトリが見つかり、そこに「ファイル名.cr」というファイルが含まれていれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a file named "filename.cr" is found in the require path, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T154509Z" creationid="hirofumiwakasugi" creationdate="20150905T145635Z">
        <seg>* もし「ファイル名.cr」というファイルが require パスに見つかれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* If a file named "filename.cr" is found relative to the current file, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160157Z" creationid="hirofumiwakasugi" creationdate="20150905T160157Z">
        <seg>* もし「ファイル名.cr」というファイルが現在のファイルからの相対パスに見つかれば、そのファイルをロードする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* It has a type
* It can respond to some methods</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024638Z" creationid="hirofumiwakasugi" creationdate="20150904T012858Z">
        <seg>* オブジェクトは型を持っている
* オブジェクトは何らかのメソッドに応答する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Otherwise a compile-time error is issued.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160220Z" creationid="hirofumiwakasugi" creationdate="20150905T155117Z">
        <seg>* それ以外の場合はコンパイルエラーとなる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Parameter names should be *italicized* (surrounded with single asterisks `*` or underscores `_`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140503Z" creationid="hirofumiwakasugi" creationdate="20151010T140503Z">
        <seg>* パラメータ名は「イタリック体」とします。1つのアスタリスク (`*`) またはアンダースコア(`_`) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Text blocks, for example to show program output, must be surrounded with triple backticks followed by the "text" keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141208Z" creationid="hirofumiwakasugi" creationdate="20151010T141009Z">
        <seg>* 例えばプログラムの出力を示すためのテキストのブロックは、「text」というキーワードをつけた3つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The [allocate](new,_initialize_and_allocate.html) class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012604Z" creationid="hirofumiwakasugi" creationdate="20151009T012604Z">
        <seg>* クラスメソッドの [allocate](new,_initialize_and_allocate.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The documentation of a method is included into the method summary and the method details.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144125Z" creationid="hirofumiwakasugi" creationdate="20151010T135722Z">
        <seg>* メソッドのドキュメントは、メソッドの概要、およびメソッドの詳細の内容となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* The number of arguments
* The type restrictions applied to arguments
* Whether the method accepts a [block](blocks_and_procs.html) or not</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071320Z" creationid="hirofumiwakasugi" creationdate="20150906T071239Z">
        <seg>* 引数の数
* 引数に指定された型制約
* メソッドが[ブロック](blocks_and_procs.html)をとるかどうか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to methods in other types, do `OtherType#method(arg1, arg2)` or just `OtherType#method`, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142300Z" creationid="hirofumiwakasugi" creationdate="20151010T142203Z">
        <seg>* 他の型のメソッドに対して自動的にリンクさせたい場合は、`OtherType#method(arg1, arg2)` のようにするか、または単純に `OtherType#method` として、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to methods of the currently documented type, use a hash like `#horns` or `#index(char)`, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142132Z" creationid="hirofumiwakasugi" creationdate="20151010T141309Z">
        <seg>* 現在の型のメソッドに対して自動的にリンクさせたい場合は、`#horns` や `#index(char)` のようにハッシュ記号をつけて、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To automatically link to other types, enclose them with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141257Z" creationid="hirofumiwakasugi" creationdate="20151010T141257Z">
        <seg>* 自動的に他の型にリンクさせたい場合は、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* To show the value of an expression inside code blocks, use `#=&gt;`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142407Z" creationid="hirofumiwakasugi" creationdate="20151010T142315Z">
        <seg>* コードブロックの中で式の値を示したい場合は、`#=&gt;` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use [standard coding style](coding_style.md) so your project will be navigable and readable to others.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141823Z" creationid="hirofumiwakasugi" creationdate="20151009T141614Z">
        <seg>* [標準コーディングスタイル](coding_style.md) を利用してください。そうすれば、あなたのプロジェクトは他の人にとって追いかけやすく読みやすいものになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use `:nodoc:` to hide public declarations from the generated documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143928Z" creationid="hirofumiwakasugi" creationdate="20151010T143018Z">
        <seg>* public に定義されたものを生成されたドキュメント上では隠したい場合には、`:nodoc:` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use `ditto` to use the same comment as in the previous declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143013Z" creationid="hirofumiwakasugi" creationdate="20151010T142931Z">
        <seg>* 前の定義と同じコメントを使いたい場合は、`ditto` (同上の意味) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Use the third person: `Returns the number of horns this unicorn has` instead of `Return the number of horns this unicorn has`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140318Z" creationid="hirofumiwakasugi" creationdate="20151010T140215Z">
        <seg>* 3人称を使ってください。つまり、`Return the number of horns this unicorn has` ではなく、`Returns the number of horns this unicorn has` とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* We create a `.o` file in the target system and from that file we create a compile.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050437Z" creationid="hirofumiwakasugi" creationdate="20150909T050437Z">
        <seg>* 対象システム用の `.o` ファイルを生成し、それを使ってコンパイラを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* Write [documentation](documenting_code.md) to express purpose of your code and support the `crystal doc` generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141835Z" creationid="hirofumiwakasugi" creationdate="20151009T141619Z">
        <seg>* コードの目的を説明するための[ドキュメント](documenting_code.md)を書いてください。 そして、`crystal doc` ジェネレータをサポートしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can [require](../syntax_and_semantics/requiring_files.html) code defined in other files:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072604Z" creationid="hirofumiwakasugi" creationdate="20150901T072604Z">
        <seg>* [require](../syntax_and_semantics/requiring_files.html) で、他のファイルで定義されたコードを読み込むことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can easily create strings with embedded content, known as string interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105233Z" creationid="hirofumiwakasugi" creationdate="20150901T072651Z">
        <seg>* 文字列埋め込み (string interpolation) を使うと、簡単に文字列に式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You can use code blocks, or simply [blocks](../syntax_and_semantics/blocks_and_procs.html), which are a very convenient way to reuse code and get some features from the functional world:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072639Z" creationid="hirofumiwakasugi" creationdate="20150901T072639Z">
        <seg>* [ブロック](../syntax_and_semantics/blocks_and_procs.html)を使うと簡単にコードを再利用することができ、また、関数型の世界にあるいくつかの機能を利用することが可能になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* You program by invoking [methods](../syntax_and_semantics/classes_and_methods.html) (or sending messages) to objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072629Z" creationid="hirofumiwakasugi" creationdate="20150901T072623Z">
        <seg>* オブジェクトに対して[メソッド](../syntax_and_semantics/classes_and_methods.html)を実行 (またはメッセージを送信) することでプログラムを構築します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [&amp;&amp;](syntax_and_semantics/and.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061610Z" creationid="hirofumiwakasugi" creationdate="20150904T061610Z">
        <seg>* [&amp;&amp;](syntax_and_semantics/and.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Array](syntax_and_semantics/literals/array.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023035Z" creationid="hirofumiwakasugi" creationdate="20150902T023035Z">
        <seg>* [配列 (Array)](syntax_and_semantics/literals/array.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [As a suffix](syntax_and_semantics/as_a_suffix.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061640Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [後置 if](syntax_and_semantics/as_a_suffix.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [As an expression](syntax_and_semantics/as_an_expression.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061646Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [式としての if](syntax_and_semantics/as_an_expression.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Assignment](syntax_and_semantics/assignment.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060413Z" creationid="hirofumiwakasugi" creationdate="20150902T060413Z">
        <seg>* [代入](syntax_and_semantics/assignment.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Attributes](syntax_and_semantics/attributes.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074900Z" creationid="hirofumiwakasugi" creationdate="20150919T074900Z">
        <seg>* [属性 (Attribute)](syntax_and_semantics/attributes.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Block forwarding](syntax_and_semantics/block_forwarding.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060309Z" creationid="hirofumiwakasugi" creationdate="20150918T060309Z">
        <seg>* [ブロックのフォワーディング](syntax_and_semantics/block_forwarding.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Blocks and Procs](syntax_and_semantics/blocks_and_procs.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033132Z" creationid="hirofumiwakasugi" creationdate="20150916T033132Z">
        <seg>* [ブロックと Proc](syntax_and_semantics/blocks_and_procs.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Bool](syntax_and_semantics/literals/bool.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022934Z" creationid="hirofumiwakasugi" creationdate="20150902T022934Z">
        <seg>* [真偽値 (Bool)](syntax_and_semantics/literals/bool.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [C bindings](syntax_and_semantics/c_bindings/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045234Z" creationid="hirofumiwakasugi" creationdate="20151005T045209Z">
        <seg>* [C バインディング](syntax_and_semantics/c_bindings/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Callbacks](syntax_and_semantics/c_bindings/callbacks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053631Z" creationid="hirofumiwakasugi" creationdate="20151008T053631Z">
        <seg>* [コールバック](syntax_and_semantics/c_bindings/callbacks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Capturing blocks](syntax_and_semantics/capturing_blocks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060252Z" creationid="hirofumiwakasugi" creationdate="20150918T060252Z">
        <seg>* [ブロックの捕捉](syntax_and_semantics/capturing_blocks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Char](syntax_and_semantics/literals/char.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023007Z" creationid="hirofumiwakasugi" creationdate="20150902T023007Z">
        <seg>* [文字 (Char)](syntax_and_semantics/literals/char.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Class variables](syntax_and_semantics/class_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042247Z" creationid="hirofumiwakasugi" creationdate="20150910T042247Z">
        <seg>* [クラス変数](syntax_and_semantics/class_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Classes and methods](syntax_and_semantics/classes_and_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061829Z" creationid="hirofumiwakasugi" creationdate="20150904T061829Z">
        <seg>* [クラスとメソッド](syntax_and_semantics/classes_and_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Closures](syntax_and_semantics/closures.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060314Z" creationid="hirofumiwakasugi" creationdate="20150918T060314Z">
        <seg>* [クロージャ](syntax_and_semantics/closures.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Coding style](conventions/coding_style.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012327Z" creationid="hirofumiwakasugi" creationdate="20151010T012327Z">
        <seg>* [コーディングスタイル](conventions/coding_style.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Comments](syntax_and_semantics/comments.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023640Z" creationid="hirofumiwakasugi" creationdate="20150901T073137Z">
        <seg>* [コメント](syntax_and_semantics/comments.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Compile-time flags](syntax_and_semantics/compile_time_flags.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043914Z" creationid="hirofumiwakasugi" creationdate="20150909T024215Z">
        <seg>* [コンパイル時のフラグ](syntax_and_semantics/compile_time_flags.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Constants](syntax_and_semantics/c_bindings/constants.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053617Z" creationid="hirofumiwakasugi" creationdate="20151008T053617Z">
        <seg>* [定数](syntax_and_semantics/c_bindings/constants.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Constants](syntax_and_semantics/constants.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T060036Z" creationid="hirofumiwakasugi" creationdate="20150913T060036Z">
        <seg>* [定数](syntax_and_semantics/constants.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Control expressions](syntax_and_semantics/control_expressions.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005059Z" creationid="hirofumiwakasugi" creationdate="20150903T005059Z">
        <seg>* [制御式](syntax_and_semantics/control_expressions.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Cross-compilation](syntax_and_semantics/cross-compilation.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T051154Z" creationid="hirofumiwakasugi" creationdate="20150909T051154Z">
        <seg>* [クロスコンパイル](syntax_and_semantics/cross-compilation.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Default and named arguments](syntax_and_semantics/default_and_named_arguments.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114239Z" creationid="hirofumiwakasugi" creationdate="20150906T114239Z">
        <seg>* [デフォルト引数と名前付き引数](syntax_and_semantics/default_and_named_arguments.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Documenting code](conventions/documenting_code.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012337Z" creationid="hirofumiwakasugi" creationdate="20151010T012337Z">
        <seg>* [コードのドキュメント化](conventions/documenting_code.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Enums](syntax_and_semantics/enum.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033120Z" creationid="hirofumiwakasugi" creationdate="20150916T033120Z">
        <seg>* [Enum](syntax_and_semantics/enum.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Everything is an object](syntax_and_semantics/everything_is_an_object.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061733Z" creationid="hirofumiwakasugi" creationdate="20150904T061733Z">
        <seg>* [すべてがオブジェクト](syntax_and_semantics/everything_is_an_object.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Exception handling](syntax_and_semantics/exception_handling.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043904Z" creationid="hirofumiwakasugi" creationdate="20150909T043904Z">
        <seg>* [例外処理](syntax_and_semantics/exception_handling.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Floats](syntax_and_semantics/literals/floats.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022957Z" creationid="hirofumiwakasugi" creationdate="20150902T022957Z">
        <seg>* [浮動小数点数 (Float)](syntax_and_semantics/literals/floats.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Fresh variables](syntax_and_semantics/macros/fresh_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T035243Z" creationid="hirofumiwakasugi" creationdate="20151005T045207Z">
        <seg>* [フレッシュな変数](syntax_and_semantics/macros/fresh_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [From a tar.gz](installation/from_a_targz.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011443Z" creationid="hirofumiwakasugi" creationdate="20150831T054750Z">
        <seg>* [tar.gz からインストール](installation/from_a_targz.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [From sources](installation/from_source_repository.md)
* [Using the compiler](using_the_compiler/README.md)
* [Overview and Examples](overview/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073130Z" creationid="hirofumiwakasugi" creationdate="20150831T054826Z">
        <seg>* [ソースコードからインストール](installation/from_source_repository.md)
* [コンパイラを使用する](using_the_compiler/README.md)
* [概要とプログラム例](overview/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Generics](syntax_and_semantics/generics.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062830Z" creationid="hirofumiwakasugi" creationdate="20150924T062830Z">
        <seg>* [ジェネリクス](syntax_and_semantics/generics.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Global variables](syntax_and_semantics/global_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060405Z" creationid="hirofumiwakasugi" creationdate="20150902T060405Z">
        <seg>* [グローバル変数](syntax_and_semantics/global_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [HTTP Server](overview/http_server.md)
* [Syntax and semantics](syntax_and_semantics/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073145Z" creationid="hirofumiwakasugi" creationdate="20150901T073134Z">
        <seg>* [HTTP サーバー](overview/http_server.md)
* [シンタックスとセマンティクス](syntax_and_semantics/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hash](syntax_and_semantics/literals/hash.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023041Z" creationid="hirofumiwakasugi" creationdate="20150902T023041Z">
        <seg>* [ハッシュ (Hash)](syntax_and_semantics/literals/hash.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hello World!](overview/hello_world.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073131Z" creationid="hirofumiwakasugi" creationdate="20150901T073131Z">
        <seg>* [Hello World!](overview/hello_world.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Hooks](syntax_and_semantics/macros/hooks.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045159Z" creationid="hirofumiwakasugi" creationdate="20151005T045159Z">
        <seg>* [フック](syntax_and_semantics/macros/hooks.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Inheritance](syntax_and_semantics/inheritance.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042231Z" creationid="hirofumiwakasugi" creationdate="20150910T042231Z">
        <seg>* [継承](syntax_and_semantics/inheritance.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Instance variables type inference](syntax_and_semantics/instance_variables_type_inference.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T101106Z" creationid="hirofumiwakasugi" creationdate="20150905T101106Z">
        <seg>* [インスタンス変数と型推論](syntax_and_semantics/instance_variables_type_inference.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Integers](syntax_and_semantics/literals/integers.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022945Z" creationid="hirofumiwakasugi" creationdate="20150902T022945Z">
        <seg>* [整数 (Integer)](syntax_and_semantics/literals/integers.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Introduction](README.md)
* [Installation](installation/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054642Z" creationid="hirofumiwakasugi" creationdate="20150831T054638Z">
        <seg>* [はじめに](README.md)
* [インストール](installation/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Literals](syntax_and_semantics/literals.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022927Z" creationid="hirofumiwakasugi" creationdate="20150902T022927Z">
        <seg>* [リテラル](syntax_and_semantics/literals.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Local variables](syntax_and_semantics/local_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060356Z" creationid="hirofumiwakasugi" creationdate="20150902T060356Z">
        <seg>* [ローカル変数](syntax_and_semantics/local_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Low-level primitives](syntax_and_semantics/low_level_primitives.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040543Z" creationid="hirofumiwakasugi" creationdate="20150906T040543Z">
        <seg>* [ローレベルプリミティブ](syntax_and_semantics/low_level_primitives.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Macro methods](syntax_and_semantics/macros/macro_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045155Z" creationid="hirofumiwakasugi" creationdate="20151005T045155Z">
        <seg>* [マクロメソッド](syntax_and_semantics/macros/macro_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Macros](syntax_and_semantics/macros.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041824Z" creationid="hirofumiwakasugi" creationdate="20151001T041824Z">
        <seg>* [マクロ](syntax_and_semantics/macros.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Methods and instance variables](syntax_and_semantics/methods_and_instance_variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T101058Z" creationid="hirofumiwakasugi" creationdate="20150905T053111Z">
        <seg>* [メソッドとインスタンス変数](syntax_and_semantics/methods_and_instance_variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Modules](syntax_and_semantics/modules.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150720Z" creationid="hirofumiwakasugi" creationdate="20150911T150720Z">
        <seg>* [モジュール](syntax_and_semantics/modules.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Multiple assignment](syntax_and_semantics/multiple_assignment.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060420Z" creationid="hirofumiwakasugi" creationdate="20150902T060420Z">
        <seg>* [多重代入](syntax_and_semantics/multiple_assignment.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Nil](syntax_and_semantics/literals/nil.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022928Z" creationid="hirofumiwakasugi" creationdate="20150902T022928Z">
        <seg>* [Nil](syntax_and_semantics/literals/nil.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Arch Linux](installation/on_arch_linux.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021849Z" creationid="hirofumiwakasugi" creationdate="20151009T021849Z">
        <seg>* [Arch Linux](installation/on_arch_linux.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian And Ubuntu](on_debian_and_ubuntu.html)
* [On RedHat And CentOS](on_redhat_and_centos.html)
* [On Arch Linux](on_arch_linux.html)
* [On Mac OSX using Homebrew](on_mac_osx_using_homebrew.html)
* [From a tar.gz](from_a_targz.html)
* [From sources](from_source_repository.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021750Z" creationid="hirofumiwakasugi" creationdate="20151009T021736Z">
        <seg>* [Debian や Ubuntu](on_debian_and_ubuntu.html)
* [RedHat や CentOS](on_redhat_and_centos.html)
* [Arch Linux](on_arch_linux.html)
* [Mac OS X (Homebrew を利用)](on_mac_osx_using_homebrew.html)
* [tar.gz からインストール](from_a_targz.html)
* [ソースコードからインストール](from_source_repository.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian And Ubuntu](on_debian_and_ubuntu.html)
* [On RedHat And CentOS](on_redhat_and_centos.html)
* [On Mac OSX using Homebrew](on_mac_osx_using_homebrew.html)
* [From a tar.gz](from_a_targz.html)
* [From sources](from_source_repository.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054730Z" creationid="hirofumiwakasugi" creationdate="20150831T054027Z">
        <seg>* [Debian や Ubuntu](on_debian_and_ubuntu.html)
* [RedHat や CentOS](on_redhat_and_centos.html)
* [Mac OS X (Homebrew を利用)](on_mac_osx_using_homebrew.html)
* [tar.gz からインストール](from_a_targz.html)
* [ソースコードからインストール](from_source_repository.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Debian and Ubuntu](installation/on_debian_and_ubuntu.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054650Z" creationid="hirofumiwakasugi" creationdate="20150831T054650Z">
        <seg>* [Debian や Ubuntu](installation/on_debian_and_ubuntu.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On Mac OSX using Homebrew](installation/on_mac_osx_using_homebrew.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054721Z" creationid="hirofumiwakasugi" creationdate="20150831T054702Z">
        <seg>* [Mac OS X (Homebrew を利用)](installation/on_mac_osx_using_homebrew.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [On RedHat and CentOS](installation/on_redhat_and_centos.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T054657Z" creationid="hirofumiwakasugi" creationdate="20150831T054657Z">
        <seg>* [RedHat や CentOS](installation/on_redhat_and_centos.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Operators](syntax_and_semantics/operators.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042912Z" creationid="hirofumiwakasugi" creationdate="20150909T042912Z">
        <seg>* [演算子](syntax_and_semantics/operators.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Overloading](syntax_and_semantics/overloading.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114231Z" creationid="hirofumiwakasugi" creationdate="20150905T101108Z">
        <seg>* [オーバーロード](syntax_and_semantics/overloading.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Proc literal](syntax_and_semantics/proc_literal.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060257Z" creationid="hirofumiwakasugi" creationdate="20150918T060257Z">
        <seg>* [Proc リテラル](syntax_and_semantics/proc_literal.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Proc](syntax_and_semantics/literals/proc.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023133Z" creationid="hirofumiwakasugi" creationdate="20150902T023133Z">
        <seg>* [Proc](syntax_and_semantics/literals/proc.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Range](syntax_and_semantics/literals/range.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023101Z" creationid="hirofumiwakasugi" creationdate="20150902T023043Z">
        <seg>* [範囲 (Range)](syntax_and_semantics/literals/range.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Regex](syntax_and_semantics/literals/regex.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023125Z" creationid="hirofumiwakasugi" creationdate="20150902T023113Z">
        <seg>* [正規表現 (Regex)](syntax_and_semantics/literals/regex.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Requiring files](syntax_and_semantics/requiring_files.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162002Z" creationid="hirofumiwakasugi" creationdate="20150905T162002Z">
        <seg>* [ファイルの require](syntax_and_semantics/requiring_files.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Return types](syntax_and_semantics/return_types.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042909Z" creationid="hirofumiwakasugi" creationdate="20150909T042909Z">
        <seg>* [戻り値の型](syntax_and_semantics/return_types.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Splats and tuples](syntax_and_semantics/splats_and_tuples.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041212Z" creationid="hirofumiwakasugi" creationdate="20150908T041212Z">
        <seg>* [splat 展開とタプル](syntax_and_semantics/splats_and_tuples.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [String](syntax_and_semantics/literals/string.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023018Z" creationid="hirofumiwakasugi" creationdate="20150902T023018Z">
        <seg>* [文字列 (String)](syntax_and_semantics/literals/string.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Structs](syntax_and_semantics/structs.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T060031Z" creationid="hirofumiwakasugi" creationdate="20150913T060031Z">
        <seg>* [構造体 (Struct)](syntax_and_semantics/structs.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Symbol](syntax_and_semantics/literals/symbol.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023027Z" creationid="hirofumiwakasugi" creationdate="20150902T023027Z">
        <seg>* [シンボル (Symbol)](syntax_and_semantics/literals/symbol.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Ternary if](syntax_and_semantics/ternary_if.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061653Z" creationid="hirofumiwakasugi" creationdate="20150904T061603Z">
        <seg>* [3項演算子](syntax_and_semantics/ternary_if.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [The Program](syntax_and_semantics/the_program.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061801Z" creationid="hirofumiwakasugi" creationdate="20150904T061801Z">
        <seg>* [プログラム](syntax_and_semantics/the_program.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Truthy and falsey values](syntax_and_semantics/truthy_and_falsey_values.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061618Z" creationid="hirofumiwakasugi" creationdate="20150904T061602Z">
        <seg>* [真偽値](syntax_and_semantics/truthy_and_falsey_values.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Tuple](syntax_and_semantics/literals/tuple.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T023132Z" creationid="hirofumiwakasugi" creationdate="20150902T023114Z">
        <seg>* [タプル (Tuple)](syntax_and_semantics/literals/tuple.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type grammar](syntax_and_semantics/type_grammar.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013718Z" creationid="hirofumiwakasugi" creationdate="20151009T013718Z">
        <seg>* [型文法](syntax_and_semantics/type_grammar.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type reflection](syntax_and_semantics/type_reflection.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063338Z" creationid="hirofumiwakasugi" creationdate="20150930T063338Z">
        <seg>* [型のリフレクション](syntax_and_semantics/type_reflection.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Type restrictions](syntax_and_semantics/type_restrictions.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041219Z" creationid="hirofumiwakasugi" creationdate="20150908T041219Z">
        <seg>* [型制約](syntax_and_semantics/type_restrictions.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Types and methods](syntax_and_semantics/types_and_methods.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061724Z" creationid="hirofumiwakasugi" creationdate="20150904T061724Z">
        <seg>* [型とメソッド](syntax_and_semantics/types_and_methods.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Uninitialized variable declaration](syntax_and_semantics/declare_var.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121104Z" creationid="hirofumiwakasugi" creationdate="20150906T121104Z">
        <seg>* [初期化しない変数宣言](syntax_and_semantics/declare_var.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Unsafe code](syntax_and_semantics/unsafe.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013725Z" creationid="hirofumiwakasugi" creationdate="20151009T013725Z">
        <seg>* [安全でない (unsafe) コード](syntax_and_semantics/unsafe.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Unsafe code](syntax_and_semantics/unsafe.md)
* [Conventions](conventions/README.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012321Z" creationid="hirofumiwakasugi" creationdate="20151009T141204Z">
        <seg>* [安全でない (unsafe) コード](syntax_and_semantics/unsafe.md)
* [規約](conventions/README.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Variables](syntax_and_semantics/c_bindings/variables.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T054808Z" creationid="hirofumiwakasugi" creationdate="20151007T054757Z">
        <seg>* [変数](syntax_and_semantics/c_bindings/variables.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Virtual and abstract types](syntax_and_semantics/virtual_and_abstract_types.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042240Z" creationid="hirofumiwakasugi" creationdate="20150910T042240Z">
        <seg>* [virtual 型と abstract 型](syntax_and_semantics/virtual_and_abstract_types.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [Visibility](syntax_and_semantics/visibility.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042924Z" creationid="hirofumiwakasugi" creationdate="20150909T042924Z">
        <seg>* [可視性](syntax_and_semantics/visibility.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [alias](syntax_and_semantics/alias.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074915Z" creationid="hirofumiwakasugi" creationdate="20150919T074915Z">
        <seg>* [エイリアス](syntax_and_semantics/alias.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [alias](syntax_and_semantics/c_bindings/alias.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053626Z" creationid="hirofumiwakasugi" creationdate="20151008T053626Z">
        <seg>* [エイリアス (alias)](syntax_and_semantics/c_bindings/alias.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [as](syntax_and_semantics/as.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [as](syntax_and_semantics/as.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [break](syntax_and_semantics/break.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [break](syntax_and_semantics/break.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [case](syntax_and_semantics/case.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061605Z" creationid="hirofumiwakasugi" creationdate="20150904T061605Z">
        <seg>* [case](syntax_and_semantics/case.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [enum](syntax_and_semantics/c_bindings/enum.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T054756Z" creationid="hirofumiwakasugi" creationdate="20151007T054756Z">
        <seg>* [enum](syntax_and_semantics/c_bindings/enum.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [finalize](syntax_and_semantics/finalize.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042248Z" creationid="hirofumiwakasugi" creationdate="20150910T042248Z">
        <seg>* [finalize](syntax_and_semantics/finalize.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [fun](syntax_and_semantics/c_bindings/fun.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045235Z" creationid="hirofumiwakasugi" creationdate="20151005T045235Z">
        <seg>* [fun](syntax_and_semantics/c_bindings/fun.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var.is_a?(...)](syntax_and_semantics/if_varis_a.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061705Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数.is_a?(...)](syntax_and_semantics/if_varis_a.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var.responds_to?(...)](syntax_and_semantics/if_varresponds_to.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061710Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数.responds_to?(...)](syntax_and_semantics/if_varresponds_to.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if var](syntax_and_semantics/if_var.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061702Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [if 変数](syntax_and_semantics/if_var.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [if](syntax_and_semantics/if.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061602Z" creationid="hirofumiwakasugi" creationdate="20150904T061602Z">
        <seg>* [if](syntax_and_semantics/if.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [instance_sizeof](syntax_and_semantics/instance_sizeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040546Z" creationid="hirofumiwakasugi" creationdate="20150906T040546Z">
        <seg>* [instance_sizeof](syntax_and_semantics/instance_sizeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [is_a?](syntax_and_semantics/is_a.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063339Z" creationid="hirofumiwakasugi" creationdate="20150930T063339Z">
        <seg>* [is_a?](syntax_and_semantics/is_a.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [lib](syntax_and_semantics/c_bindings/lib.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045235Z" creationid="hirofumiwakasugi" creationdate="20151005T045235Z">
        <seg>* [lib](syntax_and_semantics/c_bindings/lib.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [new, initialize and allocate](syntax_and_semantics/new,_initialize_and_allocate.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061840Z" creationid="hirofumiwakasugi" creationdate="20150904T061840Z">
        <seg>* [new/initialize/allocate](syntax_and_semantics/new,_initialize_and_allocate.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [next](syntax_and_semantics/next.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [next](syntax_and_semantics/next.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [out](syntax_and_semantics/c_bindings/out.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045236Z" creationid="hirofumiwakasugi" creationdate="20151005T045236Z">
        <seg>* [out](syntax_and_semantics/c_bindings/out.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [pointerof](syntax_and_semantics/pointerof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040544Z" creationid="hirofumiwakasugi" creationdate="20150906T040544Z">
        <seg>* [pointerof](syntax_and_semantics/pointerof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [responds_to?](syntax_and_semantics/responds_to.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [responds_to?](syntax_and_semantics/responds_to.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [sizeof](syntax_and_semantics/sizeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040545Z" creationid="hirofumiwakasugi" creationdate="20150906T040545Z">
        <seg>* [sizeof](syntax_and_semantics/sizeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [struct](syntax_and_semantics/c_bindings/struct.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053604Z" creationid="hirofumiwakasugi" creationdate="20151006T045226Z">
        <seg>* [構造体 (struct)](syntax_and_semantics/c_bindings/struct.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [to_unsafe](syntax_and_semantics/c_bindings/to_unsafe.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045236Z" creationid="hirofumiwakasugi" creationdate="20151005T045236Z">
        <seg>* [to_unsafe](syntax_and_semantics/c_bindings/to_unsafe.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [type](syntax_and_semantics/c_bindings/type.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053618Z" creationid="hirofumiwakasugi" creationdate="20151008T053618Z">
        <seg>* [type](syntax_and_semantics/c_bindings/type.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [typeof](syntax_and_semantics/typeof.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063340Z" creationid="hirofumiwakasugi" creationdate="20150930T063340Z">
        <seg>* [typeof](syntax_and_semantics/typeof.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [union](syntax_and_semantics/c_bindings/union.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053611Z" creationid="hirofumiwakasugi" creationdate="20151007T054755Z">
        <seg>* [共用体 (union)](syntax_and_semantics/c_bindings/union.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [unless](syntax_and_semantics/unless.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061604Z" creationid="hirofumiwakasugi" creationdate="20150904T061604Z">
        <seg>* [unless](syntax_and_semantics/unless.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [until](syntax_and_semantics/until.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061606Z" creationid="hirofumiwakasugi" creationdate="20150904T061606Z">
        <seg>* [until](syntax_and_semantics/until.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [while](syntax_and_semantics/while.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061605Z" creationid="hirofumiwakasugi" creationdate="20150904T061605Z">
        <seg>* [while](syntax_and_semantics/while.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* [||](syntax_and_semantics/or.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T011436Z" creationid="hirofumiwakasugi" creationdate="20150904T011436Z">
        <seg>* [||](syntax_and_semantics/or.md)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `--cross-compile`: the [compile-time flags](compile_time_flags.html) to use
* `--target`: the [LLVM Target Triple](http://llvm.org/docs/LangRef.html#target-triple) to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T043632Z" creationid="hirofumiwakasugi" creationdate="20150909T044718Z">
        <seg>* `--cross-compile`: [コンパイル時フラグ](compile_time_flags.html) を使用する
* `--target`: [LLVM Target Triple](http://llvm.org/docs/LangRef.html#target-triple) を使用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link("pcre")]` will pass `-lpcre` to the linker, but the compiler will first try to use [pkg-config](http://en.wikipedia.org/wiki/Pkg-config).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142734Z" creationid="hirofumiwakasugi" creationdate="20151003T142734Z">
        <seg>* `@[Link("pcre")]` は `-lpcre` をリンカに渡します。ただ、コンパイラはまず最初に [pkg-config](http://en.wikipedia.org/wiki/Pkg-config) の利用を試みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link(framework: "Cocoa")]` will pass `-framework Cocoa` to the linker (only useful in Mac OS X).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143437Z" creationid="hirofumiwakasugi" creationdate="20151003T143355Z">
        <seg>* `@[Link(framework: "Cocoa")]` は `-framework Cocoa` をリンカに渡します (Mac OS X の場合のみ有効) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `@[Link(ldflags: "...")]` will pass those flags directly to the linker, without modification.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143158Z" creationid="hirofumiwakasugi" creationdate="20151003T143114Z">
        <seg>* `@[Link(ldflags: "...")]` は指定したフラグをそのまま直接リンカに渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `MyBox.new(value)` delegates to `initialize(@value : T)`
* `T` doesn't exist, so it's used as a free var
* Because `MyBox` is actually `MyBox(T)`, and `T` is both a free variable and a type argument, `T` becomes the type of the passed value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T071332Z" creationid="hirofumiwakasugi" creationdate="20150912T070952Z">
        <seg>* `MyBox.new(value)` は処理を `initialize(@value : T)` に委譲する
* `T` が存在しないため、自由変数として扱われる
* `MyBox` は実際は `MyBox(T)` であり、`T` は自由変数であり型引数でもあるため、`T` は渡された値の型になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `NoReturn`: similar to `Void`, but the compiler understands that no code can be executed after that invocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042240Z" creationid="hirofumiwakasugi" creationdate="20151005T042240Z">
        <seg>* `NoReturn`: `Void` と似ているが、呼び出し後にコードを実行できないことをコンパイラが理解している</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `Void`: the absence of a return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042134Z" creationid="hirofumiwakasugi" creationdate="20151005T042020Z">
        <seg>* `Void`: 戻り値なし</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `extended` will be invoked at compile-time when a module is extended.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014423Z" creationid="hirofumiwakasugi" creationdate="20151002T014300Z">
        <seg>* `extended` は、コンパイル時にモジュールが extend されたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `included` will be invoked at compile-time when a module is included.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014426Z" creationid="hirofumiwakasugi" creationdate="20151002T013422Z">
        <seg>* `included` は、コンパイル時にモジュールがインクルードされたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `inherited` will be invoked at compile-time when a subclass is defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014430Z" creationid="hirofumiwakasugi" creationdate="20151002T012621Z">
        <seg>* `inherited` は、コンパイル時にサブクラスが定義されたときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `method_missing` will be invoked at compile-time when a method is not found.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024628Z" creationid="hirofumiwakasugi" creationdate="20151002T014417Z">
        <seg>* `method_missing` は、コンパイル時にメソッドが見つからないときに実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "./foo/bar/baz"` will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" relative to the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160805Z" creationid="hirofumiwakasugi" creationdate="20150905T160725Z">
        <seg>* `require "./foo/bar/baz"` は現在のファイルから相対的に「foo/bar/baz.cr」または「foo/bar/baz/baz.cr」を探す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/*"` will require all ".cr" files below the "foo" directory, but not below directories inside "foo".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161339Z" creationid="hirofumiwakasugi" creationdate="20150905T161248Z">
        <seg>* `require "foo/*"` は「foo」デイレクトリにあるすべての「.cr」ファイルを require し、「foo」内のディレクトリの中は参照しない</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/**"` will require all ".cr" files below the "foo" directory, and below directories inside "foo", recursively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161417Z" creationid="hirofumiwakasugi" creationdate="20150905T161348Z">
        <seg>* `require "foo/**"` は「foo」デイレクトリにあるすべての「.cr」ファイルを require し、さらに「foo」以下のディレクトリを再帰的に参照する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* `require "foo/bar/baz"` will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160747Z" creationid="hirofumiwakasugi" creationdate="20150905T160533Z">
        <seg>* `require "foo/bar/baz"` は require パスの「foo/bar/baz.cr」または「foo/bar/baz/baz.cr」を探す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* as namespaces for defining other types, methods and constants
* as partial types that can be mixed in other types</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T130935Z" creationid="hirofumiwakasugi" creationdate="20150911T130339Z">
        <seg>* 型やメソッド、そして定数を他と区別して定義するための名前空間として使う
* 部分的な型として別の型に mixin して使う</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* i: ignore case (PCRE_CASELESS)
* m: multiline (PCRE_MULTILINE)
* x: extended (PCRE_EXTENDED)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020133Z" creationid="hirofumiwakasugi" creationdate="20150902T020019Z">
        <seg>* i: 大小文字を区別しない (PCRE_CASELESS)
* m: 複数行のマッチング (PCRE_MULTILINE)
* x: 拡張 (PCRE_EXTENDED)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* specifying [type restrictions](type_restrictions.html)
* specifying [type arguments](generics.html)
* [declaring variables](declare_var.html)
* declaring [aliases](alias.html)
* declaring [typedefs](c_bindings/type.html)
* the argument of an [is_a?](is_a.html) pseudo-call
* the argument of an [as](as.html) expression
* the argument of a [sizeof](sizeof.html) expression
* the argument of an [instance_sizeof](instance_sizeof.html) expression
* a method's [return type](return_types.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024452Z" creationid="hirofumiwakasugi" creationdate="20151102T024407Z">
        <seg>* [型制約](type_restrictions.html)の指定
* [型引数](generics.html)の指定
* [変数の宣言](declare_var.html)
* [エイリアス](alias.html)の宣言
* [typedef](c_bindings/type.html) の宣言
* 擬似呼び出し [is_a?](is_a.html) の引数
* [as](as.html) 式の引数
* [sizeof](sizeof.html) 式の引数
* [instance_sizeof](instance_sizeof.html) 式の引数
* メソッドの[戻り値の型](return_types.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>* specifying [type restrictions](type_restrictions.html)
* specifying [type arguments](generics.html)
* [declaring variables](declare_var.html)
* declaring [aliases](alias.html)
* declaring [typedefs](type.html)
* the argument of an [is_a?](is_a.html) pseudo-call
* the argument of an [as](as.html) expression
* the argument of a [sizeof](sizeof.html) expression
* the argument of an [instance_sizeof](instance_sizeof.html) expression
* a method's [return type](return_types.html)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T014247Z" creationid="hirofumiwakasugi" creationdate="20151009T004709Z">
        <seg>* [型制約](type_restrictions.html)の指定
* [型引数](generics.html)の指定
* [変数の宣言](declare_var.html)
* [エイリアス](alias.html)の宣言
* [typedef](type.html) の宣言
* 擬似呼び出し [is_a?](is_a.html) の引数
* [as](as.html) 式の引数
* [sizeof](sizeof.html) 式の引数
* [instance_sizeof](instance_sizeof.html) 式の引数
* メソッドの[戻り値の型](return_types.html)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note: ** you can't use `as` to convert a type to an unrelated type: `as` is not like a `cast` in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022139Z" creationid="hirofumiwakasugi" creationdate="20151009T022039Z">
        <seg>**注意: ** `as` を使っても、関連のない型に変換することはできません。`as` は他の言語の `cast` とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** By default the generated executables **are not fully optimized**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072104Z" creationid="hirofumiwakasugi" creationdate="20150901T072045Z">
        <seg>**注意:** デフォルトでは生成された実行ファイルは**完全に最適化**された状態ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** The C `char` type is `UInt8` in Crystal, so a `char*` or a `const char*` is `UInt8*`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042726Z" creationid="hirofumiwakasugi" creationdate="20151005T042618Z">
        <seg>**注意:** C の `char` 型は Crystal では `UInt8` です。したがって、`char*` や `const char*` は `UInt8*` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** conditionally defining fields of a C struct or union is not currently supported.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043719Z" creationid="hirofumiwakasugi" creationdate="20150909T043719Z">
        <seg>**注意:** 現在のところ、C 言語の構造体や共用体のフィールドを条件に応じて定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** the `finalize` method will only be invoked once the object has been fully initialized via the `initialize` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041851Z" creationid="hirofumiwakasugi" creationdate="20150910T041703Z">
        <seg>**注意:** `finalize` が実行されるのは、オブジェクトが `initialize` メソッドによって完全に初期化されていた場合に限ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>**Note:** there currently isn't a way to add more compile-time flags and not do a cross-compile at the same time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T051121Z" creationid="hirofumiwakasugi" creationdate="20150909T050814Z">
        <seg>**注意:** 現在のところ、他のコンパイル時のフラグを追加することができず、クロスコンパイル時に同時に指定することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135143Z" creationid="hirofumiwakasugi" creationdate="20150904T135143Z">
        <seg>+- class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- class Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135124Z" creationid="hirofumiwakasugi" creationdate="20150904T135124Z">
        <seg>+- class Reference</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- generic class MyBox(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063042Z" creationid="hirofumiwakasugi" creationdate="20150912T063042Z">
        <seg>+- generic class MyBox(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+- generic class MyBox(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063040Z" creationid="hirofumiwakasugi" creationdate="20150912T063040Z">
        <seg>+- generic class MyBox(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+1.3     # Float64
-0.5     # Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074016Z" creationid="hirofumiwakasugi" creationdate="20150901T074016Z">
        <seg>+1.3     # Float64
-0.5     # Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>+10    # Int32
-20    # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052302Z" creationid="hirofumiwakasugi" creationdate="20150901T052302Z">
        <seg>+10    # Int32
-20    # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `/` contains a readme, any project configurations (eg, CI or editor configs), and any other project-level documentation (eg, changelog or contributing guide).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011343Z" creationid="hirofumiwakasugi" creationdate="20151010T011221Z">
        <seg>- `/` には、README、 (CI や editor config などの) プロジェクトの設定、そして、(changelog や contributing guide などの) プロジェクト全体のドキュメントを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `bin/` contains any executables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011446Z" creationid="hirofumiwakasugi" creationdate="20151010T011446Z">
        <seg>- `bin/` には実行ファイルを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `spec/` contains the project's specs, which can be run with `crystal spec`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011431Z" creationid="hirofumiwakasugi" creationdate="20151010T011337Z">
        <seg>- `spec/` には、`crystal spec` によって起動するプロジェクトの spec を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- `src/` contains the project's source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011351Z" creationid="hirofumiwakasugi" creationdate="20151010T011331Z">
        <seg>- `src/` にはプロジェクトのソースコードを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>- bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- bar.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085636Z" creationid="makenowjust" creationdate="20200427T085636Z">
        <seg>- bar.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085326Z" creationid="makenowjust" creationdate="20200427T085326Z">
        <seg>- file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file.cr (requires "./*")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085903Z" creationid="makenowjust" creationdate="20200427T085903Z">
        <seg>- file.cr (requires "./*")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- file.cr (requires "./file/*")</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085329Z" creationid="makenowjust" creationdate="20200427T085329Z">
        <seg>- file.cr (requires "./file/*")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>- foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- foo.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085633Z" creationid="makenowjust" creationdate="20200427T085633Z">
        <seg>- foo.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- lib</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085630Z" creationid="makenowjust" creationdate="20200427T085630Z">
        <seg>- lib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- libs</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>- libs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085324Z" creationid="makenowjust" creationdate="20200427T085324Z">
        <seg>- project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155854Z" creationid="hirofumiwakasugi" creationdate="20150905T155854Z">
        <seg>- project.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project_spec.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085639Z" creationid="makenowjust" creationdate="20200427T085639Z">
        <seg>- project_spec.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- project_spec.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155923Z" creationid="hirofumiwakasugi" creationdate="20150905T155923Z">
        <seg>- project_spec.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- spec</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155854Z" creationid="hirofumiwakasugi" creationdate="20150905T155854Z">
        <seg>- spec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- src</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>- src</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- sub1.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085326Z" creationid="makenowjust" creationdate="20200427T085326Z">
        <seg>- sub1.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>- sub2.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085327Z" creationid="makenowjust" creationdate="20200427T085327Z">
        <seg>- sub2.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>---
layout: post
title: Type inference (part 2)
author: bcardiff
---</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T023905Z" creationid="hirofumiwakasugi" creationdate="20151102T023905Z">
        <seg>---
layout: post
title: Type inference (part 2)
author: bcardiff
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Crystal description: A language for humans and computers custom_body_classes: - main ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211003Z" creationid="makenowjust" creationdate="20200413T210133Z">
        <seg>---
title: Crystal
description: A language for humans and computers
custom_body_classes:
  - main
---
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--- title: Documentation description: permalink: /docs/ ---</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T202243Z" creationid="makenowjust" creationdate="20200413T202243Z">
        <seg>---
title: Documentation
description:
permalink: /docs/
---</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--cross-compile flags            cross-compile</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>--cross-compile flags            cross-compile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--emit [asm|llvm-bc|llvm-ir|obj] Comma separated list of types of output for the compiler to emit</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--emit [asm|llvm-bc|llvm-ir|obj] Comma separated list of types of output for the compiler to emit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--help                   show this help</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072217Z" creationid="hirofumiwakasugi" creationdate="20150901T072217Z">
        <seg>--help                   show this help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--help, -h               show this help</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140116Z" creationid="hirofumiwakasugi" creationdate="20151009T140116Z">
        <seg>--help, -h               show this help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--link-flags FLAGS               Additional flags to pass to the linker</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--link-flags FLAGS               Additional flags to pass to the linker</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--ll                             Dump ll to .crystal directory</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>--ll                             Dump ll to .crystal directory</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--mcpu CPU                       Target specific cpu type</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--mcpu CPU                       Target specific cpu type</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-build                       Disable build output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--no-build                       Disable build output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-codegen                     Don't do code generation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140118Z" creationid="hirofumiwakasugi" creationdate="20151009T140118Z">
        <seg>--no-codegen                     Don't do code generation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--no-color                       Disable colored output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--no-color                       Disable colored output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--prelude                        Use given file as prelude</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--prelude                        Use given file as prelude</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--release                        Compile in release mode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>--release                        Compile in release mode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--single-module                  Generate a single LLVM module</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--single-module                  Generate a single LLVM module</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--target TRIPLE                  Target triple</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--target TRIPLE                  Target triple</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--threads                        Maximum number of threads to use</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072228Z" creationid="hirofumiwakasugi" creationdate="20150901T072228Z">
        <seg>--threads                        Maximum number of threads to use</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--verbose                        Display executed commands
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072229Z" creationid="hirofumiwakasugi" creationdate="20150901T072229Z">
        <seg>--verbose                        Display executed commands
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--version                show version
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072217Z" creationid="hirofumiwakasugi" creationdate="20150901T072217Z">
        <seg>--version                show version
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>--version, -v            show version
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140117Z" creationid="hirofumiwakasugi" creationdate="20151009T140117Z">
        <seg>--version, -v            show version
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213803Z" creationid="makenowjust" creationdate="20200412T213803Z">
        <seg>-1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-128</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182042Z" creationid="makenowjust" creationdate="20200419T182042Z">
        <seg>-128</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-&gt;{ x += 1; x }
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053729Z" creationid="hirofumiwakasugi" creationdate="20150918T053729Z">
        <seg>-&gt;{ x += 1; x }
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-D FLAG, --define FLAG           Define a compile-time flag</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>-D FLAG, --define FLAG           Define a compile-time flag</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-d, --debug                      Add symbolic debug info</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>-d, --debug                      Add symbolic debug info</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-h, --help                       Show help</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174332Z" creationid="makenowjust" creationdate="20200413T174332Z">
        <seg>-h, --help                       Show help</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-h, --help                       Show this message</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072226Z" creationid="hirofumiwakasugi" creationdate="20150901T072226Z">
        <seg>-h, --help                       Show this message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-o                               Output filename</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>-o                               Output filename</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-s, --stats                      Enable statistics output</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072227Z" creationid="hirofumiwakasugi" creationdate="20150901T072227Z">
        <seg>-s, --stats                      Enable statistics output</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>-v, --version                    Show version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174330Z" creationid="makenowjust" creationdate="20200413T174330Z">
        <seg>-v, --version                    Show version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T064827Z" creationid="hirofumiwakasugi" creationdate="20150831T064827Z">
        <seg>...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>...
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162535Z" creationid="makenowjust" creationdate="20200413T162535Z">
        <seg>...
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/2020/04/06/crystal-0.34.0-released.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210333Z" creationid="makenowjust" creationdate="20200413T210333Z">
        <seg>/2020/04/06/crystal-0.34.0-released.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/\//         # slash
/\\/         # backslash
/\b/         # backspace
/\e/         # escape
/\f/         # form feed
/\n/         # newline
/\r/         # carriage return
/\t/         # tab
/\v/         # vertical tab
/\NNN/       # octal ASCII character
/\xNN/       # hexadecimal ASCII character
/\x{FFFF}/   # hexadecimal unicode character
/\x{10FFFF}/ # hexadecimal unicode character</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041155Z" creationid="makenowjust" creationdate="20200421T041155Z">
        <seg>/\//         # slash
/\\/         # backslash
/\b/         # backspace
/\e/         # escape
/\f/         # form feed
/\n/         # newline
/\r/         # carriage return
/\t/         # tab
/\v/         # vertical tab
/\NNN/       # octal ASCII character
/\xNN/       # hexadecimal ASCII character
/\x{FFFF}/   # hexadecimal unicode character
/\x{10FFFF}/ # hexadecimal unicode character</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/blog</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222644Z" creationid="makenowjust" creationdate="20200413T222644Z">
        <seg>/blog</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/blog#release_notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210346Z" creationid="makenowjust" creationdate="20200413T210346Z">
        <seg>/blog#release_notes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/community</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222857Z" creationid="makenowjust" creationdate="20200413T222857Z">
        <seg>/community</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/foo/i.match("FOO")         # =&gt; #&lt;Regex::MatchData "FOO"&gt;
/foo/m.match("bar\nfoo")    # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /x.match("foo")        # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /imx.match("bar\nFOO") # =&gt; #&lt;Regex::MatchData "FOO"&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042200Z" creationid="makenowjust" creationdate="20200421T042200Z">
        <seg>/foo/i.match("FOO")         # =&gt; #&lt;Regex::MatchData "FOO"&gt;
/foo/m.match("bar\nfoo")    # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /x.match("foo")        # =&gt; #&lt;Regex::MatchData "foo"&gt;
/foo /imx.match("bar\nFOO") # =&gt; #&lt;Regex::MatchData "FOO"&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/foo|bar/
/h(e+)llo/
/\d+/
/あ/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040544Z" creationid="makenowjust" creationdate="20200421T040544Z">
        <seg>/foo|bar/
/h(e+)llo/
/\d+/
/あ/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>/sponsors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221959Z" creationid="makenowjust" creationdate="20200413T221959Z">
        <seg>/sponsors</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182102Z" creationid="makenowjust" creationdate="20200419T182102Z">
        <seg>0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0b1101 # == 13</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182611Z" creationid="makenowjust" creationdate="20200419T182611Z">
        <seg>0b1101 # == 13</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0o123 # == 83</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182627Z" creationid="makenowjust" creationdate="20200419T182627Z">
        <seg>0o123 # == 83</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>0xFE012D # == 16646445
0xfe012d # == 16646445</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182642Z" creationid="makenowjust" creationdate="20200419T182642Z">
        <seg>0xFE012D # == 16646445
0xfe012d # == 16646445</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142554Z" creationid="hirofumiwakasugi" creationdate="20150911T142554Z">
        <seg>1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022049Z" creationid="hirofumiwakasugi" creationdate="20150902T022049Z">
        <seg>1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end

proc = -&gt;one
proc.call # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172020Z" creationid="makenowjust" creationdate="20200422T172020Z">
        <seg>1
end

proc = -&gt;one
proc.call # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073144Z" creationid="hirofumiwakasugi" creationdate="20150919T073144Z">
        <seg>1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1      # Int32

1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64

1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64

+10    # Int32
-20    # Int32

2147483648          # Int64
9223372036854775808 # UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182510Z" creationid="makenowjust" creationdate="20200419T182510Z">
        <seg>1      # Int32

1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64

1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64

+10    # Int32
-20    # Int32

2147483648          # Int64
9223372036854775808 # UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 + 2             # =&gt; 3
Unicorn.new.speak # =&gt; "I'm a unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212608Z" creationid="makenowjust" creationdate="20200412T212608Z">
        <seg>1 + 2             # =&gt; 3
Unicorn.new.speak # =&gt; "I'm a unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "hello"
# a : Int32 | String

if a.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084321Z" creationid="makenowjust" creationdate="20200424T084321Z">
        <seg>1 : "hello"
# a : Int32 | String

if a.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "hello"
# a : Int32 | String

if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084009Z" creationid="makenowjust" creationdate="20200424T084009Z">
        <seg>1 : "hello"
# a : Int32 | String

if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1 : "x"
if !b.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085855Z" creationid="makenowjust" creationdate="20200424T085855Z">
        <seg>1 : "x"
if !b.is_a?(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1) Myapp works</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165159Z" creationid="makenowjust" creationdate="20200419T165159Z">
        <seg>1) Myapp works</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024431Z" creationid="hirofumiwakasugi" creationdate="20150909T024431Z">
        <seg>1.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32

1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64

+1.3     # Float64
-0.5     # Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183139Z" creationid="makenowjust" creationdate="20200419T183139Z">
        <seg>1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32

1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64

+1.3     # Float64
-0.5     # Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>127</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182043Z" creationid="makenowjust" creationdate="20200419T182043Z">
        <seg>127</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>16</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182045Z" creationid="makenowjust" creationdate="20200419T182045Z">
        <seg>16</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_000_000 # better than 1000000</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182547Z" creationid="makenowjust" creationdate="20200419T182547Z">
        <seg>1_000_000 # better than 1000000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_000_000.111_111 # a lot more readable than 1000000.111111, yet functionally the same</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183618Z" creationid="makenowjust" creationdate="20200419T183142Z">
        <seg>1_000_000.111_111 # 1000000.111111 を読みやすくしたものです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052300Z" creationid="hirofumiwakasugi" creationdate="20150901T052300Z">
        <seg>1_i8   # Int8
1_i16  # Int16
1_i32  # Int32
1_i64  # Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052300Z" creationid="hirofumiwakasugi" creationdate="20150901T052300Z">
        <seg>1_u8   # UInt8
1_u16  # UInt16
1_u32  # UInt32
1_u64  # UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074015Z" creationid="hirofumiwakasugi" creationdate="20150901T074015Z">
        <seg>1e10     # Float64
1.5e10   # Float64
1.5e-7   # Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2,147,483,647</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182051Z" creationid="makenowjust" creationdate="20200419T182051Z">
        <seg>2,147,483,647</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140008Z" creationid="hirofumiwakasugi" creationdate="20151010T140008Z">
        <seg>2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2147483648          # Int64
9223372036854775808 # UInt64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052303Z" creationid="hirofumiwakasugi" creationdate="20150901T052303Z">
        <seg>2147483648          # Int64
9223372036854775808 # UInt64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>255</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182103Z" creationid="makenowjust" creationdate="20200419T182103Z">
        <seg>255</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2&lt;x1/&gt;63&lt;x2/&gt; - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182057Z" creationid="makenowjust" creationdate="20200419T182057Z">
        <seg>2&lt;x1/&gt;63&lt;x2/&gt; - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>2&lt;x1/&gt;64&lt;x2/&gt; - 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182113Z" creationid="makenowjust" creationdate="20200419T182113Z">
        <seg>2&lt;x1/&gt;64&lt;x2/&gt; - 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013157Z" creationid="hirofumiwakasugi" creationdate="20150903T013157Z">
        <seg>3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013515Z" creationid="hirofumiwakasugi" creationdate="20150903T013515Z">
        <seg>3
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013513Z" creationid="hirofumiwakasugi" creationdate="20150903T013513Z">
        <seg>3
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end

# The above is the same as:
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080553Z" creationid="makenowjust" creationdate="20200424T080553Z">
        <seg>3
end

# 上記は以下に同じ
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013601Z" creationid="hirofumiwakasugi" creationdate="20150903T013601Z">
        <seg>3
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>3 : 4

# The above is the same as:
a = if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080937Z" creationid="makenowjust" creationdate="20200424T080937Z">
        <seg>3 : 4

# 上記は以下と同じ
a = if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182049Z" creationid="makenowjust" creationdate="20200419T182049Z">
        <seg>32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>32,767</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182046Z" creationid="makenowjust" creationdate="20200419T182046Z">
        <seg>32,767</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013158Z" creationid="hirofumiwakasugi" creationdate="20150903T013158Z">
        <seg>4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>4,294,967,295</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182110Z" creationid="makenowjust" creationdate="20200419T182110Z">
        <seg>4,294,967,295</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>5 | puts "The Beatles are singing: 🎵#{user_input.upper_case}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182453Z" creationid="makenowjust" creationdate="20200413T182453Z">
        <seg>5 | puts "The Beatles are singing: 🎵#{user_input.upper_case}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6 + other</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135831Z" creationid="hirofumiwakasugi" creationdate="20151009T135831Z">
        <seg>6 + other</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>6 April 2020 - &lt;a0&gt;More release notes&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210358Z" creationid="makenowjust" creationdate="20200413T210358Z">
        <seg>6 April 2020 - &lt;a0&gt;詳しいリリースノートはこちら&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>64</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182053Z" creationid="makenowjust" creationdate="20200419T182053Z">
        <seg>64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>65,535</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182107Z" creationid="makenowjust" creationdate="20200419T182107Z">
        <seg>65,535</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>8</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182040Z" creationid="makenowjust" creationdate="20200419T182040Z">
        <seg>8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:+
:-
:*
:/
:%
:&amp;
:|
:^
:**
:&gt;&gt;
:&lt;&lt;
:==
:!=
:&lt;
:&lt;=
:&gt;
:&gt;=
:&lt;=&gt;
:===
:[]
:[]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171631Z" creationid="makenowjust" creationdate="20200420T171631Z">
        <seg>:+
:-
:*
:/
:%
:&amp;
:|
:^
:**
:&gt;&gt;
:&lt;&lt;
:==
:!=
:&lt;
:&lt;=
:&gt;
:&gt;=
:&lt;=&gt;
:===
:[]
:[]?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>::baz(4, 2) #=&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021413Z" creationid="hirofumiwakasugi" creationdate="20150904T021413Z">
        <seg>::baz(4, 2) #=&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:[]=
:!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171633Z" creationid="makenowjust" creationdate="20200420T171633Z">
        <seg>:[]=
:!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:exclamation!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171553Z" creationid="makenowjust" creationdate="20200420T171553Z">
        <seg>:exclamation!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:question?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171552Z" creationid="makenowjust" creationdate="20200420T171552Z">
        <seg>:question?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # identical to :a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171102Z" creationid="makenowjust" creationdate="20200420T171050Z">
        <seg>:unquoted_symbol
:"quoted symbol"
:"a" # :a に等しい</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>:~
:!~
:=~</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171635Z" creationid="makenowjust" creationdate="20200420T171635Z">
        <seg>:~
:!~
:=~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-'HERE' # =&gt; "hello \\n \#{world}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034148Z" creationid="makenowjust" creationdate="20200420T034148Z">
        <seg>&lt;&lt;-'HERE' # =&gt; "hello \\n \#{world}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-SOME.upcase # =&gt; "HELLO"
hello
SOME

def upcase(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034037Z" creationid="makenowjust" creationdate="20200420T034037Z">
        <seg>&lt;&lt;-SOME.upcase # =&gt; "HELLO"
hello
SOME

def upcase(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-STRING # =&gt; "Hello\n  world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033930Z" creationid="makenowjust" creationdate="20200420T033930Z">
        <seg>&lt;&lt;-STRING # =&gt; "Hello\n  world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033758Z" creationid="makenowjust" creationdate="20200420T033758Z">
        <seg>&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;a0&gt; {% img manas-orange.svg %} &lt;s1&gt;Manas Technology Solutions&lt;/s1&gt; &lt;/a0&gt; &lt;a2&gt; {% img sponsors/84.png %} &lt;s3&gt;84 codes&lt;/s3&gt; &lt;/a2&gt; &lt;a4&gt; {% img sponsors/nikola_motor_company.png %} &lt;s5&gt;Nikola Motor Company&lt;/s5&gt; &lt;/a4&gt; &lt;a6&gt; {% img sponsors/fly_io_.png %} &lt;s7&gt;Fly.io&lt;/s7&gt; &lt;/a6&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222539Z" creationid="makenowjust" creationdate="20200413T222539Z">
        <seg>&lt;a0&gt; {% img manas-orange.svg %} &lt;s1&gt;Manas Technology Solutions&lt;/s1&gt; &lt;/a0&gt; &lt;a2&gt; {% img sponsors/84.png %} &lt;s3&gt;84 codes&lt;/s3&gt; &lt;/a2&gt; &lt;a4&gt; {% img sponsors/nikola_motor_company.png %} &lt;s5&gt;Nikola Motor Company&lt;/s5&gt; &lt;/a4&gt; &lt;a6&gt; {% img sponsors/fly_io_.png %} &lt;s7&gt;Fly.io&lt;/s7&gt; &lt;/a6&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033759Z" creationid="makenowjust" creationdate="20200420T033759Z">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061832Z" creationid="hirofumiwakasugi" creationdate="20160204T061832Z">
        <seg>&lt;child /&gt;
&lt;/parent&gt;
XML
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt; &lt;g3&gt; or &lt;/g3&gt; &lt;g4&gt; &lt;x5/&gt; &lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212048Z" creationid="makenowjust" creationdate="20200413T212048Z">
        <seg>&lt;g1&gt; &lt;x2/&gt; &lt;/g1&gt; &lt;g3&gt; または &lt;/g3&gt; &lt;g4&gt; &lt;x5/&gt; &lt;/g4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt; `echo foo` &lt;/g1&gt;, &lt;g2&gt;%x(echo foo)&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000506Z" creationid="makenowjust" creationdate="20200414T000506Z">
        <seg>&lt;g1&gt; `echo foo` &lt;/g1&gt;, &lt;g2&gt;%x(echo foo)&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;"foo\tbar"&lt;/g1&gt;, &lt;g2&gt;%("あ")&lt;/g2&gt;, &lt;g3&gt;%q(foo #{foo})&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000431Z" creationid="makenowjust" creationdate="20200414T000431Z">
        <seg>&lt;g1&gt;"foo\tbar"&lt;/g1&gt;, &lt;g2&gt;%("あ")&lt;/g2&gt;, &lt;g3&gt;%q(foo #{foo})&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170647Z" creationid="makenowjust" creationdate="20200413T170647Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;'a'&lt;/g1&gt;, &lt;g2&gt;'\n'&lt;/g2&gt;, &lt;g3&gt;'あ'&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000429Z" creationid="makenowjust" creationdate="20200414T000429Z">
        <seg>&lt;g1&gt;'a'&lt;/g1&gt;, &lt;g2&gt;'\n'&lt;/g2&gt;, &lt;g3&gt;'あ'&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: Set the &lt;g2&gt;canonical base url&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163036Z" creationid="makenowjust" creationdate="20200419T162834Z">
        <seg>&lt;g1&gt;--canonical-base-url=URL, -b URL&lt;/g1&gt;: &lt;g2&gt;canonicalなベースURL&lt;/g2&gt;を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: Generate a .o file, and print the command to generate an executable to stdout.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155223Z" creationid="makenowjust" creationdate="20200419T155206Z">
        <seg>&lt;g1&gt;--cross-compile&lt;/g1&gt;: .o ファイルを生成して、実行可能ファイルを生成するためのコマンドを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--example &lt;name&gt;&lt;/g1&gt;: Runs examples whose full nested names include &lt;g2&gt;name&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164649Z" creationid="makenowjust" creationdate="20200419T164649Z">
        <seg>&lt;g1&gt;--example &lt;name&gt;&lt;/g1&gt;: &lt;g2&gt;name&lt;/g2&gt; を含むような spec を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--fail-fast&lt;/g1&gt;: Abort the spec run on first failure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164440Z" creationid="makenowjust" creationdate="20200419T164440Z">
        <seg>&lt;g1&gt;--fail-fast&lt;/g1&gt;: どれか1つでも spec が失敗したら即座に中断する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--junit_output &lt;output_dir&gt;&lt;/g1&gt;: Generates JUnit XML output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164451Z" creationid="makenowjust" creationdate="20200419T164451Z">
        <seg>&lt;g1&gt;--junit_output &lt;output_dir&gt;&lt;/g1&gt;: JUnit XML を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--line &lt;line&gt;&lt;/g1&gt;: Runs examples whose line matches &lt;g2&gt;line&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164704Z" creationid="makenowjust" creationdate="20200419T164704Z">
        <seg>&lt;g1&gt;--line &lt;line&gt;&lt;/g1&gt;: 行番号が &lt;g2&gt;line&lt;/g2&gt; に一致した spec を実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: Additional flags to passs to the linker.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155358Z" creationid="makenowjust" creationdate="20200419T155358Z">
        <seg>&lt;g1&gt;--link-flags FLAGS&lt;/g1&gt;: リンカに渡す追加のフラグを指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--location &lt;file&gt;:&lt;line&gt;&lt;/g1&gt;: Runs example(s) at &lt;g2&gt;line&lt;/g2&gt; in &lt;g3&gt;file&lt;/g3&gt; (multiple options allowed).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164745Z" creationid="makenowjust" creationdate="20200419T164745Z">
        <seg>&lt;g1&gt;--location &lt;file&gt;:&lt;line&gt;&lt;/g1&gt;: &lt;g3&gt;file&lt;/g3&gt; の &lt;g2&gt;line&lt;/g2&gt; にある spec を実行する (複数指定可能)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: Use ThinLTO, improves performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160340Z" creationid="makenowjust" creationdate="20200419T160340Z">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: パフォーマンスを向上させるために ThinLTO を利用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: Use ThinLTO, improving performance on release builds.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155432Z" creationid="makenowjust" creationdate="20200419T155432Z">
        <seg>&lt;g1&gt;--lto=thin&lt;/g1&gt;: リリースビルドのパフォーマンスを向上させるために ThinLTO を利用する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--no-color&lt;/g1&gt;: Disabled colored output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175720Z" creationid="makenowjust" creationdate="20200419T175720Z">
        <seg>&lt;g1&gt;--no-color&lt;/g1&gt;: 色付けされた出力を無効にする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--no-debug&lt;/g1&gt;: Skip any symbolic debug info, reducing the output file size.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155505Z" creationid="makenowjust" creationdate="20200419T155505Z">
        <seg>&lt;g1&gt;--no-debug&lt;/g1&gt;: ファイルサイズを減らすためにデバッグシンボルの生成をしないようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--output=DIR, -o DIR&lt;/g1&gt;: Set the output directory (default: &lt;g2&gt;./docs&lt;/g2&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162812Z" creationid="makenowjust" creationdate="20200419T162812Z">
        <seg>&lt;g1&gt;--output=DIR, -o DIR&lt;/g1&gt;: 出力先のディレクトリを指定する (デフォルト: &lt;g2&gt;./docs&lt;/g2&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--production&lt;/g1&gt;: Runs in release mode.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175817Z" creationid="makenowjust" creationdate="20200419T175729Z">
        <seg>&lt;g1&gt;--production&lt;/g1&gt;: リリースモードで実行する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--profile&lt;/g1&gt;: Prints the 10 slowest specs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164420Z" creationid="makenowjust" creationdate="20200419T164416Z">
        <seg>&lt;g1&gt;--profile&lt;/g1&gt;: 実行に時間のかかった spec を10個まで表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--progress&lt;/g1&gt;: Show progress during compilation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154839Z" creationid="makenowjust" creationdate="20200419T154839Z">
        <seg>&lt;g1&gt;--progress&lt;/g1&gt;: コンパイルの進捗を逐次表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--project-name=NAME&lt;/g1&gt;: Set the project name.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162549Z" creationid="makenowjust" creationdate="20200419T162456Z">
        <seg>&lt;g1&gt;--project-name=NAME&lt;/g1&gt;: プロジェクト名を設定する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--project-version=VERSION&lt;/g1&gt;: Set the project version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162716Z" creationid="makenowjust" creationdate="20200419T162716Z">
        <seg>&lt;g1&gt;--project-version=VERSION&lt;/g1&gt;: プロジェクトのバージョンを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;: Compile in release mode, doing extra work to apply optimizations to the generated code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160305Z" creationid="makenowjust" creationdate="20200419T154817Z">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;: リリースモードを有効にして、生成されるバイナリに最適化をしてコンパイルする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;: Link statically.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154845Z" creationid="makenowjust" creationdate="20200419T154845Z">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;: 静的にリンクする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag &lt;tag&gt;&lt;/g1&gt;: Runs examples with the specified tag, or excludes examples by adding &lt;g2&gt;~&lt;/g2&gt; before the tag (multiple options allowed).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164925Z" creationid="makenowjust" creationdate="20200419T164826Z">
        <seg>&lt;g1&gt;--tag &lt;tag&gt;&lt;/g1&gt;: 指定されたタグを持つ spec を実行する、もしくは &lt;g2&gt;~&lt;/g2&gt; に続けたタグを持つ spec を実行する spec の一覧から除く。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag a --tag b&lt;/g1&gt; will include specs tagged with &lt;g2&gt;a&lt;/g2&gt; OR &lt;g3&gt;b&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165110Z" creationid="makenowjust" creationdate="20200419T165023Z">
        <seg>&lt;g1&gt;--tag a --tag b&lt;/g1&gt; という指定は、タグ &lt;g2&gt;a&lt;/g2&gt; もしくはタグ &lt;g3&gt;b&lt;/g3&gt; を持つ spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag a --tag ~b&lt;/g1&gt; will include specs tagged with &lt;g2&gt;a&lt;/g2&gt;, but not tagged with &lt;g3&gt;b&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165152Z" creationid="makenowjust" creationdate="20200419T165107Z">
        <seg>&lt;g1&gt;--tag a --tag ~b&lt;/g1&gt; という指定は、タグ &lt;g2&gt;a&lt;/g2&gt; を持つがタグ &lt;g3&gt;b&lt;/g3&gt; を持たないような spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--tag ~a --tag ~b&lt;/g1&gt; will include specs not tagged with &lt;g2&gt;a&lt;/g2&gt; AND not tagged with &lt;g3&gt;b&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165057Z" creationid="makenowjust" creationdate="20200419T165057Z">
        <seg>&lt;g1&gt;--tag ~a --tag ~b&lt;/g1&gt; という指定は タグ&lt;g2&gt;a&lt;/g2&gt; もタグ&lt;g3&gt;b&lt;/g3&gt; も持たない spec を含めることになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: Display executed commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155521Z" creationid="makenowjust" creationdate="20200419T155521Z">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: 内部的に実行したコマンドを表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: Prints verbose output, including all example names.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164352Z" creationid="makenowjust" creationdate="20200419T164352Z">
        <seg>&lt;g1&gt;--verbose&lt;/g1&gt;: すべての spec 名を含むような詳細な出力をする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;--version&lt;/g1&gt;: Prints the version of &lt;g2&gt;shards&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175552Z" creationid="makenowjust" creationdate="20200419T175552Z">
        <seg>&lt;g1&gt;--version&lt;/g1&gt;: &lt;g2&gt;shards&lt;/g2&gt;のバージョンを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-&gt;(x : Int32, y : Int32) { x + y }&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000505Z" creationid="makenowjust" creationdate="20200414T000505Z">
        <seg>&lt;g1&gt;-&gt;(x : Int32, y : Int32) { x + y }&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-D FLAG, --define FLAG&lt;/g1&gt;: Define a compile-time flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155309Z" creationid="makenowjust" creationdate="20200419T155220Z">
        <seg>&lt;g1&gt;-D FLAG, --define FLAG&lt;/g1&gt;: コンパイル時フラグを指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-h, --help&lt;/g1&gt;: Prints usage synopsis.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175708Z" creationid="makenowjust" creationdate="20200419T175635Z">
        <seg>&lt;g1&gt;-h, --help&lt;/g1&gt;: 使用方法をおおざっぱに表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-h&lt;/g1&gt; / &lt;g2&gt;--help&lt;/g2&gt;: it will display the application help.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172451Z" creationid="makenowjust" creationdate="20200413T172451Z">
        <seg>&lt;g1&gt;-h&lt;/g1&gt; / &lt;g2&gt;--help&lt;/g2&gt;: アプリケーションの利用方法を表示する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-o &lt;output_file&gt;&lt;/g1&gt;: Define the name of the binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155332Z" creationid="makenowjust" creationdate="20200419T155306Z">
        <seg>&lt;g1&gt;-o &lt;output_file&gt;&lt;/g1&gt;: 出力されるバイナリのファイル名を指定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-q, --quiet&lt;/g1&gt;: Decreases the log verbosity, printing only warnings and errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180012Z" creationid="makenowjust" creationdate="20200419T180012Z">
        <seg>&lt;g1&gt;-q, --quiet&lt;/g1&gt;: ログの冗長さを減らして、警告およびエラーのみを表示するようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-v, --verbose&lt;/g1&gt;: Increases the log verbosity, printing all debug statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180040Z" creationid="makenowjust" creationdate="20200419T180040Z">
        <seg>&lt;g1&gt;-v, --verbose&lt;/g1&gt;: ログの冗長さを増して、すべてのデバッグ用のメッセージも表示するようにする</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;-v&lt;/g1&gt; / &lt;g2&gt;--version&lt;/g2&gt;: it will display the application version.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172437Z" creationid="makenowjust" creationdate="20200413T172437Z">
        <seg>&lt;g1&gt;-v&lt;/g1&gt; / &lt;g2&gt;--version&lt;/g2&gt;: アプリケーションのバージョンを表示する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/(foo)?bar/&lt;/g1&gt;, &lt;g2&gt;/foo #{foo}/imx&lt;/g2&gt;, &lt;g3&gt;%r(foo/)&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000500Z" creationid="makenowjust" creationdate="20200414T000500Z">
        <seg>&lt;g1&gt;/(foo)?bar/&lt;/g1&gt;, &lt;g2&gt;/foo #{foo}/imx&lt;/g2&gt;, &lt;g3&gt;%r(foo/)&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;/&lt;/g1&gt; contains a readme, any project configurations (eg, CI or editor configs), and any other project-level documentation (eg, changelog or contributing guide).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204441Z" creationid="makenowjust" creationdate="20200412T204441Z">
        <seg>&lt;g1&gt;/&lt;/g1&gt;にはREADMEや、 (CI や editor config などの) プロジェクトの設定、そして (CHANGELOG や CONTRIBUTING ガイドなどの) プロジェクト全体のドキュメントを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;0&lt;/g1&gt;: Dependencies are satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180441Z" creationid="makenowjust" creationdate="20200419T180423Z">
        <seg>&lt;g1&gt;0&lt;/g1&gt;: 依存関係は充足されています</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1..9&lt;/g1&gt;, &lt;g2&gt;1...10&lt;/g2&gt;, &lt;g3&gt;0..var&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000458Z" creationid="makenowjust" creationdate="20200414T000458Z">
        <seg>&lt;g1&gt;1..9&lt;/g1&gt;, &lt;g2&gt;1...10&lt;/g2&gt;, &lt;g3&gt;0..var&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1.0&lt;/g1&gt;, &lt;g2&gt;1.0_f32&lt;/g2&gt;, &lt;g3&gt;1e10&lt;/g3&gt;, &lt;g4&gt;-0.5&lt;/g4&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000428Z" creationid="makenowjust" creationdate="20200414T000428Z">
        <seg>&lt;g1&gt;1.0&lt;/g1&gt;, &lt;g2&gt;1.0_f32&lt;/g2&gt;, &lt;g3&gt;1e10&lt;/g3&gt;, &lt;g4&gt;-0.5&lt;/g4&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;18&lt;/g1&gt;, &lt;g2&gt;-12&lt;/g2&gt;, &lt;g3&gt;19_i64&lt;/g3&gt;, &lt;g4&gt;14_u32&lt;/g4&gt;,&lt;g5&gt;64_u8&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000426Z" creationid="makenowjust" creationdate="20200414T000426Z">
        <seg>&lt;g1&gt;18&lt;/g1&gt;, &lt;g2&gt;-12&lt;/g2&gt;, &lt;g3&gt;19_i64&lt;/g3&gt;, &lt;g4&gt;14_u32&lt;/g4&gt;,&lt;g5&gt;64_u8&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;1&lt;/g1&gt;: Dependencies are not satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180448Z" creationid="makenowjust" creationdate="20200419T180430Z">
        <seg>&lt;g1&gt;1&lt;/g1&gt;: 依存関係は充足されていません</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;:symbol&lt;/g1&gt;, &lt;g2&gt;:"foo bar"&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000432Z" creationid="makenowjust" creationdate="20200414T000432Z">
        <seg>&lt;g1&gt;:symbol&lt;/g1&gt;, &lt;g2&gt;:"foo bar"&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt; from the standard library offers a safe way to provide user input as command arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173319Z" creationid="makenowjust" creationdate="20200422T173319Z">
        <seg>また標準ライブラリにある &lt;g1&gt;&lt;g2&gt;Process&lt;/g2&gt;&lt;/g1&gt; を使うとユーザーの入力を安全にコマンドの引数として渡すことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;: build an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154037Z" creationid="makenowjust" creationdate="20200419T154033Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;: 実行可能ファイルのビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal docs&lt;/g2&gt;&lt;/g1&gt;: generate documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154044Z" creationid="makenowjust" creationdate="20200419T154044Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal docs&lt;/g2&gt;&lt;/g1&gt;: ドキュメントの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;: print Crystal environment information</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154116Z" creationid="makenowjust" creationdate="20200419T154116Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;: Crystal 環境の情報を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal eval&lt;/g2&gt;&lt;/g1&gt;: eval code from args or standard input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154138Z" creationid="makenowjust" creationdate="20200419T154138Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal eval&lt;/g2&gt;&lt;/g1&gt;: 引数や標準入力からコードを評価</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt;: generate a new project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153908Z" creationid="makenowjust" creationdate="20200419T153908Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt;: 新規プロジェクトの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal play&lt;/g2&gt;&lt;/g1&gt;: starts crystal playground server</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154151Z" creationid="makenowjust" creationdate="20200419T154151Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal play&lt;/g2&gt;&lt;/g1&gt;: Crystal プレイグラウンドを起動</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;: build and run program</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154203Z" creationid="makenowjust" creationdate="20200419T154203Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;: プログラムをビルドして実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal spec&lt;/g2&gt;&lt;/g1&gt;: build and run specs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154216Z" creationid="makenowjust" creationdate="20200419T154216Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal spec&lt;/g2&gt;&lt;/g1&gt;: spec をビルドして実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool format&lt;/g2&gt;&lt;/g1&gt;: Format Crystal files</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165645Z" creationid="makenowjust" creationdate="20200419T165645Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool format&lt;/g2&gt;&lt;/g1&gt;: Crystal ファイルのフォーマット</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool&lt;/g2&gt;&lt;/g1&gt;: run a compiler tool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154228Z" creationid="makenowjust" creationdate="20200419T154228Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal tool&lt;/g2&gt;&lt;/g1&gt;: ツールの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal version&lt;/g2&gt;&lt;/g1&gt;: show version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155621Z" creationid="makenowjust" creationdate="20200419T155621Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal version&lt;/g2&gt;&lt;/g1&gt;: バージョンの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards build&lt;/g2&gt;&lt;/g1&gt;: Builds an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175040Z" creationid="makenowjust" creationdate="20200419T175040Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards build&lt;/g2&gt;&lt;/g1&gt;: 実行可能ファイルのビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards check&lt;/g2&gt;&lt;/g1&gt;: Verifies dependencies are installed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175331Z" creationid="makenowjust" creationdate="20200419T175331Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards check&lt;/g2&gt;&lt;/g1&gt;: インストールされている依存関係の検証</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards init&lt;/g2&gt;&lt;/g1&gt;: Generates a new &lt;g3&gt;shard.yml&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175341Z" creationid="makenowjust" creationdate="20200419T175338Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards init&lt;/g2&gt;&lt;/g1&gt;: &lt;g3&gt;shard.yml&lt;/g3&gt;を新規に生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt;: Resolves and installs dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175359Z" creationid="makenowjust" creationdate="20200419T175359Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt;: 依存関係の解決とインストール</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards list&lt;/g2&gt;&lt;/g1&gt;: Lists installed dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175414Z" creationid="makenowjust" creationdate="20200419T175414Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards list&lt;/g2&gt;&lt;/g1&gt;: インストールされた依存関係の一覧を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards prune&lt;/g2&gt;&lt;/g1&gt;: Removes unused dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175430Z" creationid="makenowjust" creationdate="20200419T175430Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards prune&lt;/g2&gt;&lt;/g1&gt;: 利用されていない依存関係の削除</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards update&lt;/g2&gt;&lt;/g1&gt;: Resolves and updates dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175442Z" creationid="makenowjust" creationdate="20200419T175442Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards update&lt;/g2&gt;&lt;/g1&gt;: 依存関係の解決と更新</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;&lt;g2&gt;shards version&lt;/g2&gt;&lt;/g1&gt;: Shows version of a shard</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175501Z" creationid="makenowjust" creationdate="20200419T175456Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards version&lt;/g2&gt;&lt;/g1&gt;: shard のバージョンを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Annotations&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171228Z" creationid="makenowjust" creationdate="20200413T171228Z">
        <seg>&lt;g1&gt;アノテーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array-like&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000444Z" creationid="makenowjust" creationdate="20200414T000444Z">
        <seg>&lt;g1&gt;配列ライク&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170217Z" creationid="makenowjust" creationdate="20200413T170217Z">
        <seg>&lt;g1&gt;配列 (Array)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Arrays of strings&lt;/g1&gt; and &lt;g2&gt;arrays of symbols&lt;/g2&gt; can be created with percent array literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173340Z" creationid="makenowjust" creationdate="20200420T173340Z">
        <seg>&lt;g1&gt;文字列の配列&lt;/g1&gt;と&lt;g2&gt;シンボルの配列&lt;/g2&gt;をパーセント配列リテラルで生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;As a suffix&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170529Z" creationid="makenowjust" creationdate="20200413T170529Z">
        <seg>&lt;g1&gt;後置 if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;As an expression&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170557Z" creationid="makenowjust" creationdate="20200413T170557Z">
        <seg>&lt;g1&gt;式としての if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Assignment&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170433Z" creationid="makenowjust" creationdate="20200413T170433Z">
        <seg>&lt;g1&gt;代入&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Block forwarding&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171111Z" creationid="makenowjust" creationdate="20200413T171111Z">
        <seg>&lt;g1&gt;ブロックのフォワーディング&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Blocks and Procs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171025Z" creationid="makenowjust" creationdate="20200413T171025Z">
        <seg>&lt;g1&gt;ブロックと Proc&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165931Z" creationid="makenowjust" creationdate="20200413T165931Z">
        <seg>&lt;g1&gt;真偽値 (Bool)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt; has only two possible values: &lt;g2&gt;true&lt;/g2&gt; and &lt;g3&gt;false&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001126Z" creationid="makenowjust" creationdate="20200414T001126Z">
        <seg>&lt;g1&gt;Bool&lt;/g1&gt;には&lt;g2&gt;true&lt;/g2&gt;と&lt;g3&gt;false&lt;/g3&gt;という2つの値だけが存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Build the application&lt;/g1&gt; and then run it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174244Z" creationid="makenowjust" creationdate="20200413T174244Z">
        <seg>&lt;g1&gt;アプリケーションのビルド&lt;/g1&gt;をして、それを実行する。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Built-in annotations&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171235Z" creationid="makenowjust" creationdate="20200413T171235Z">
        <seg>&lt;g1&gt;組み込みアノテーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;C bindings&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171406Z" creationid="makenowjust" creationdate="20200413T171406Z">
        <seg>&lt;g1&gt;C バインディング&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_CACHE_DIR&lt;/g1&gt;: Defines path where Crystal caches partial compilation results for faster subsequent builds.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170752Z" creationid="makenowjust" creationdate="20200419T170328Z">
        <seg>&lt;g1&gt;CRYSTAL_CACHE_DIR&lt;/g1&gt;: 続くビルドを高速化するために Crystal がキャッシュしている部分的なコンパイルの結果を保存するパスを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;: The compiler uses the paths in this variable as a first lookup destination for static and dynamic libraries that are to be linked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170939Z" creationid="makenowjust" creationdate="20200419T170939Z">
        <seg>&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;: コンパイラはこの変数に指定されたパスを、静的もしくは動的にリンクするライブラリを最初に探索する場所として利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_PATH&lt;/g1&gt;: Defines paths where Crystal searches for required files.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170747Z" creationid="makenowjust" creationdate="20200419T170747Z">
        <seg>&lt;g1&gt;CRYSTAL_PATH&lt;/g1&gt;: Crystal が require されたファイルを探索するパスを指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;CRYSTAL_VERSION&lt;/g1&gt; is only available as output of &lt;g2&gt;&lt;g3&gt;crystal env&lt;/g3&gt;&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170808Z" creationid="makenowjust" creationdate="20200419T170808Z">
        <seg>&lt;g1&gt;CRYSTAL_VERSION&lt;/g1&gt; は&lt;g2&gt;&lt;g3&gt;crystal env&lt;/g3&gt;&lt;/g2&gt;の出力としてのみ有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Callbacks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171442Z" creationid="makenowjust" creationdate="20200413T171442Z">
        <seg>&lt;g1&gt;コールバック&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Capturing blocks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171038Z" creationid="makenowjust" creationdate="20200413T171038Z">
        <seg>&lt;g1&gt;ブロックの捕捉&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170118Z" creationid="makenowjust" creationdate="20200413T170118Z">
        <seg>&lt;g1&gt;文字 (Char)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Class methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170920Z" creationid="makenowjust" creationdate="20200413T170920Z">
        <seg>&lt;g1&gt;クラスメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Class variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170928Z" creationid="makenowjust" creationdate="20200413T170928Z">
        <seg>&lt;g1&gt;クラス変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Classes and methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170730Z" creationid="makenowjust" creationdate="20200413T170730Z">
        <seg>&lt;g1&gt;クラスとメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Closures&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171114Z" creationid="makenowjust" creationdate="20200413T171114Z">
        <seg>&lt;g1&gt;クロージャ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Coding style&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171505Z" creationid="makenowjust" creationdate="20200413T171505Z">
        <seg>&lt;g1&gt;コーディングスタイル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Command Line Application&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165813Z" creationid="makenowjust" creationdate="20200413T165808Z">
        <seg>&lt;g1&gt;コマンドラインアプリケーション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Command&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170357Z" creationid="makenowjust" creationdate="20200413T170340Z">
        <seg>&lt;g1&gt;コマンド (Command)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Comments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165911Z" creationid="makenowjust" creationdate="20200413T165911Z">
        <seg>&lt;g1&gt;コメント&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Common options:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154731Z" creationid="makenowjust" creationdate="20200419T154731Z">
        <seg>&lt;g1&gt;よく使うオプション:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compile-time Flags&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000037Z" creationid="makenowjust" creationdate="20200414T000037Z">
        <seg>&lt;g1&gt;コンパイル時のフラグ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Compile-time flags&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171357Z" creationid="makenowjust" creationdate="20200413T171357Z">
        <seg>&lt;g1&gt;コンパイル時のフラグ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Concurrency&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171544Z" creationid="makenowjust" creationdate="20200413T171544Z">
        <seg>&lt;g1&gt;並列性&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Connection pool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171527Z" creationid="makenowjust" creationdate="20200413T171527Z">
        <seg>&lt;g1&gt;コネクションプール&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Connection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171521Z" creationid="makenowjust" creationdate="20200413T171521Z">
        <seg>&lt;g1&gt;接続&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Constants&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040620Z" creationid="makenowjust" creationdate="20200413T171015Z">
        <seg>&lt;g1&gt;定数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Constants&lt;/g1&gt; are screaming-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203754Z" creationid="makenowjust" creationdate="20200412T203754Z">
        <seg>&lt;g1&gt;定数&lt;/g1&gt;はすべて大文字とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Continuous Integration&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171627Z" creationid="makenowjust" creationdate="20200413T171627Z">
        <seg>&lt;g1&gt;継続的インテグレーション (CI)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Control Expression&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235907Z" creationid="makenowjust" creationdate="20200413T235907Z">
        <seg>&lt;g1&gt;制御式&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Control expressions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170449Z" creationid="makenowjust" creationdate="20200413T170449Z">
        <seg>&lt;g1&gt;制御式&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Conventions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171459Z" creationid="makenowjust" creationdate="20200413T171459Z">
        <seg>&lt;g1&gt;規約&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Cross-compilation&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171401Z" creationid="makenowjust" creationdate="20200413T171401Z">
        <seg>&lt;g1&gt;クロスコンパイル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Crystal's standard library is documented in the &lt;g2&gt;API docs&lt;/g2&gt;.&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221715Z" creationid="makenowjust" creationdate="20200412T221715Z">
        <seg>&lt;g1&gt;Crystalの標準ライブラリのドキュメントは&lt;g2&gt;APIドキュメント&lt;/g2&gt;にあります。&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Database&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171518Z" creationid="makenowjust" creationdate="20200413T171518Z">
        <seg>&lt;g1&gt;データベース&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Default values and named arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170819Z" creationid="makenowjust" creationdate="20200413T170819Z">
        <seg>&lt;g1&gt;デフォルト引数と名前付き引数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Documenting code&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171514Z" creationid="makenowjust" creationdate="20200413T171514Z">
        <seg>&lt;g1&gt;コードのドキュメント化&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Enums&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171018Z" creationid="makenowjust" creationdate="20200413T171018Z">
        <seg>&lt;g1&gt;Enum&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Everything is an object&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170716Z" creationid="makenowjust" creationdate="20200413T170716Z">
        <seg>&lt;g1&gt;すべてがオブジェクト&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Exception Handling&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000005Z" creationid="makenowjust" creationdate="20200414T000005Z">
        <seg>&lt;g1&gt;例外の処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Exception handling&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171138Z" creationid="makenowjust" creationdate="20200413T171138Z">
        <seg>&lt;g1&gt;例外の処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Floats&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170111Z" creationid="makenowjust" creationdate="20200413T170111Z">
        <seg>&lt;g1&gt;浮動小数点数 (Float)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Fresh variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171219Z" creationid="makenowjust" creationdate="20200413T171219Z">
        <seg>&lt;g1&gt;フレッシュ変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Generics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171005Z" creationid="makenowjust" creationdate="20200413T171005Z">
        <seg>&lt;g1&gt;ジェネリクス&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Guides&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171535Z" creationid="makenowjust" creationdate="20200413T171535Z">
        <seg>&lt;g1&gt;ガイド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;HTTP Server&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165754Z" creationid="makenowjust" creationdate="20200413T165754Z">
        <seg>&lt;g1&gt;HTTP サーバー&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash-like&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000452Z" creationid="makenowjust" creationdate="20200414T000452Z">
        <seg>&lt;g1&gt;Hashライク&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170223Z" creationid="makenowjust" creationdate="20200413T170223Z">
        <seg>&lt;g1&gt;ハッシュ (Hash)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hello World!&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170047Z" creationid="makenowjust" creationdate="20200413T170047Z">
        <seg>&lt;g1&gt;Hello World!&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hooks&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171212Z" creationid="makenowjust" creationdate="20200413T171212Z">
        <seg>&lt;g1&gt;フック&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hosting on GitHub&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171608Z" creationid="makenowjust" creationdate="20200413T171608Z">
        <seg>&lt;g1&gt;GitHub でのホスト方法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Hosting on GitLab&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171617Z" creationid="makenowjust" creationdate="20200413T171617Z">
        <seg>&lt;g1&gt;GitLab でのホスト方法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Inheritance&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170857Z" creationid="makenowjust" creationdate="20200413T170857Z">
        <seg>&lt;g1&gt;継承&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182044Z" creationid="makenowjust" creationdate="20200419T182044Z">
        <seg>&lt;g1&gt;Int16&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182048Z" creationid="makenowjust" creationdate="20200419T182048Z">
        <seg>&lt;g1&gt;Int32&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182052Z" creationid="makenowjust" creationdate="20200419T182052Z">
        <seg>&lt;g1&gt;Int64&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182036Z" creationid="makenowjust" creationdate="20200419T182036Z">
        <seg>&lt;g1&gt;Int8&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Integers&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170058Z" creationid="makenowjust" creationdate="20200413T170058Z">
        <seg>&lt;g1&gt;整数 (Integer)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Introduction&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165702Z" creationid="makenowjust" creationdate="20200413T165702Z">
        <seg>&lt;g1&gt;導入&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Lib&lt;/g1&gt; names are prefixed with &lt;g2&gt;Lib&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204137Z" creationid="makenowjust" creationdate="20200412T204137Z">
        <seg>ライブラリ(&lt;g1&gt;Lib&lt;/g1&gt;)の名前は先頭に&lt;g2&gt;Lib&lt;/g2&gt;をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Literals&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165917Z" creationid="makenowjust" creationdate="20200413T165917Z">
        <seg>&lt;g1&gt;リテラル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Local Variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235903Z" creationid="makenowjust" creationdate="20200413T235903Z">
        <seg>&lt;g1&gt;ローカル変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Local variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170442Z" creationid="makenowjust" creationdate="20200413T170442Z">
        <seg>&lt;g1&gt;ローカル変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Low Level Primitives&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000026Z" creationid="makenowjust" creationdate="20200414T000026Z">
        <seg>&lt;g1&gt;低レベルプリミティブ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Low-level primitives&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171329Z" creationid="makenowjust" creationdate="20200413T171329Z">
        <seg>&lt;g1&gt;低レベルプリミティブ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Macro methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171210Z" creationid="makenowjust" creationdate="20200413T171210Z">
        <seg>&lt;g1&gt;マクロメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Macros&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171206Z" creationid="makenowjust" creationdate="20200413T171206Z">
        <seg>&lt;g1&gt;マクロ&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Method arguments&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170847Z" creationid="makenowjust" creationdate="20200413T170847Z">
        <seg>&lt;g1&gt;メソッドの引数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Method names&lt;/g1&gt; are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203648Z" creationid="makenowjust" creationdate="20200412T203648Z">
        <seg>&lt;g1&gt;メソッド名&lt;/g1&gt;はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Methods and instance variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170750Z" creationid="makenowjust" creationdate="20200413T170750Z">
        <seg>&lt;g1&gt;メソッドとインスタンス変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Modules&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170957Z" creationid="makenowjust" creationdate="20200413T170957Z">
        <seg>&lt;g1&gt;モジュール&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;MyType{"foo" =&gt; "bar"}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000456Z" creationid="makenowjust" creationdate="20200414T000456Z">
        <seg>&lt;g1&gt;MyType{"foo" =&gt; "bar"}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Building fully statical linked executables is currently only supported on Alpine Linux.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153948Z" creationid="makenowjust" creationdate="20200419T152804Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; 静的リンクした実行可能ファイルのビルドは現在Alpine Linux上でのみサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Inheriting documentation only works on &lt;g2&gt;instance&lt;/g2&gt;, non-constructor methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214227Z" creationid="makenowjust" creationdate="20200412T214227Z">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; ドキュメントの継承はコンストラクタメソッドではなく、&lt;g2&gt;インスタンスメソッド&lt;/g2&gt;でのみ機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NOTE:&lt;/g1&gt; Range literals are often wrapped in parentheses, for example if it is meant to be used as the receiver of a call.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034529Z" creationid="makenowjust" creationdate="20200421T034529Z">
        <seg>&lt;g1&gt;注意:&lt;/g1&gt; 範囲リテラルをレシーバにしてメソッド呼び出しを続けるような場合、範囲リテラルを括弧で囲う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170323Z" creationid="makenowjust" creationdate="20200413T170323Z">
        <seg>&lt;g1&gt;名前付きタプル (NamedTuple)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170248Z" creationid="makenowjust" creationdate="20200413T170248Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Operators&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170850Z" creationid="makenowjust" creationdate="20200413T170850Z">
        <seg>&lt;g1&gt;演算子&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Overloading&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170805Z" creationid="makenowjust" creationdate="20200413T170805Z">
        <seg>&lt;g1&gt;オーバーロード&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Overview and Examples&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165732Z" creationid="makenowjust" creationdate="20200413T165732Z">
        <seg>&lt;g1&gt;概要と例&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Performance&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171541Z" creationid="makenowjust" creationdate="20200413T171541Z">
        <seg>&lt;g1&gt;パフォーマンス&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Proc literal&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171045Z" creationid="makenowjust" creationdate="20200413T171045Z">
        <seg>&lt;g1&gt;Proc リテラル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171652Z" creationid="makenowjust" creationdate="20200413T171652Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170229Z" creationid="makenowjust" creationdate="20200413T170229Z">
        <seg>&lt;g1&gt;範囲 (Range)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Regex&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170308Z" creationid="makenowjust" creationdate="20200413T170308Z">
        <seg>&lt;g1&gt;正規表現 (Regex)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Requiring Files&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235918Z" creationid="makenowjust" creationdate="20200413T235918Z">
        <seg>&lt;g1&gt;ファイルの require&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Requiring files&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235950Z" creationid="makenowjust" creationdate="20200413T170658Z">
        <seg>&lt;g1&gt;ファイルの require&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Return types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170839Z" creationid="makenowjust" creationdate="20200413T170839Z">
        <seg>&lt;g1&gt;戻り値の型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Runner options:&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164144Z" creationid="makenowjust" creationdate="20200419T164144Z">
        <seg>&lt;g1&gt;spec ランナーに対するオプション:&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Set{1, 2, 3}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000446Z" creationid="makenowjust" creationdate="20200414T000446Z">
        <seg>&lt;g1&gt;Set{1, 2, 3}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Splats and tuples&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170828Z" creationid="makenowjust" creationdate="20200413T170828Z">
        <seg>&lt;g1&gt;splat 展開とタプル&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;String&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170127Z" creationid="makenowjust" creationdate="20200413T170127Z">
        <seg>&lt;g1&gt;文字列 (String)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Structs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171012Z" creationid="makenowjust" creationdate="20200413T171012Z">
        <seg>&lt;g1&gt;構造体 (Struct)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170139Z" creationid="makenowjust" creationdate="20200413T170139Z">
        <seg>&lt;g1&gt;シンボル (Symbol)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Syntax and semantics&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165907Z" creationid="makenowjust" creationdate="20200413T165907Z">
        <seg>&lt;g1&gt;構文とその意味&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Ternary if&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170605Z" creationid="makenowjust" creationdate="20200413T170605Z">
        <seg>&lt;g1&gt;3項演算子&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Testing&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171547Z" creationid="makenowjust" creationdate="20200413T171547Z">
        <seg>&lt;g1&gt;テスト&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The Program&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170723Z" creationid="makenowjust" creationdate="20200413T170723Z">
        <seg>&lt;g1&gt;プログラム&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;The shards command&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165723Z" creationid="makenowjust" creationdate="20200413T165723Z">
        <seg>&lt;g1&gt;shards コマンド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Transactions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171531Z" creationid="makenowjust" creationdate="20200413T171531Z">
        <seg>&lt;g1&gt;トランザクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Truthy and falsey values&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170511Z" creationid="makenowjust" creationdate="20200413T170511Z">
        <seg>&lt;g1&gt;真になる値と偽になる値&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170314Z" creationid="makenowjust" creationdate="20200413T170314Z">
        <seg>&lt;g1&gt;タプル (Tuple)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type Grammar&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000012Z" creationid="makenowjust" creationdate="20200414T000012Z">
        <seg>&lt;g1&gt;型の文法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type Reflection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000018Z" creationid="makenowjust" creationdate="20200414T000018Z">
        <seg>&lt;g1&gt;型のリフレクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type grammar&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171144Z" creationid="makenowjust" creationdate="20200413T171144Z">
        <seg>&lt;g1&gt;型の文法&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type inference&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170755Z" creationid="makenowjust" creationdate="20200413T170755Z">
        <seg>&lt;g1&gt;型推論&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type names&lt;/g1&gt; are camelcased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203618Z" creationid="makenowjust" creationdate="20200412T203618Z">
        <seg>&lt;g1&gt;型の名前&lt;/g1&gt;はキャメルケースとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type reflection&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171151Z" creationid="makenowjust" creationdate="20200413T171151Z">
        <seg>&lt;g1&gt;型のリフレクション&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Type restrictions&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170833Z" creationid="makenowjust" creationdate="20200413T170833Z">
        <seg>&lt;g1&gt;型制約&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Types and methods&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170705Z" creationid="makenowjust" creationdate="20200413T170705Z">
        <seg>&lt;g1&gt;型とメソッド&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182104Z" creationid="makenowjust" creationdate="20200419T182104Z">
        <seg>&lt;g1&gt;UInt16&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182108Z" creationid="makenowjust" creationdate="20200419T182108Z">
        <seg>&lt;g1&gt;UInt32&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182111Z" creationid="makenowjust" creationdate="20200419T182111Z">
        <seg>&lt;g1&gt;UInt64&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182058Z" creationid="makenowjust" creationdate="20200419T182058Z">
        <seg>&lt;g1&gt;UInt8&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Uninitialized variable declaration&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171351Z" creationid="makenowjust" creationdate="20200413T171345Z">
        <seg>&lt;g1&gt;初期化しない変数宣言&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Union types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170800Z" creationid="makenowjust" creationdate="20200413T170800Z">
        <seg>&lt;g1&gt;ユニオン型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Unsafe code&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171456Z" creationid="makenowjust" creationdate="20200413T171456Z">
        <seg>&lt;g1&gt;安全でない (unsafe) コード&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using CircleCI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171640Z" creationid="makenowjust" creationdate="20200413T171640Z">
        <seg>&lt;g1&gt;CircleCI の利用&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using Travis CI&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171650Z" creationid="makenowjust" creationdate="20200413T171633Z">
        <seg>&lt;g1&gt;Travis CI の利用&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Using the compiler&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165957Z" creationid="makenowjust" creationdate="20200413T165715Z">
        <seg>&lt;g1&gt;コンパイラの使い方&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Variable names&lt;/g1&gt; are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T210630Z" creationid="makenowjust" creationdate="20200412T203731Z">
        <seg>&lt;g1&gt;変数名&lt;/g1&gt;はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Variables&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171421Z" creationid="makenowjust" creationdate="20200413T171421Z">
        <seg>&lt;g1&gt;変数&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Virtual and abstract types&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170915Z" creationid="makenowjust" creationdate="20200413T170915Z">
        <seg>&lt;g1&gt;virtual 型と abstract 型&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Visibility&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170854Z" creationid="makenowjust" creationdate="20200413T170854Z">
        <seg>&lt;g1&gt;可視性&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;Writing Shards&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171558Z" creationid="makenowjust" creationdate="20200413T171558Z">
        <seg>&lt;g1&gt;Shardの作り方&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;[1, 2, 3]&lt;/g1&gt;, &lt;g2&gt;[1, 2, 3] of Int32&lt;/g2&gt;, &lt;g3&gt;%w(one two three)&lt;/g3&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000434Z" creationid="makenowjust" creationdate="20200414T000434Z">
        <seg>&lt;g1&gt;[1, 2, 3]&lt;/g1&gt;, &lt;g2&gt;[1, 2, 3] of Int32&lt;/g2&gt;, &lt;g3&gt;%w(one two three)&lt;/g3&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;alias&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171127Z" creationid="makenowjust" creationdate="20200413T171117Z">
        <seg>&lt;g1&gt;型エイリアス (alias)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;as&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171159Z" creationid="makenowjust" creationdate="20200413T171159Z">
        <seg>&lt;g1&gt;as&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;as?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171200Z" creationid="makenowjust" creationdate="20200413T171200Z">
        <seg>&lt;g1&gt;as?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;bin/&lt;/g1&gt; contains any executables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204616Z" creationid="makenowjust" creationdate="20200412T204616Z">
        <seg>&lt;g1&gt;bin/&lt;/g1&gt;には実行可能ファイルを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170639Z" creationid="makenowjust" creationdate="20200413T170639Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; and &lt;g2&gt;next&lt;/g2&gt; can also be used inside an &lt;g3&gt;until&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101120Z" creationid="makenowjust" creationdate="20200424T101120Z">
        <seg>&lt;g3&gt;until&lt;/g3&gt;の中でも&lt;g1&gt;break&lt;/g1&gt;と&lt;g2&gt;next&lt;/g2&gt;は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;break&lt;/g1&gt; can also take a parameter which will then be the value that gets returned:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100858Z" creationid="makenowjust" creationdate="20200424T095659Z">
        <seg>&lt;g1&gt;break&lt;/g1&gt;は引数を受けとることも可能で、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;case&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170636Z" creationid="makenowjust" creationdate="20200413T170636Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155002Z" creationid="makenowjust" creationdate="20200419T155002Z">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161515Z" creationid="makenowjust" creationdate="20200419T161515Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163140Z" creationid="makenowjust" creationdate="20200419T163140Z">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155649Z" creationid="makenowjust" creationdate="20200419T155649Z">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal help&lt;/g1&gt;: show help about commands and options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154247Z" creationid="makenowjust" creationdate="20200419T154247Z">
        <seg>&lt;g1&gt;crystal help&lt;/g1&gt;: コマンドとオプションのヘルプの表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160802Z" creationid="makenowjust" creationdate="20200419T160802Z">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165209Z" creationid="makenowjust" creationdate="20200419T165209Z">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal run&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154427Z" creationid="makenowjust" creationdate="20200419T154427Z">
        <seg>&lt;g1&gt;crystal run&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163403Z" creationid="makenowjust" creationdate="20200419T163403Z">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool context&lt;/g1&gt;: Show context for given location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165617Z" creationid="makenowjust" creationdate="20200419T165617Z">
        <seg>&lt;g1&gt;crystal tool context&lt;/g1&gt;: 与えられた位置でのコンテキストを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool expand&lt;/g1&gt;: Show macro expansion for given location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165636Z" creationid="makenowjust" creationdate="20200419T165636Z">
        <seg>&lt;g1&gt;crystal tool expand&lt;/g1&gt;: 与えられた位置のマクロを展開</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165741Z" creationid="makenowjust" creationdate="20200419T165741Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool hierarchy&lt;/g1&gt;: Show type hierarchy</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165652Z" creationid="makenowjust" creationdate="20200419T165652Z">
        <seg>&lt;g1&gt;crystal tool hierarchy&lt;/g1&gt;: 型の階層を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool implementations&lt;/g1&gt;: Show implementations for given call in location</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165726Z" creationid="makenowjust" creationdate="20200419T165726Z">
        <seg>&lt;g1&gt;crystal tool implementations&lt;/g1&gt;: 指定された位置で呼び出されているメソッドの実装がどこにあるかを表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool types&lt;/g1&gt;: Show types of main variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165739Z" creationid="makenowjust" creationdate="20200419T165739Z">
        <seg>&lt;g1&gt;crystal tool types&lt;/g1&gt;: 主要な変数の型を表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal tool&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165602Z" creationid="makenowjust" creationdate="20200419T165602Z">
        <seg>&lt;g1&gt;crystal tool&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160650Z" creationid="makenowjust" creationdate="20200419T160650Z">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;describe&lt;/g1&gt; and &lt;g2&gt;context&lt;/g2&gt; take a description as argument (which should usually be a string) and a block containing the individual specs or nested groupings.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234234Z" creationid="akiji" creationdate="20200505T134448Z">
        <seg>&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;は引数（通常は文字列）に概要をとり、個々のspecやネストしたグループを含むブロックを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;describe&lt;/g1&gt;, &lt;g2&gt;context&lt;/g2&gt; and &lt;g3&gt;it&lt;/g3&gt; blocks can be marked with &lt;g4&gt;focus: true&lt;/g4&gt;, like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101932Z" creationid="akiji" creationdate="20200516T101510Z">
        <seg>&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;、&lt;g3&gt;it&lt;/g3&gt;ブロックには、以下のように &lt;g4&gt;focus: true&lt;/g4&gt; を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;describe&lt;/g1&gt;, &lt;g2&gt;context&lt;/g2&gt; and &lt;g3&gt;it&lt;/g3&gt; blocks can be tagged, like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234930Z" creationid="akiji" creationdate="20200516T101929Z">
        <seg>&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;、&lt;g3&gt;it&lt;/g3&gt;ブロックには以下のようにしてタグをつけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;enum&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171416Z" creationid="makenowjust" creationdate="20200413T171416Z">
        <seg>&lt;g1&gt;enum&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;finalize&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170950Z" creationid="makenowjust" creationdate="20200413T170950Z">
        <seg>&lt;g1&gt;finalize&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;fun&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171410Z" creationid="makenowjust" creationdate="20200413T171410Z">
        <seg>&lt;g1&gt;fun&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;i&lt;/g1&gt;: case-insensitive matching (&lt;g2&gt;PCRE_CASELESS&lt;/g2&gt;):  Unicode letters in the pattern match both upper and lower case letters in the subject string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041704Z" creationid="makenowjust" creationdate="20200421T041704Z">
        <seg>&lt;g1&gt;i&lt;/g1&gt;: 大文字と小文字を区別しないマッチを行う (&lt;g2&gt;PCRE_CASELESS&lt;/g2&gt;) 。ユニコード文字の大文字と小文字も区別しないようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if !&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170629Z" creationid="makenowjust" creationdate="20200413T170629Z">
        <seg>&lt;g1&gt;if !&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170621Z" creationid="makenowjust" creationdate="20200413T170621Z">
        <seg>&lt;g1&gt;if var.is_a?(...)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.nil?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170624Z" creationid="makenowjust" creationdate="20200413T170624Z">
        <seg>&lt;g1&gt;if var.nil?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170623Z" creationid="makenowjust" creationdate="20200413T170623Z">
        <seg>&lt;g1&gt;if var.responds_to?(...)&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if var&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170617Z" creationid="makenowjust" creationdate="20200413T170617Z">
        <seg>&lt;g1&gt;if var&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;if&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170514Z" creationid="makenowjust" creationdate="20200413T170514Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;input&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163650Z" creationid="makenowjust" creationdate="20200413T163650Z">
        <seg>&lt;g1&gt;入力&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171334Z" creationid="makenowjust" creationdate="20200413T171334Z">
        <seg>&lt;g1&gt;instance_sizeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171153Z" creationid="makenowjust" creationdate="20200413T171153Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;lib&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171409Z" creationid="makenowjust" creationdate="20200413T171409Z">
        <seg>&lt;g1&gt;lib&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;m&lt;/g1&gt;: multiline matching (&lt;g2&gt;PCRE_MULTILINE&lt;/g2&gt;): The &lt;g3&gt;start of line&lt;/g3&gt; (&lt;g4&gt;^&lt;/g4&gt;) and &lt;g5&gt;end of line&lt;/g5&gt; (&lt;g6&gt;$&lt;/g6&gt;) metacharacters match immediately following or immediately before internal newlines in the subject string, respectively, as well as at the very start and end.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041833Z" creationid="makenowjust" creationdate="20200421T041715Z">
        <seg>&lt;g1&gt;m&lt;/g1&gt;: 複数行マッチを行う (&lt;g2&gt;PCRE_MULTILINE&lt;/g2&gt;)。&lt;g3&gt;行の開始&lt;/g3&gt; (&lt;g4&gt;^&lt;/g4&gt;) と &lt;g5&gt;行の終わり&lt;/g5&gt; (&lt;g6&gt;$&lt;/g6&gt;) を表すメタ文字が、文字列の冒頭や末尾に加えて、改行の直前や直後にもマッチするようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;new, initialize and allocate&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170738Z" creationid="makenowjust" creationdate="20200413T170738Z">
        <seg>&lt;g1&gt;new/initialize/allocate&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;next&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170640Z" creationid="makenowjust" creationdate="20200413T170640Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;next&lt;/g1&gt; can also be used to exit from a block, for example:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095951Z" creationid="makenowjust" creationdate="20200424T095951Z">
        <seg>&lt;g1&gt;next&lt;/g1&gt;はブロックを終了するためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000421Z" creationid="makenowjust" creationdate="20200414T000421Z">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171156Z" creationid="makenowjust" creationdate="20200413T171156Z">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;offsetof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171335Z" creationid="makenowjust" creationdate="20200413T171335Z">
        <seg>&lt;g1&gt;offsetof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;options passed to the app&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163923Z" creationid="makenowjust" creationdate="20200413T163923Z">
        <seg>&lt;g1&gt;アプリケーションに渡されたオプションの処理&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;out&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171412Z" creationid="makenowjust" creationdate="20200413T171412Z">
        <seg>&lt;g1&gt;out&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;output&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163654Z" creationid="makenowjust" creationdate="20200413T163654Z">
        <seg>&lt;g1&gt;出力&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;path&lt;/g1&gt; can be a file or folder name and include all Crystal files in that folder tree.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165923Z" creationid="makenowjust" creationdate="20200419T165923Z">
        <seg>&lt;g1&gt;path&lt;/g1&gt; にはファイル名かフォルダ名が指定できて、フォルダ名の場合そのフォルダ中の Crystal ファイルを再帰的に辿ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171331Z" creationid="makenowjust" creationdate="20200413T171331Z">
        <seg>&lt;g1&gt;pointerof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;request for user input&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163938Z" creationid="makenowjust" creationdate="20200413T163938Z">
        <seg>&lt;g1&gt;ユーザーの入力の要求&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "./foo/bar/baz"&lt;/g1&gt; will lookup "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" relative to the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091351Z" creationid="makenowjust" creationdate="20200427T091348Z">
        <seg>&lt;g1&gt;require "./foo/bar/baz"&lt;/g1&gt; は現在のファイルから相対的に "foo/bar/baz.cr" or "foo/bar/baz/baz.cr" を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/*"&lt;/g1&gt; will require all ".cr" files below the "foo" directory, but not below directories inside "foo".</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091703Z" creationid="makenowjust" creationdate="20200427T091620Z">
        <seg>&lt;g1&gt;require "foo/*"&lt;/g1&gt; は "foo" ディレクトリ中のすべての ".cr" ファイルを読み込むが、"foo" 中のディレクトリまでは読み込みません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/**"&lt;/g1&gt; will require all ".cr" files below the "foo" directory, and below directories inside "foo", recursively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091654Z" creationid="makenowjust" creationdate="20200427T091654Z">
        <seg>&lt;g1&gt;require "foo/**"&lt;/g1&gt; は "foo" ディレクトリ中のすべての ".cr" ファイルにくわえて、"foo" 中のディレクトリも再帰的に読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;require "foo/bar/baz"&lt;/g1&gt; will lookup "foo/bar/baz.cr", "foo/bar/baz/baz.cr", "foo/src/bar/baz.cr" or "foo/src/bar/baz/baz.cr" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091327Z" creationid="makenowjust" creationdate="20200427T090848Z">
        <seg>&lt;g1&gt;require "foo/bar/baz"&lt;/g1&gt; は require パスから "foo/bar/baz.cr" や "foo/bar/baz/baz.cr"、 "foo/src/bar/baz.cr"、 "foo/src/bar/baz/baz.cr" を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;responds_to?&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171158Z" creationid="makenowjust" creationdate="20200413T171158Z">
        <seg>&lt;g1&gt;responds_to?&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;runner_options&lt;/g1&gt; are provided to the compiled binary executable which runs the specs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164228Z" creationid="makenowjust" creationdate="20200419T164228Z">
        <seg>&lt;g1&gt;runner_options&lt;/g1&gt; はコンパイルされた spec を実行する際に渡すオプションを表しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards build&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180042Z" creationid="makenowjust" creationdate="20200419T180042Z">
        <seg>&lt;g1&gt;shards build&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards check&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180330Z" creationid="makenowjust" creationdate="20200419T180330Z">
        <seg>&lt;g1&gt;shards check&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards init&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180450Z" creationid="makenowjust" creationdate="20200419T180450Z">
        <seg>&lt;g1&gt;shards init&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards install&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180512Z" creationid="makenowjust" creationdate="20200419T180512Z">
        <seg>&lt;g1&gt;shards install&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards list&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181022Z" creationid="makenowjust" creationdate="20200419T181022Z">
        <seg>&lt;g1&gt;shards list&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards prune&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181041Z" creationid="makenowjust" creationdate="20200419T181041Z">
        <seg>&lt;g1&gt;shards prune&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards update&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181103Z" creationid="makenowjust" creationdate="20200419T181103Z">
        <seg>&lt;g1&gt;shards update&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards version&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181247Z" creationid="makenowjust" creationdate="20200419T181247Z">
        <seg>&lt;g1&gt;shards version&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;shards&lt;/g1&gt; requires the presence of a &lt;g2&gt;shard.yml&lt;/g2&gt; file in the project folder (working directory).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173630Z" creationid="makenowjust" creationdate="20200419T173630Z">
        <seg>&lt;g1&gt;shards&lt;/g1&gt;は&lt;g2&gt;shard.yml&lt;/g2&gt;がプロジェクトのフォルダ (現在のディレクトリ) に置いてあることを要求します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;sizeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171333Z" creationid="makenowjust" creationdate="20200413T171333Z">
        <seg>&lt;g1&gt;sizeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;spec/&lt;/g1&gt; contains the &lt;g2&gt;project's specs&lt;/g2&gt;, which can be run with &lt;g3&gt;crystal spec&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204742Z" creationid="makenowjust" creationdate="20200412T204601Z">
        <seg>&lt;g1&gt;spec/&lt;/g1&gt;には&lt;g3&gt;crystal spec&lt;/g3&gt;によって実行できる、&lt;g2&gt;プロジェクトの spec&lt;/g2&gt; を配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;src/&lt;/g1&gt; contains the project's source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204459Z" creationid="makenowjust" creationdate="20200412T204459Z">
        <seg>&lt;g1&gt;src/&lt;/g1&gt;にはプロジェクトのソースコードを配置します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;struct&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171414Z" creationid="makenowjust" creationdate="20200413T171414Z">
        <seg>&lt;g1&gt;struct&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;to_unsafe&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171413Z" creationid="makenowjust" creationdate="20200413T171413Z">
        <seg>&lt;g1&gt;to_unsafe&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;true&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000424Z" creationid="makenowjust" creationdate="20200414T000424Z">
        <seg>&lt;g1&gt;true&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;type&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171425Z" creationid="makenowjust" creationdate="20200413T171425Z">
        <seg>&lt;g1&gt;type&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171201Z" creationid="makenowjust" creationdate="20200413T171201Z">
        <seg>&lt;g1&gt;typeof&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;union&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T171415Z" creationid="makenowjust" creationdate="20200413T171415Z">
        <seg>&lt;g1&gt;union&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170634Z" creationid="makenowjust" creationdate="20200413T170634Z">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;until&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170642Z" creationid="makenowjust" creationdate="20200413T170642Z">
        <seg>&lt;g1&gt;until&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;while&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170637Z" creationid="makenowjust" creationdate="20200413T170637Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x...y&lt;/g1&gt;: Three dots denote an exclusive range, including &lt;g2&gt;x&lt;/g2&gt; and all values up to but not including &lt;g3&gt;y&lt;/g3&gt; (in mathematics: &lt;g4&gt;[x, y)&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035016Z" creationid="makenowjust" creationdate="20200421T034412Z">
        <seg>&lt;g1&gt;x...y&lt;/g1&gt;: 3つのドットは右の値を含まない範囲を表します。つまり&lt;g2&gt;x&lt;/g2&gt;と&lt;g3&gt;y&lt;/g3&gt;までの値すべてを含みます (数学的には左閉右開区間 &lt;g4&gt;[x, y)&lt;/g4&gt; です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x..y&lt;/g1&gt;: Two dots denote an inclusive range, including &lt;g2&gt;x&lt;/g2&gt; and &lt;g3&gt;y&lt;/g3&gt; and all values in between (in mathematics: &lt;g4&gt;[x, y]&lt;/g4&gt;) .</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034309Z" creationid="makenowjust" creationdate="20200421T034309Z">
        <seg>&lt;g1&gt;x..y&lt;/g1&gt;: 2つのドットは右の値を含む範囲を表します。つまり&lt;g2&gt;x&lt;/g2&gt;と&lt;g3&gt;y&lt;/g3&gt;、およびその間のすべての値を含みます (数学的には閉区間 &lt;g4&gt;[x, y]&lt;/g4&gt; です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;x&lt;/g1&gt;: extended whitespace matching (&lt;g2&gt;PCRE_EXTENDED&lt;/g2&gt;): Most white space characters in the pattern are totally ignored except when ignore or inside a character class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042105Z" creationid="makenowjust" creationdate="20200421T041946Z">
        <seg>&lt;g1&gt;x&lt;/g1&gt;: 空白文字を無視するようにします (&lt;g2&gt;PCRE_EXTENDED&lt;/g2&gt;)。文字クラスの内部を除くパターン中の空白文字を飛ばしてマッチを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{"foo" =&gt; 2}&lt;/g1&gt;, &lt;g2&gt;{} of String =&gt; Int32&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000447Z" creationid="makenowjust" creationdate="20200414T000447Z">
        <seg>&lt;g1&gt;{"foo" =&gt; 2}&lt;/g1&gt;, &lt;g2&gt;{} of String =&gt; Int32&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{1, "hello", 'x'}&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000502Z" creationid="makenowjust" creationdate="20200414T000502Z">
        <seg>&lt;g1&gt;{1, "hello", 'x'}&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;{name: "Crystal", year: 2011}&lt;/g1&gt;, &lt;g2&gt;{"this is a key": 1}&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000503Z" creationid="makenowjust" creationdate="20200414T000503Z">
        <seg>&lt;g1&gt;{name: "Crystal", year: 2011}&lt;/g1&gt;, &lt;g2&gt;{"this is a key": 1}&lt;/g2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g1&gt;||&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170648Z" creationid="makenowjust" creationdate="20200413T170648Z">
        <seg>&lt;g1&gt;||&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;0..5.to_a&lt;/g2&gt; without parentheses would be semantically equivalent to &lt;g3&gt;0..(5.to_a)&lt;/g3&gt; because method calls and other operators have higher precedence than the range literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T034628Z" creationid="makenowjust" creationdate="20200421T034628Z">
        <seg>&lt;g2&gt;0..5.to_a&lt;/g2&gt; のように括弧で囲わなかった場合、範囲リテラルよりもメソッド呼び出しの方が優先度が高いため &lt;g3&gt;0..(5.to_a)&lt;/g3&gt; として解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;Now&lt;/g2&gt; we have two fabulous apps!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184624Z" creationid="makenowjust" creationdate="20200413T184624Z">
        <seg>&lt;g2&gt;今&lt;/g2&gt;、私たちは2つのファビュラスなアプリケーションを実装したのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g2&gt;sleep&lt;/g2&gt; is more useful when spawning more than one fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070717Z" creationid="akiji" creationdate="20200428T080001Z">
        <seg>&lt;g2&gt;sleep&lt;/g2&gt;は、複数のファイバを生成する場合にはさらに有用です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;:inherit:&lt;/g3&gt; can also be used to inject the parent's documentation into additional documentation on the child.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215149Z" creationid="makenowjust" creationdate="20200412T213743Z">
        <seg>&lt;g3&gt;:inherit:&lt;/g3&gt;を子クラスのドキュメントに親クラスのものを挿入するためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt; has some great features: filename autocompletion out of the box; custom autocompletion method; keybinding, just to mention a few.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190259Z" creationid="makenowjust" creationdate="20200413T190259Z">
        <seg>&lt;g3&gt;Readline&lt;/g3&gt;は、ファイル名補完などの自動補完、キーバインディングのカスタマイズなど、様々な機能を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;g3&gt;crystal init app &lt;name&gt;&lt;/g3&gt; is used for an application,
&lt;g4&gt;crystal init lib &lt;name&gt;&lt;/g4&gt; for a library.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153525Z" creationid="makenowjust" creationdate="20200419T153525Z">
        <seg>&lt;g3&gt;crystal init app &lt;name&gt;&lt;/g3&gt;はアプリケーション向けで、
&lt;g4&gt;crystal init lib &lt;name&gt;&lt;/g4&gt;はライブラリ向けです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Chat room&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223215Z" creationid="makenowjust" creationdate="20200413T223105Z">
        <seg>&lt;s0&gt;チャットルーム (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;Code repository&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222939Z" creationid="makenowjust" creationdate="20200413T222939Z">
        <seg>&lt;s0&gt;コードのリポジトリ&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang/crystal&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;General announcements and events&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;@CrystalLanguage&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223200Z" creationid="makenowjust" creationdate="20200413T223200Z">
        <seg>&lt;s0&gt;Twitter アカウント (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;@CrystalLanguage&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;s0&gt;General discussion&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang&lt;/s2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223045Z" creationid="makenowjust" creationdate="20200413T223045Z">
        <seg>&lt;s0&gt;広い議論の場 (英語)&lt;/s0&gt; &lt;i1&gt;&lt;/i1&gt; &lt;s2&gt;crystal-lang&lt;/s2&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&lt;x1/&gt;Screenshot of Crystal playground&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165337Z" creationid="makenowjust" creationdate="20200419T165337Z">
        <seg>&lt;x1/&gt;Crystal プレイグラウンドのスクリーンショット&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>@@counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@counter = 0
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041158Z" creationid="hirofumiwakasugi" creationdate="20150910T041158Z">
        <seg>@@counter = 0
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@default_greeting = "Hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>@@default_greeting = "Hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040811Z" creationid="hirofumiwakasugi" creationdate="20150910T040811Z">
        <seg>@@instances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040810Z" creationid="hirofumiwakasugi" creationdate="20150910T040810Z">
        <seg>@@instances += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@@instances = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040809Z" creationid="hirofumiwakasugi" creationdate="20150910T040809Z">
        <seg>@@instances = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[CallConvention("X86_StdCall")]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074353Z" creationid="hirofumiwakasugi" creationdate="20150919T074353Z">
        <seg>@[CallConvention("X86_StdCall")]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[Raises]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053359Z" creationid="hirofumiwakasugi" creationdate="20151008T053359Z">
        <seg>@[Raises]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@[ThreadLocal]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053859Z" creationid="hirofumiwakasugi" creationdate="20151007T053859Z">
        <seg>@[ThreadLocal]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@a.try do |a|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083406Z" creationid="makenowjust" creationdate="20200424T083406Z">
        <seg>@a.try do |a|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054209Z" creationid="hirofumiwakasugi" creationdate="20150905T054209Z">
        <seg>@address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@address : String?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054237Z" creationid="hirofumiwakasugi" creationdate="20150905T054237Z">
        <seg>@address : String?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055613Z" creationid="hirofumiwakasugi" creationdate="20150904T055613Z">
        <seg>@age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age  : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135145Z" creationid="hirofumiwakasugi" creationdate="20150904T135145Z">
        <seg>@age  : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122229Z" creationid="hirofumiwakasugi" creationdate="20150904T122229Z">
        <seg>@age += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123111Z" creationid="hirofumiwakasugi" creationdate="20150904T123111Z">
        <seg>@age += 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072601Z" creationid="hirofumiwakasugi" creationdate="20150906T072601Z">
        <seg>@age += age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += age.to_i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072846Z" creationid="hirofumiwakasugi" creationdate="20150906T072846Z">
        <seg>@age += age.to_i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += by</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T111217Z" creationid="hirofumiwakasugi" creationdate="20150906T111217Z">
        <seg>@age += by</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += years</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070843Z" creationid="hirofumiwakasugi" creationdate="20150906T070843Z">
        <seg>@age += years</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += years.to_i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071535Z" creationid="hirofumiwakasugi" creationdate="20150906T071535Z">
        <seg>@age += years.to_i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age += yield @age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>@age += yield @age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054237Z" creationid="hirofumiwakasugi" creationdate="20150905T054237Z">
        <seg>@age : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093730Z" creationid="hirofumiwakasugi" creationdate="20150905T093730Z">
        <seg>@age :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@age = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>@age = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg>@horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211727Z" creationid="makenowjust" creationdate="20200412T211727Z">
        <seg>@horns
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@horns
end
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140213Z" creationid="hirofumiwakasugi" creationdate="20151010T140213Z">
        <seg>@horns
end
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>@name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : (String | Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135600Z" creationid="hirofumiwakasugi" creationdate="20150904T135600Z">
        <seg>@name : (String | Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135155Z" creationid="hirofumiwakasugi" creationdate="20150904T135155Z">
        <seg>@name : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135144Z" creationid="hirofumiwakasugi" creationdate="20150904T135144Z">
        <seg>@name : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@name = name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055611Z" creationid="hirofumiwakasugi" creationdate="20150904T055611Z">
        <seg>@name = name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@on_save_callback = block</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>@on_save_callback = block</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@pet : Animal+
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032248Z" creationid="hirofumiwakasugi" creationdate="20150910T032248Z">
        <seg>@pet : Animal+
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055443Z" creationid="hirofumiwakasugi" creationdate="20150912T055443Z">
        <seg>@value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value : (Nil | String | Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060150Z" creationid="hirofumiwakasugi" creationdate="20150912T060150Z">
        <seg>@value : (Nil | String | Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055708Z" creationid="hirofumiwakasugi" creationdate="20150912T055708Z">
        <seg>@value : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@value = new_value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064933Z" creationid="hirofumiwakasugi" creationdate="20150912T064933Z">
        <seg>@value = new_value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>@x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035032Z" creationid="hirofumiwakasugi" creationdate="20150906T035032Z">
        <seg>@x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A "heredoc" is written with `&lt;&lt;-IDENT`, where `IDENT` is an identifier, a sequence of letters and numbers that must start with a letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062113Z" creationid="hirofumiwakasugi" creationdate="20160204T061927Z">
        <seg>ヒアドキュメントは `&lt;&lt;-IDENT` のように書きます。`IDENT` というのは識別子であり、文字と数字の並びによって構成されます。ただし、識別子の最初は文字で開始する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A *falsey* value is a value that is considered false in those places.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T045450Z" creationid="hirofumiwakasugi" creationdate="20150903T005539Z">
        <seg>一方、「偽 (falsey)」の値は、上記で偽 (false) となる値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A *truthy* value is a value that is considered true for an `if`, `unless`, `while` or `until` guard.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T045444Z" creationid="hirofumiwakasugi" creationdate="20150903T005435Z">
        <seg>「真 (truthy)」の値というのは、`if`、`unless`、`while`、そして `until` の条件で真 (true) となる値を指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Char&lt;/g1&gt; represents a 32-bit &lt;g2&gt;Unicode&lt;/g2&gt; &lt;g3&gt;code point&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185658Z" creationid="makenowjust" creationdate="20200419T185658Z">
        <seg>&lt;g1&gt;Char&lt;/g1&gt;は32 bitの&lt;g2&gt;Unicode&lt;/g2&gt;&lt;g3&gt;コードポイント&lt;/g3&gt;を表現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Hash&lt;/g1&gt; is a generic collection of key-value pairs mapping keys of type &lt;g2&gt;K&lt;/g2&gt; to values of type &lt;g3&gt;V&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174939Z" creationid="makenowjust" creationdate="20200420T174912Z">
        <seg>&lt;g1&gt;Hash&lt;/g1&gt;は&lt;g2&gt;K&lt;/g2&gt;型のキーと&lt;g3&gt;V&lt;/g3&gt;型の値のペアの対応付けからなるジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;NamedTuple&lt;/g1&gt; is typically created with a named tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165933Z" creationid="makenowjust" creationdate="20200422T165933Z">
        <seg>&lt;g1&gt;NamedTuple&lt;/g1&gt;は通常名前付きタプルリテラルによって生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Proc&lt;/g1&gt; represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171059Z" creationid="makenowjust" creationdate="20200422T171059Z">
        <seg>&lt;g1&gt;Proc&lt;/g1&gt;は追加のコンテキスト (クロージャ) を持つ関数ポインタです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Range&lt;/g1&gt; represents an interval between two values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033759Z" creationid="makenowjust" creationdate="20200421T033759Z">
        <seg>&lt;g1&gt;Range&lt;/g1&gt;は2つ値の区間を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;String&lt;/g1&gt; represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191432Z" creationid="makenowjust" creationdate="20200419T191432Z">
        <seg>&lt;g1&gt;String&lt;/g1&gt;はUTF-8文字のイミュータブルな列を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Symbol&lt;/g1&gt; represents a unique name inside the entire source code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170817Z" creationid="makenowjust" creationdate="20200420T170817Z">
        <seg>&lt;g1&gt;Symbol&lt;/g1&gt;はソースコード全体でユニークな名前を表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;Tuple&lt;/g1&gt; is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164921Z" creationid="makenowjust" creationdate="20200422T164921Z">
        <seg>&lt;g1&gt;Tuple&lt;/g1&gt;は通常タプルリテラルによって生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;case&lt;/g1&gt; is a control expression which functions a bit like pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090838Z" creationid="makenowjust" creationdate="20200424T090838Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;はパターンマッチのような雰囲気の制御式です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;here document&lt;/g1&gt; or &lt;g2&gt;heredoc&lt;/g2&gt; can be useful for writing strings spanning over multiple lines.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033420Z" creationid="makenowjust" creationdate="20200420T033420Z">
        <seg>&lt;g1&gt;ヒアドキュメント&lt;/g1&gt;ないし&lt;g2&gt;heredoc&lt;/g2&gt;は複数行にまたがる文字列の便利な書き方です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;truthy&lt;/g1&gt; value is a value that is considered true for an &lt;g2&gt;if&lt;/g2&gt;, &lt;g3&gt;unless&lt;/g3&gt;, &lt;g4&gt;while&lt;/g4&gt; or &lt;g5&gt;until&lt;/g5&gt; guard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060419Z" creationid="makenowjust" creationdate="20200424T060419Z">
        <seg>&lt;g1&gt;真になる&lt;/g1&gt;値というのは、&lt;g2&gt;if&lt;/g2&gt;、&lt;g3&gt;unless&lt;/g3&gt;、&lt;g4&gt;while&lt;/g4&gt;、そして&lt;g5&gt;until&lt;/g5&gt;の条件で真 (true) となる値を指します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;while&lt;/g1&gt; executes its body as long as its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095554Z" creationid="makenowjust" creationdate="20200424T094708Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;は条件式が&lt;g2&gt;真となる&lt;/g2&gt;間は繰り返して本体を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g1&gt;while&lt;/g1&gt;'s type is always &lt;g2&gt;Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094808Z" creationid="makenowjust" creationdate="20200424T094808Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;の型が常に&lt;g2&gt;Nil&lt;/g2&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g3&gt;lib&lt;/g3&gt; is a reusable library whereas &lt;g4&gt;app&lt;/g4&gt; describes
an application not intended to be used as a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161301Z" creationid="makenowjust" creationdate="20200419T161301Z">
        <seg>&lt;g3&gt;lib&lt;/g3&gt;は再利用可能なライブラリで、&lt;g4&gt;app&lt;/g4&gt;は依存関係に含めることのないアプリケーションであることを意図しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A &lt;g6&gt;falsey&lt;/g6&gt; value is a value that is considered false in those places.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060502Z" creationid="makenowjust" creationdate="20200424T060502Z">
        <seg>一方、&lt;g6&gt;偽になる&lt;/g6&gt;値は、上記で偽 (false) となる値です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A = 1_u32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053221Z" creationid="hirofumiwakasugi" creationdate="20151007T053221Z">
        <seg>A = 1_u32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C struct is passed by value (as a copy) to functions and methods, and also passed by value when it is returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051836Z" creationid="hirofumiwakasugi" creationdate="20151007T051635Z">
        <seg>C の構造体は関数やメソッドに (コピーとして) 値渡しされます。また、メソッドから返るときも値で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C struct starts with all its fields set to "zero": integers and floats start at zero, pointers start with an address of zero, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050222Z" creationid="hirofumiwakasugi" creationdate="20151007T050017Z">
        <seg>C の構造体は、初期状態として、すべての値が「ゼロ」の状態になります。つまり、整数と浮動小数点数はゼロで、ポインタはゼロのアドレスを指している、などの状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C union is passed by value (as a copy) to functions and methods, and also passed by value when it is returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052326Z" creationid="hirofumiwakasugi" creationdate="20151007T052326Z">
        <seg>C の共用体は関数やメソッドに (コピーとして) 値渡しされます。また、メソッドから返るときも値で渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A C union starts with all its fields set to "zero": integers and floats start at zero, pointers start with an address of zero, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052256Z" creationid="hirofumiwakasugi" creationdate="20151007T052256Z">
        <seg>C の共用体は、初期状態として、すべての値が「ゼロ」の状態になります。つまり、整数と浮動小数点数はゼロで、ポインタはゼロのアドレスを指している、などの状態です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Complete Example</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215311Z" creationid="makenowjust" creationdate="20200412T215311Z">
        <seg>全体の例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Crystal program executes in a single operating system thread, except the Garbage Collector (GC) which implements a concurrent mark-and-sweep (currently &lt;g1&gt;Boehm GC&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T113141Z" creationid="akiji" creationdate="20200428T054020Z">
        <seg>コンカレント・マーク＆スイープ方式で実装されたガベージコレクタ（GC）（現時点では&lt;g1&gt;Boehm GC&lt;/g1&gt;）を除いて、Crystalのプログラムは単一のOSスレッド上で実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Fiber</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150538Z" creationid="akiji" creationdate="20200428T055816Z">
        <seg>ファイバ単体</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Fiber is much more lightweight than a thread: even though it's assigned 8MB, it starts with a small stack of 4KB.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062627Z" creationid="akiji" creationdate="20200428T062627Z">
        <seg>ファイバはスレッドと比べて軽量で、8MB割り当てられていてもその開始時には4KBという小さなスタック領域しか使用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Hash can have mixed types, both for the keys and values, meaning `K`/`V` will be union types, but these are determined when the hash is created, either by specifying `K` and `V` or by using a hash literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010300Z" creationid="hirofumiwakasugi" creationdate="20150901T141745Z">
        <seg>ハッシュは異なる型を持つことが可能です。これは `K`/`V` それぞれが複数の型の組み合わせ (ユニオン型) となることを意味しています。ただ、それらの型はハッシュが作られたときに決定されます。つまり、ハッシュの生成時に明示的に指定された `K` と `T` か、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Proc can be created from an existing method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022254Z" creationid="hirofumiwakasugi" creationdate="20150902T022048Z">
        <seg>既存のメソッドから Proc を作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A Regex is typically created with a regex literal using &lt;g1&gt;PCRE&lt;/g1&gt; syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040449Z" creationid="makenowjust" creationdate="20200421T040449Z">
        <seg>正規表現には&lt;g1&gt;PCRE&lt;/g1&gt;の構文を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A String is typically created with a string literal enclosing UTF-8 characters in double quotes (&lt;g1&gt;"&lt;/g1&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191537Z" creationid="makenowjust" creationdate="20200419T191537Z">
        <seg>通常、ダブルクォート (&lt;g1&gt;"&lt;/g1&gt;) で囲まれたUTF-8でエンコードされた文字の並びで文字列リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A String is typically created with a string literal, enclosing UTF-8 characters in double quotes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081024Z" creationid="hirofumiwakasugi" creationdate="20150901T081024Z">
        <seg>通常、ダブルクォートで囲んだ UTF-8 文字の並びで文字列リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Char](http://crystal-lang.org/api/Char.html) represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080922Z" creationid="hirofumiwakasugi" creationdate="20150901T074147Z">
        <seg>文字 ([Char](http://crystal-lang.org/api/Char.html)) は [Unicode](http://en.wikipedia.org/wiki/Unicode) の[コードポイント](http://en.wikipedia.org/wiki/Code_point)を表したもので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Hash](http://crystal-lang.org/api/Hash.html) representing a mapping of keys of a type `K` to values of a type `V`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140843Z" creationid="hirofumiwakasugi" creationdate="20150901T140718Z">
        <seg>ハッシュ ([Hash](http://crystal-lang.org/api/Hash.html)) は、`K` 型のキーと `V` 型の値のマッピングを表現するための型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Proc](http://crystal-lang.org/api/Proc.html) represents a function pointer with an optional context (the closure data).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021022Z" creationid="hirofumiwakasugi" creationdate="20150902T021022Z">
        <seg>[Proc](http://crystal-lang.org/api/Proc.html) は関数ポインタを表すオブジェクトで、追加のコンテキスト (クロージャ) を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Range](http://crystal-lang.org/api/Range.html) is typically constructed with a range literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T014408Z" creationid="hirofumiwakasugi" creationdate="20150902T014234Z">
        <seg>範囲 ([Range](http://crystal-lang.org/api/Range.html)) オブジェクトを作るには範囲リテラルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [String](http://crystal-lang.org/api/String.html) represents an immutable sequence of UTF-8 characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080913Z" creationid="hirofumiwakasugi" creationdate="20150901T080913Z">
        <seg>文字列 ([String](http://crystal-lang.org/api/String.html)) は UTF-8 の文字の不変 (イミュータブル) なシーケンスを表したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Symbol](http://crystal-lang.org/api/Symbol.html) is a constant that is identified by a name without you having to give it a numeric value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022842Z" creationid="hirofumiwakasugi" creationdate="20150901T131055Z">
        <seg>シンボル ([Symbol](http://crystal-lang.org/api/Symbol.html)) というのは、数値を与えることなく、その名前で識別することが可能な定数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A [Tuple](http://crystal-lang.org/api/Tuple.html) is typically created with a tuple literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020837Z" creationid="hirofumiwakasugi" creationdate="20150902T020742Z">
        <seg>タプル ([Tuple](http://crystal-lang.org/api/Tuple.html)) を作るには、以下のタプルリテラルを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `Person` has a name and an age.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022759Z" creationid="hirofumiwakasugi" creationdate="20150904T022754Z">
        <seg>`Person` は名前 (name) と年齢 (age) を持つことにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `break` expression inside a block exits early from the method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024338Z" creationid="hirofumiwakasugi" creationdate="20150916T024338Z">
        <seg>ブロックの中に `break` 式があるとそこでメソッドを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `case` is a control expression that allows a sort of pattern matching.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023256Z" creationid="hirofumiwakasugi" creationdate="20150903T022953Z">
        <seg>`case` を使うと、パターンマッチングを利用した条件によって制御を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `fun` declaration inside a `lib` binds to a C function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143646Z" creationid="hirofumiwakasugi" creationdate="20151003T143615Z">
        <seg>`lib` の中で`fun` を宣言すると、C 関数へのバインディングとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `lib` declaration groups C functions and types that belong to a library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142255Z" creationid="hirofumiwakasugi" creationdate="20151003T142251Z">
        <seg>`lib` の宣言によって、C ライブラリの関数群や型をグループ化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `module` can include other modules, so when a method is not found in it it will be looked up in the included modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140733Z" creationid="hirofumiwakasugi" creationdate="20150911T140703Z">
        <seg>`module` が別のモジュールをインクルードすることも可能です。したがって、モジュールにメソッドが見つからなかった場合は、インクルードされたモジュールの中を探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `private` method can only be invoked without a receiver, that is, without something before the dot:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032643Z" creationid="hirofumiwakasugi" creationdate="20150909T032505Z">
        <seg>`private` メソッドはレシーバの指定なしでのみ実行可能です。つまり、ドットを使わない形でしか実行できないということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `private` top-level method is only visible in the current file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040817Z" creationid="hirofumiwakasugi" creationdate="20150909T040759Z">
        <seg>トップレベルに定義された `private` メソッドはそのファイルの中でのみ見えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `protected` class method can be invoked from an instance method and the other way around:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T042829Z" creationid="hirofumiwakasugi" creationdate="20150909T033751Z">
        <seg>`protected` のクラスメソッドはインスタンスメソッドから実行することが可能で、その反対の場合も同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `protected` method can only be invoked on instances of the same type as the current type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033248Z" creationid="hirofumiwakasugi" creationdate="20150909T032835Z">
        <seg>`protected` メソッドは、その型と同一の型のインスタンスに対してのみ実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `struct` declaration inside a `lib` declares a C struct.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052154Z" creationid="hirofumiwakasugi" creationdate="20151007T045546Z">
        <seg>`lib` の内部で `struct` を宣言することで C の構造体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `type` declaration inside a `lib` declares a kind of C `typedef`, but stronger:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023028Z" creationid="hirofumiwakasugi" creationdate="20151008T022202Z">
        <seg>`lib` 宣言の内部で `type` を宣言すると、C の `typedef` の宣言に近いことができます。ただし、より厳密です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `union` declaration inside a `lib` declares a C union:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052146Z" creationid="hirofumiwakasugi" creationdate="20151007T052108Z">
        <seg>`lib` の内部で `union` を宣言することで C の共用体を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `while` executes its body as long as its condition is *truthy*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052044Z" creationid="hirofumiwakasugi" creationdate="20150905T052044Z">
        <seg>`while` は、与えられた条件が「真」である間はずっと、その本体を繰り返し実行し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `while`'s type is always `Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052107Z" creationid="hirofumiwakasugi" creationdate="20150905T052107Z">
        <seg>`while` の型は常に `Nil` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `yield` expression can be modified, using the `with` keyword, to specify an object to use as the default receiver of method calls within the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030935Z" creationid="hirofumiwakasugi" creationdate="20150916T030444Z">
        <seg>`yield` 式に `with` キーワードを使うと、ブロック内でメソッドを実行する際にデフォルトのレシーバとなるオブジェクトを指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A `yield` expression's value is mostly useful for transforming and filtering values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023657Z" creationid="hirofumiwakasugi" creationdate="20150916T023640Z">
        <seg>`yield` 式の値は、主に値の変換やフィルタリングの際に有効に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash can be used to denote some characters inside the string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081044Z" creationid="hirofumiwakasugi" creationdate="20150901T081044Z">
        <seg>文字列中のいくつかの文字はバックスラッシュを使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash denotes a special character inside a string, which can either be a named escape sequence or a numerical representation of a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191704Z" creationid="makenowjust" creationdate="20200419T191704Z">
        <seg>文字列中では、バックスラッシュによる名前つきのエスケープシーケンスやコードポイントの数値表現によって、特別な文字を記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash denotes a special character, which can either be a named escape sequence or a numerical representation of a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190155Z" creationid="makenowjust" creationdate="20200419T185928Z">
        <seg>バックスラッシュによる名前つきのエスケープスーケンスかコードポイントの数値表現で、特別な文字を記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash followed by a &lt;g1&gt;u&lt;/g1&gt; denotes a unicode codepoint.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190151Z" creationid="makenowjust" creationdate="20200419T190151Z">
        <seg>バックスラッシュに&lt;g1&gt;u&lt;/g1&gt;を続けることでユニコードのコードポイントを記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A backslash followed by at most three digits ranging from 0 to 7 denotes a code point written in octal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192018Z" creationid="makenowjust" creationdate="20200419T192018Z">
        <seg>バックスラッシュに続く最大3つの0から7までの数値は、8進数によるコードポイントの記述となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A basic spec looks something like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T124533Z" creationid="akiji" creationdate="20200505T124533Z">
        <seg>基本の spec はこのうような感じになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can also specify more than the arguments yielded, and these will be `nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022920Z" creationid="hirofumiwakasugi" creationdate="20150916T022546Z">
        <seg>ブロックに指定するのが yield される引数の数より多い場合には、それらは `nil` になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can be captured and turned into a `Proc`, which represents a block of code with an associated context: the closured data.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061838Z" creationid="hirofumiwakasugi" creationdate="20150916T035735Z">
        <seg>ブロックを捕捉して `Proc` にすることができます (captured block) 。 これはコンテキストに結びついたコードブロック (クロージャ) を表現するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A block can specify less than the arguments yielded:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022851Z" creationid="hirofumiwakasugi" creationdate="20150916T022441Z">
        <seg>ブロックに指定するのが yield される引数の数より少なくても構いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A captured block is the same as declaring a [Proc literal](literals/proc.html) and [passing](block_forwarding.html) it to the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061637Z" creationid="hirofumiwakasugi" creationdate="20150917T022136Z">
        <seg>捕捉されたブロック (captured block) は、[Proc リテラル](literals/proc.html) を宣言してメソッドに[渡す](block_forwarding.html)ことと等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class implicitly inherits from [Reference](http://crystal-lang.org/api/Reference.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054141Z" creationid="hirofumiwakasugi" creationdate="20150913T053929Z">
        <seg>一方クラスは [Reference](http://crystal-lang.org/api/Reference.html) を継承する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class inherits all instance variables and all instance and class methods of a superclass, including its constructors (`new` and `initialize`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161616Z" creationid="hirofumiwakasugi" creationdate="20150910T023523Z">
        <seg>クラスを継承したとき、すべてのインスタンス変数、およびインスタンスメソッドとクラスメソッドがスーパークラスから引き継がれます。その中にはコンストラクタ (`new` と `initialize`) も含まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A class is a blueprint from which individual objects are created.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021948Z" creationid="hirofumiwakasugi" creationdate="20150904T021838Z">
        <seg>クラスはオブジェクトの設計図であり、それを使って、それぞれの独立したオブジェクトを作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A command literal is a string delimited by backticks &lt;g1&gt; ` &lt;/g1&gt; or a &lt;g2&gt;%x&lt;/g2&gt; percent literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172434Z" creationid="makenowjust" creationdate="20200422T172434Z">
        <seg>コマンドリテラルとは、バックティック &lt;g1&gt; ` &lt;/g1&gt; で囲まれた文字列、もしくは &lt;g2&gt;%x&lt;/g2&gt; パーセントリテラルのことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using &lt;g1&gt;:&lt;/g1&gt; is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162834Z" creationid="makenowjust" creationdate="20200413T162834Z">
        <seg>また、コメントの&lt;g1&gt;:&lt;/g1&gt;は変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using `::` is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072402Z" creationid="hirofumiwakasugi" creationdate="20150901T072358Z">
        <seg>また、コメントの `::` は、変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A comment using `:` is used for showing the type of a variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061331Z" creationid="hirofumiwakasugi" creationdate="20160204T061331Z">
        <seg>また、コメントの `:` は、変数の型を示すために利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common pattern for modules is `extend self`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142630Z" creationid="hirofumiwakasugi" creationdate="20150911T142630Z">
        <seg>モジュールでよく使われるパターンに `extend self` というものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A common technique is to use backticks to execute commands: ``@[Link(ldflags: "`pkg-config libpcre --libs`")]``.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143336Z" creationid="hirofumiwakasugi" creationdate="20151003T143336Z">
        <seg>よく使われるテクニックとして、バックティック (バッククォート) を活用してコマンドを実行するものがあります。``@[Link(ldflags: "`pkg-config libpcre --libs`")]``.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A concurrent system is one that can be in charge of many tasks, although not necessarily it is executing them at the same time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T145825Z" creationid="akiji" creationdate="20200428T053535Z">
        <seg>並行処理システム（concarrent system）はいくつものタスクを扱えるシステムの1種ではありますが、必ずしもそれらのタスクが同時に実行される必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A constant definition can invoke methods and have complex logic:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055806Z" creationid="hirofumiwakasugi" creationdate="20150913T055730Z">
        <seg>定数を定義する際にメソッドを実行したり、複雑なロジックを使って定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A curly braces notation is also available:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021059Z" creationid="hirofumiwakasugi" creationdate="20150916T020754Z">
        <seg>波カッコを使った指定も可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A default file can be created by running &lt;g3&gt;&lt;g4&gt;shards init&lt;/g4&gt;&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173723Z" creationid="makenowjust" creationdate="20200419T173723Z">
        <seg>デフォルトのファイルは&lt;g3&gt;&lt;g4&gt;shards init&lt;/g4&gt;&lt;/g3&gt;を実行することで生成できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A double-quoted identifier can contain any unicode character including white spaces and accepts the same escape sequences as a &lt;g1&gt;string literal&lt;/g1&gt;, yet no interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171238Z" creationid="makenowjust" creationdate="20200420T171238Z">
        <seg>ダブルクォートで囲まれた識別子は空白を含む任意のユニコード文字を含むことができて、&lt;g1&gt;文字列リテラル&lt;/g1&gt;で利用できるものと同じエスケープシーケンスを受け付けますが、補間はできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A dummy transformation method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024142Z" creationid="hirofumiwakasugi" creationdate="20150916T023809Z">
        <seg>1つ簡単な変換メソッドを例にあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber is an execution unit that is more lightweight than a thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055854Z" creationid="akiji" creationdate="20200428T055854Z">
        <seg>単一のファイバは、スレッドと比べるとより軽量な処理の実行単位です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber is in a way similar to an operating system thread except that it's much more lightweight and its execution is managed internally by the process.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064844Z" creationid="akiji" creationdate="20200428T054214Z">
        <seg>ファイバはOSスレッドとよく似ていますがより軽量で、その実行はプロセスによって内部的に管理されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A fiber must explicitly tell the Runtime Scheduler to switch to another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065835Z" creationid="akiji" creationdate="20200428T062234Z">
        <seg>ファイバはラインタイムスケジューラに対して、明示的に「他のファイバへ処理を切り替えて良い」と伝える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A filename can be suffixed by &lt;g4&gt;:&lt;/g4&gt;
and a line number, providing this location to the &lt;g5&gt;--location&lt;/g5&gt; runner option (see below).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164251Z" creationid="makenowjust" creationdate="20200419T164105Z">
        <seg>すべてのファイル名は&lt;g4&gt;:&lt;/g4&gt;と行番号をあとに続けることで、spec ランナーに対して &lt;g5&gt;--location&lt;/g5&gt; で指定する場合と同様の指定ができます (この後に詳細)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating point literal is an optional &lt;g1&gt;+&lt;/g1&gt; or &lt;g2&gt;-&lt;/g2&gt; sign, followed by
a sequence of numbers or underscores, followed by a dot,
followed by numbers or underscores, followed by an optional exponent suffix,
followed by an optional type suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183059Z" creationid="makenowjust" creationdate="20200419T183003Z">
        <seg>浮動小数点リテラルは &lt;g1&gt;+&lt;/g1&gt; (オプション) または &lt;g2&gt;-&lt;/g2&gt; 符号に続く数値とアンダースコアからなり、さらに指数部分と型を表わすサフィックスを続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A floating point literal is an optional `+` or `-` sign, followed by
a sequence of numbers or underscores, followed by a dot,
followed by numbers or underscores, followed by an optional exponent suffix,
followed by an optional type suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080637Z" creationid="hirofumiwakasugi" creationdate="20150901T073559Z">
        <seg>浮動小数点数リテラルは、`+` (オプション) または `-` 符号に続く数値とアンダースコア、そしてドット (`.`) と、またそれに続く数値とアンダースコアによって記述し、オプションで指数と型のサフィックスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A free variable can be used to extract the type parameter of a generic type within a type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072356Z" creationid="hirofumiwakasugi" creationdate="20150908T035149Z">
        <seg>自由変数は、型制約でジェネリック型を指定する場合に、そのパラメータの型を展開することにも使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A heredoc generally allows interpolation and escapes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034100Z" creationid="makenowjust" creationdate="20200420T034100Z">
        <seg>ヒアドキュメントの中では一般的に補間とエスケープが有効になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A heredoc is denoted by &lt;g3&gt;&lt;&lt;-&lt;/g3&gt; followed by an heredoc identifier which is an alphanumeric sequence starting with a letter (and may include underscores).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033737Z" creationid="makenowjust" creationdate="20200420T033523Z">
        <seg>ヒアドキュメントは&lt;g3&gt;&lt;&lt;-&lt;/g3&gt;とそれに続くアルファベットと数字 (アンダースコアも含めることができる) の並びの識別子によって記述されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A library doesn't have a &lt;g5&gt;shard.lock&lt;/g5&gt; file
in its repository and no build target in &lt;g6&gt;shard.yml&lt;/g6&gt;, but instructions for using it as a dependency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161500Z" creationid="makenowjust" creationdate="20200419T161500Z">
        <seg>ライブラリは自身のリポジトリに&lt;g5&gt;shard.lock&lt;/g5&gt;を含めず、&lt;g6&gt;shard.yml&lt;/g6&gt;にビルド目標を持ちませんが、依存関係としてどのように利用するかの説明があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A literal denoted by &lt;g1&gt;%q&lt;/g1&gt; does not apply interpolation nor escapes while &lt;g2&gt;%Q&lt;/g2&gt; has the same meaning as &lt;g3&gt;%&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193619Z" creationid="makenowjust" creationdate="20200419T193619Z">
        <seg>&lt;g1&gt;%q&lt;/g1&gt;で記述される文字列リテラルは、文字列の補間とエスケープを受け付けません。また&lt;g2&gt;%Q&lt;/g2&gt;は&lt;g3&gt;%&lt;/g3&gt;と同じ意味を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro can accept variadic arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040735Z" creationid="hirofumiwakasugi" creationdate="20151001T040735Z">
        <seg>マクロは可変長引数を受け取ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A macro's definition body looks like regular Crystal code with
extra syntax to manipulate the AST nodes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014910Z" creationid="hirofumiwakasugi" creationdate="20151001T014910Z">
        <seg>マクロ定義の本体はほぼ通常の Crystal コードですが、AST ノードを扱うための特別なシンタックスを利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can receive a variable number of arguments by using a *splat* (`*`), which can appear only once and in any position:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042349Z" creationid="hirofumiwakasugi" creationdate="20150907T042024Z">
        <seg>メソッドは、「splat 展開 (`*`)」を使うことで複数の引数を一度に受け取ることができます。これは仮引数の中で1回だけしか指定できませんが、順序を問わずどの場所にでも指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method can specify default values for the last arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T112805Z" creationid="hirofumiwakasugi" creationdate="20150906T073843Z">
        <seg>メソッドの引数にはデフォルト値を設定することができます。デフォルト値のある引数を複数指定することもできますが、「1. デフォルト値のない引数」そして「2. デフォルト値のある引数」の順序でのみ指定可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method invocation that ends with &lt;g1&gt;=&lt;/g1&gt; has syntax sugar:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174431Z" creationid="makenowjust" creationdate="20200422T174431Z">
        <seg>メソッド名が &lt;g1&gt;=&lt;/g1&gt; で終わるメソッドの実行にもシンタックスシュガーがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method invocation that ends with `=` has syntax sugar:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054634Z" creationid="hirofumiwakasugi" creationdate="20150902T054634Z">
        <seg>メソッド名が `=` で終わるメソッドの実行にもシンタックスシュガーがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method's return type is always inferred by the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024341Z" creationid="hirofumiwakasugi" creationdate="20150909T024246Z">
        <seg>メソッドの戻り値の型は、コンパイラの型推論によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A method's value is the value of its last expression, there's no need for explicit `return` expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024732Z" creationid="hirofumiwakasugi" creationdate="20150904T015217Z">
        <seg>メソッドでは、その最後の式の値がメソッドの値となります。したがって、明示的に `return` を書く必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A module cannot be instantiated:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150636Z" creationid="hirofumiwakasugi" creationdate="20150911T150636Z">
        <seg>モジュールをインスタンス化することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A named tuple key can also be a string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170054Z" creationid="makenowjust" creationdate="20200422T170054Z">
        <seg>名前付きタプルのキーには文字列リテラルを使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A proc can optionally specify a receiver:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022250Z" creationid="hirofumiwakasugi" creationdate="20150902T022250Z">
        <seg>レシーバを指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A range that is both begin-less and end-less is valid and can be expressed as &lt;g1&gt;..&lt;/g1&gt; or &lt;g2&gt;...&lt;/g2&gt; but it's typically not very useful.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035825Z" creationid="makenowjust" creationdate="20200421T035825Z">
        <seg>&lt;g1&gt;..&lt;/g1&gt; や &lt;g2&gt;...&lt;/g2&gt; のような begin-less かつ end-less な範囲もリテラルとして有効ですが、あまり使いどころはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A real-world example of a recursive type is json:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071427Z" creationid="hirofumiwakasugi" creationdate="20150919T071400Z">
        <seg>再帰的な型として実際に扱うことになる例は JSON でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A regular expression literal is delimited by `/` and uses [PCRE](http://pcre.org/pcre.txt) syntax.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015819Z" creationid="hirofumiwakasugi" creationdate="20150902T015819Z">
        <seg>正規表現リテラルは `/` で区切られ、[PCRE](http://pcre.org/pcre.txt) の記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A short syntax exists for specifying a block that receives a single argument and invokes a method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153009Z" creationid="hirofumiwakasugi" creationdate="20160115T153009Z">
        <seg>ブロックが単一の引数を受け取り、それに対してメソッドを実行する場合には短縮記法を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A simple example of this is waiting for data to come through a socket.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065200Z" creationid="akiji" creationdate="20200428T055118Z">
        <seg>ソケット経由でのデータの受信操作などは、こうした時間がかかる処理の一例です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A slightly more interesting example is an HTTP Server:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072545Z" creationid="hirofumiwakasugi" creationdate="20150901T072545Z">
        <seg>もう少し興味深いプログラムを見てみましょう。こちらは HTTP サーバーの例になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special &lt;g1&gt;new&lt;/g1&gt; method is provided too:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171400Z" creationid="makenowjust" creationdate="20200422T171314Z">
        <seg>また、&lt;g1&gt;new&lt;/g1&gt; を使って Proc を作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special `new` method is provided too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021805Z" creationid="hirofumiwakasugi" creationdate="20150902T021455Z">
        <seg>また、`new` メソッドを使って作ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special notation allows creating hashes with string keys:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143006Z" creationid="hirofumiwakasugi" creationdate="20150901T143006Z">
        <seg>キーが文字列である場合は、以下の特別な記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special notation allows creating hashes with symbol keys:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142945Z" creationid="hirofumiwakasugi" creationdate="20150901T142743Z">
        <seg>キーがシンボルである場合は、以下の特別な記法を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A special type restriction is `self`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023324Z" creationid="hirofumiwakasugi" creationdate="20150908T022636Z">
        <seg>型制約には `self` を使った特別な指定方法があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string can span multiple lines:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081302Z" creationid="hirofumiwakasugi" creationdate="20150901T081302Z">
        <seg>文字列は複数の行にまたがって記述することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A string literal with interpolation allows to embed expressions into the string which will be expanded at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192334Z" creationid="makenowjust" creationdate="20200419T192334Z">
        <seg>補間を伴う文字列リテラルは、文字列に実行時に展開される式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct can be generic, just like a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054242Z" creationid="hirofumiwakasugi" creationdate="20150913T054242Z">
        <seg>また、クラスと同様に、構造体をジェネリック型にすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct can inherit from other structs and can also includes modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054217Z" creationid="hirofumiwakasugi" creationdate="20150913T054217Z">
        <seg>構造体は他の構造体を継承することができ、モジュールをインクルードすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A struct is mostly used for performance reasons to avoid lots of small memory allocations when passing small copies might be more efficient.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054544Z" creationid="hirofumiwakasugi" creationdate="20150913T054332Z">
        <seg>構造体を使うのは主にパフォーマンス上の理由からです。小さいコピーを渡す方がより効率的である場合には、構造体を使うことで、わずかなメモリの割り当てが大量に発生することを避けられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A variable can be marked as thread local with an attribute:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053859Z" creationid="hirofumiwakasugi" creationdate="20151007T053828Z">
        <seg>変数は属性を付与することでスレッドローカルにすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Abstract methods can also be defined in modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040257Z" creationid="hirofumiwakasugi" creationdate="20150910T040131Z">
        <seg>モジュールにも abstract メソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Acronyms</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203808Z" creationid="makenowjust" creationdate="20200412T203808Z">
        <seg>頭字語 (Acronyms)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Adding a page</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165022Z" creationid="makenowjust" creationdate="20200413T164726Z">
        <seg>ページの追加方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if a program is compiled with `--release`, the `release` flag will be true.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043140Z" creationid="hirofumiwakasugi" creationdate="20150908T043118Z">
        <seg>また、`--release` オプションをつけてプログラムをコンパイルした場合には、`release` フラグが true になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if the case expression is a variable or a variable assignment the type of the variable is restricted:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091733Z" creationid="hirofumiwakasugi" creationdate="20151001T010025Z">
        <seg>そして、case 式が変数、もしくは変数への代入であるとき、その変数の型に対して制約が加えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, if your program reads a global variable before it was ever assigned a value it will also have the `Nil` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053832Z" creationid="hirofumiwakasugi" creationdate="20150902T053832Z">
        <seg>また、それまでに何も代入されていないグローバル変数をプログラムが読み込んだとき、その値は常に `Nil` 型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the &lt;g1&gt;else&lt;/g1&gt; branch the type of the variable is guaranteed to be restricted to the types that don’t respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084006Z" creationid="makenowjust" creationdate="20200424T084006Z">
        <seg>くわえて、&lt;g1&gt;else&lt;/g1&gt;節では変数がそのメソッドを持たないような型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the &lt;g1&gt;else&lt;/g1&gt; branch the type of the variable is guaranteed to not be restricted by that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082956Z" creationid="makenowjust" creationdate="20200424T082956Z">
        <seg>くわえて、&lt;g1&gt;else&lt;/g1&gt;節では変数がそれ以外の型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the `else` branch the type of the variable is guaranteed to be restricted to the types that don’t respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030354Z" creationid="hirofumiwakasugi" creationdate="20150903T030354Z">
        <seg>一方このとき、`else` 節の中ではそのメソッドに応答「しない」型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, in the `else` branch the type of the variable is guaranteed to not be restricted by that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025926Z" creationid="hirofumiwakasugi" creationdate="20150903T021901Z">
        <seg>一方このとき、`else` 節の中ではチェックした型「ではない」ことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, it provides some conveniences like `out` and `to_unsafe` so writing bindings is as painless as possible.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T164407Z" creationid="hirofumiwakasugi" creationdate="20151003T141859Z">
        <seg>さらに、`out` や `to_unsafe` といった便利なものを用意しているので、可能な限り楽にバインディングを書けるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, some `Enum` methods check the `@[Flags]` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T010753Z" creationid="hirofumiwakasugi" creationdate="20150915T051626Z">
        <seg>さらに、`Enum` のメソッドには、`@[Flags]` によって振る舞いを変えるものがいくつかあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, the empty-tuple doesn't match any of the above cases.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030129Z" creationid="hirofumiwakasugi" creationdate="20150908T030129Z">
        <seg>また、空のタプルは上記の例ではマッチしません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionally, you can declare fresh variables related to some other AST node using `%var{key1, key2, ..., keyN}`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044659Z" creationid="hirofumiwakasugi" creationdate="20151002T020202Z">
        <seg>また、`%var{key1, key2, ..., keyN}` を使うことで、他の AST ノードに結びついたフレッシュな変数を宣言することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Additionaly, using `*` when interpolating an `ArrayLiteral` interpolates the elements separated by commas:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040858Z" creationid="hirofumiwakasugi" creationdate="20151001T040740Z">
        <seg>さらに、`ArrayLiteral` を埋め込む際に `*` を使うと、要素がカンマで分割されて埋め込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an &lt;g1&gt;if&lt;/g1&gt;, a variable’s type depends on the type of the expressions used in both branches.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075832Z" creationid="makenowjust" creationdate="20200424T074558Z">
        <seg>ある変数が&lt;g1&gt;if&lt;/g1&gt;の分岐節の中で使われたとき、その後の変数の型は分岐節の中での使われ方に依存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After an `if`, a variable’s type depends on the type of the expressions used in both branches.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025750Z" creationid="hirofumiwakasugi" creationdate="20150903T011247Z">
        <seg>ある変数が `if` の分岐節の中で使われたとき、その型は評価された式によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing &lt;g3&gt;next&lt;/g3&gt;, the &lt;g4&gt;while&lt;/g4&gt;'s condition is checked and, if &lt;g5&gt;truthy&lt;/g5&gt;, the body will be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095900Z" creationid="makenowjust" creationdate="20200424T095900Z">
        <seg>&lt;g3&gt;next&lt;/g3&gt;が実行されたあと、&lt;g4&gt;while&lt;/g4&gt;の条件がチェックされ、&lt;g5&gt;真となれば&lt;/g5&gt;本体が再度実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After executing `next`, the `while`'s condition is checked and, if *truthy*, the body will be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052324Z" creationid="hirofumiwakasugi" creationdate="20150905T052324Z">
        <seg>`next` が実行された後、`while` の条件がチェックされ、もしそれが「真」であれば本体が再度実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>After the block is executed, the parser will start consuming the arguments passed to the application, trying to match each one with the options defined by us.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173418Z" creationid="makenowjust" creationdate="20200413T173418Z">
        <seg>ブロックが実行されたのち、オプションパーサーがアプリケーションに渡された引数を処理して、定義したオプションにマッチするかを確認します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, the solution is to use a type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065427Z" creationid="hirofumiwakasugi" creationdate="20150912T065427Z">
        <seg>対策はやはり型制約を利用することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ah!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182533Z" creationid="makenowjust" creationdate="20200413T182533Z">
        <seg>つまり、こういうことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Aliases are useful to avoid writing long type names, but also to be able to talk about recursive types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071328Z" creationid="hirofumiwakasugi" creationdate="20150919T071303Z">
        <seg>エイリアスを使うと長い名前の型を書かずに済むので便利です。しかし、それだけではなく、再帰的な型を扱うときにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All &lt;g1&gt;Crystal operators&lt;/g1&gt; can be used as symbol names unquoted:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171630Z" creationid="makenowjust" creationdate="20200420T171630Z">
        <seg>すべての&lt;g1&gt;Crystal の演算子&lt;/g1&gt;もシンボルのダブルクォートで囲われていない識別子として有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All &lt;g1&gt;files&lt;/g1&gt; arguments are concatenated into a single Crystal source.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163823Z" creationid="makenowjust" creationdate="20200419T163823Z">
        <seg>&lt;g1&gt;files&lt;/g1&gt;引数で指定されたすべてのファイルは1つの Crystal ソースコードとして結合されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All My CLI: The complete application!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183447Z" creationid="makenowjust" creationdate="20200413T180300Z">
        <seg>All My CLI: 完成した CLI アプリケーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All enums inherit from [Enum](http://crystal-lang.org/api/Enum.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024729Z" creationid="hirofumiwakasugi" creationdate="20150914T024722Z">
        <seg>すべての Enum は [Enum](http://crystal-lang.org/api/Enum.html) を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All files inside the root `src` directory will be considered.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144811Z" creationid="hirofumiwakasugi" creationdate="20151010T144503Z">
        <seg>対象となるのは、ルートの `src` ディレクトリ内に含まれるすべてのファイルです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All of these are equivalent:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014845Z" creationid="hirofumiwakasugi" creationdate="20150916T014756Z">
        <seg>以下はすべて同等のコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All options following the command are delegated to &lt;g1&gt;crystal build&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180329Z" creationid="makenowjust" creationdate="20200419T180329Z">
        <seg>コマンドに続くすべてのオプションは&lt;g1&gt;crystal build&lt;/g1&gt;に渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All specs of a project are compiled and executed through the command &lt;g2&gt;crystal spec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T235035Z" creationid="akiji" creationdate="20200516T102823Z">
        <seg>&lt;g2&gt;crystal spec&lt;/g2&gt;コマンドでは、プロジェクト内の全てのspecがコンパイルされて実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>All types are non-nilable in Crystal, and nilable variables are represented as a union between the type and nil.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211444Z" creationid="makenowjust" creationdate="20200413T211444Z">
        <seg>Crystal ではすべての型は nil を許容しません。そして nil を許容する変数は、その型と nil とのユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Allows marking a [C struct](c_bindings/struct.html) as packed, which makes the alignment of the struct to be one byte, and that there is no padding between the elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072942Z" creationid="hirofumiwakasugi" creationdate="20150919T072853Z">
        <seg>[C の構造体](c_bindings/struct.html)をパックします。これによって、構造体のアラインメントが1バイトになり、要素間のパディングがなくなります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Also, it accepts a [type](type_grammar.html) that must be known at compile-time as its argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T012529Z" creationid="hirofumiwakasugi" creationdate="20150930T011338Z">
        <seg>また、コンパイル時に知っておく必要のある[型](type_grammar.html)を引数として指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternative you can use the `run` command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072011Z" creationid="hirofumiwakasugi" creationdate="20150901T072011Z">
        <seg>また、`run` コマンドを使っても同様のことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a backlash followed by a newline can be inserted inside the string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104106Z" creationid="hirofumiwakasugi" creationdate="20150901T104106Z">
        <seg>また、改行の前のバックスラッシュは文字列リテラルの中に書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a backslash followed by a newline can be inserted inside the string literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194758Z" creationid="makenowjust" creationdate="20200419T194758Z">
        <seg>もしくは、バックスラッシュに改行を続けたものを文字列中に追加する、という手段もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, a separate &lt;g1&gt;shards&lt;/g1&gt; package may be available for your system.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173410Z" creationid="makenowjust" creationdate="20200419T173410Z">
        <seg>そうでなければ、分割された&lt;g1&gt;shards&lt;/g1&gt;パッケージがあなたのシステムでは有効かもしれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Alternatively, use pointer casts as explained below.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022402Z" creationid="hirofumiwakasugi" creationdate="20151009T022343Z">
        <seg>代替になるものとしては、以下で説明するポインタキャストを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although exceptions are available as one of the mechanisms for handling errors, they are not your only choice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024552Z" creationid="hirofumiwakasugi" creationdate="20150907T023334Z">
        <seg>例外はエラーハンドリング機構の1つですが、必ずしも例外処理でしかエラーを扱うことができないわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although generic types are usually associated with containers, they can also be used to improve execution performance at the cost of a larger executable size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T073111Z" creationid="hirofumiwakasugi" creationdate="20150912T072645Z">
        <seg>通常、ジェネリック型はコンテナに関連していることが多いですが、それだけではなく、実行ファイルのサイズが大きくなることと引き換えに、実行時のパフォーマンスを向上させるために利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although it is obvious that `a` will always be assigned a value, the compiler will still think `a` might never had a chance to be initialized.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022758Z" creationid="hirofumiwakasugi" creationdate="20150907T022321Z">
        <seg>この場合、`a` に常に値が代入されていることは明白なのですが、それでもコンパイラは `a` が初期化されていない可能性があると解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although not enforced by the compiler, a `lib`'s name usually starts with `Lib`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142526Z" creationid="hirofumiwakasugi" creationdate="20151003T142356Z">
        <seg>なお、これはコンパイラが強制するものではありませんが、通常、`lib` の名前は `Lib` から始まるものにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Although not enforced by the compiler, constants are usually named with all capital letters and underscores to separate words.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055520Z" creationid="hirofumiwakasugi" creationdate="20150913T055520Z">
        <seg>また、これはコンパイラに強制されることではありませんが、一般的に定数名はすべて大文字とし、単語はアンダースコアで区切ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;&amp;&amp;&lt;/g1&gt; (and) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101530Z" creationid="makenowjust" creationdate="20200424T101530Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt; (かつ) 演算子はまず左辺の式を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;Array&lt;/g1&gt; is an ordered and integer-indexed generic collection of elements of a specific type &lt;g2&gt;T&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173906Z" creationid="makenowjust" creationdate="20200420T172810Z">
        <seg>&lt;g1&gt;Array&lt;/g1&gt;は順番に意味があり整数でインデックスされた、&lt;g2&gt;T&lt;/g2&gt;型の値を要素として持つジェネリックなコレクションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;if&lt;/g1&gt; can be written as an expression’s suffix:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080325Z" creationid="makenowjust" creationdate="20200424T080325Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は式に後置して使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;if&lt;/g1&gt; evaluates the given branch if its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074633Z" creationid="makenowjust" creationdate="20200424T074152Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は与えられた条件式が&lt;g2&gt;真&lt;/g2&gt;である場合にthen節を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;it&lt;/g1&gt; block contains an example that should invoke the code to be tested and define what is expected of it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T132409Z" creationid="akiji" creationdate="20200505T132205Z">
        <seg>&lt;g1&gt;it&lt;/g1&gt;ブロックには、テスト対象コードの実行例と、その結果がどうなるべきかの定義を記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;unless&lt;/g1&gt; evaluates the then branch if its condition is &lt;g2&gt;falsey&lt;/g2&gt;, and evaluates the &lt;g3&gt;else branch&lt;/g3&gt;, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090448Z" creationid="makenowjust" creationdate="20200424T090448Z">
        <seg>&lt;g1&gt;unless&lt;/g1&gt;は条件式が&lt;g2&gt;偽となる&lt;/g2&gt;ときにthen節を評価して、そうでないときに&lt;g3&gt;else&lt;/g3&gt;節があれば評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;until&lt;/g1&gt; executes its body until its condition is &lt;g2&gt;truthy&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101002Z" creationid="makenowjust" creationdate="20200424T101002Z">
        <seg>&lt;g1&gt;until&lt;/g1&gt;は条件式が&lt;g2&gt;真となる&lt;/g2&gt;まで繰り返し本体を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g1&gt;||&lt;/g1&gt; (or) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T102238Z" creationid="makenowjust" creationdate="20200424T101722Z">
        <seg>&lt;g1&gt;||&lt;/g1&gt; (または) 演算子はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An &lt;g3&gt;until&lt;/g3&gt; is just syntax sugar for a &lt;g4&gt;while&lt;/g4&gt; with the condition negated:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101247Z" creationid="makenowjust" creationdate="20200424T101046Z">
        <seg>&lt;g3&gt;until&lt;/g3&gt;は&lt;g4&gt;while&lt;/g4&gt;に条件式を否定したもの与えられた場合のシンタックスシュガーになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An Array can have mixed types, meaning `T` will be a union of types, but these are determined when the array is created, either by specifying T or by using an array literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010241Z" creationid="hirofumiwakasugi" creationdate="20150901T132140Z">
        <seg>配列には異なる型の要素を含めることが可能で、そのとき `T` は複数の型の組み合わせ (ユニオン型) となります。ただ、その型は配列が作られたときに決定されます。つまり、配列の生成時に明示的に指定された `T` か、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An [Array](http://crystal-lang.org/api/Array.html) is a generic type containing elements of a type `T`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072425Z" creationid="hirofumiwakasugi" creationdate="20150901T131821Z">
        <seg>配列 ([Array](http://crystal-lang.org/api/Array.html)) は、その中に `T` 型の n 個の要素を含むことができるジェネリック型です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `&amp;&amp;` (and) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052505Z" creationid="hirofumiwakasugi" creationdate="20150905T052505Z">
        <seg>`&amp;&amp;` (かつ/論理積) はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `alias` declaration inside a `lib` declares a C `typedef`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023839Z" creationid="hirofumiwakasugi" creationdate="20151008T023740Z">
        <seg>`lib` の内部で `alias` を宣言することで C の typedef を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `alias` is most useful to avoid writing long types over and over, but also to declare a type based on compile-time flags:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024031Z" creationid="hirofumiwakasugi" creationdate="20151008T024000Z">
        <seg>`alias` が最も便利なのは、長い型名を何度も何度も書かずに済むようにできることです。ただ、コンパイル時フラグに基づく型宣言でも非常に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `else` clause can only be specified if at least one `rescue` clause is specified.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014036Z" creationid="hirofumiwakasugi" creationdate="20150907T014036Z">
        <seg>`else` 節を設定するためには、少なくとも1つの `rescue` 節が設定されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `else` clause is executed only if no exceptions were rescued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013756Z" creationid="hirofumiwakasugi" creationdate="20150907T013756Z">
        <seg>`else` 節は、例外が発生しなかった場合にのみ実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `ensure` clause is executed at the end of a `begin ... end` or `begin ... rescue ... end` expression regardless of whether an exception was raised or not:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013355Z" creationid="hirofumiwakasugi" creationdate="20150907T013215Z">
        <seg>`ensure` 節は、例外が発生したかどうかに関係なく、`begin ... end` または `begin ... rescue ... end` の後で必ず実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `enum` declaration inside a `lib` declares a C enum:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052625Z" creationid="hirofumiwakasugi" creationdate="20151007T052625Z">
        <seg>`lib` の内部で `enum` を宣言することで C の enum (列挙型) を宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `extend` makes a type include methods defined in that module as class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141738Z" creationid="hirofumiwakasugi" creationdate="20150911T141535Z">
        <seg>一方、`extend` を使用すると、モジュールに定義されたメソッドをクラスメソッドとして利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `if` can be written as an expression’s suffix:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012922Z" creationid="hirofumiwakasugi" creationdate="20150903T012824Z">
        <seg>`if` は式に後置して使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `if` evaluates the `then` branch if its condition is *truthy*, and evaluates the `else` branch, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025413Z" creationid="hirofumiwakasugi" creationdate="20150903T005946Z">
        <seg>`if` は、もし与えられた条件が「*真*」である場合には `then` 節を評価し、そうでない場合には `else` 節を (もしあれば) 評価するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `include` makes a type include methods defined in that module as instance methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141722Z" creationid="hirofumiwakasugi" creationdate="20150911T133427Z">
        <seg>`include` を使用すると、モジュールに定義されたメソッドをインスタンスメソッドとして利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `unless` evaluates the then branch if its condition is *falsey*, and evaluates the `else branch`, if there’s any, otherwise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022747Z" creationid="hirofumiwakasugi" creationdate="20150903T022742Z">
        <seg>`unless` は、もし与えられた条件が「*偽*」である場合には `then` の分岐を評価し、そうでない場合には `else` の分岐を (もしあれば) 評価するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `until` executes its body until its condition is *truthy*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052403Z" creationid="hirofumiwakasugi" creationdate="20150905T052403Z">
        <seg>`until` は、与えられた条件が「真」になるまでその本体を繰り返し実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `until` is just syntax sugar for a `while` with the condition negated:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052410Z" creationid="hirofumiwakasugi" creationdate="20150905T052410Z">
        <seg>実際には、`until` というのは `while` に否定の条件が与えられた場合のシンタックスシュガーになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An `||` (or) evaluates its left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052644Z" creationid="hirofumiwakasugi" creationdate="20150905T052644Z">
        <seg>`||` (または/論理和) はまず左辺を評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An alternative syntax is provided:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020206Z" creationid="hirofumiwakasugi" creationdate="20150902T020206Z">
        <seg>また、以下の記法を利用して書くことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An easy way to remember which one is inclusive and which one is exclusive it to think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015144Z" creationid="hirofumiwakasugi" creationdate="20150902T014911Z">
        <seg>上記の「右側の値を含む/含まない」記法の簡単な覚え方を紹介します。ドットが1つ多くついているから、それだけ *y* が遠くに押し出されているのをイメージしてください。だからそのとき遠くの *y* は範囲に含まれない、というわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An easy way to remember which one is inclusive and which one is exclusive it to think of the extra dot as if it pushes &lt;g1&gt;y&lt;/g1&gt; further away, thus leaving it outside of the range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035153Z" creationid="makenowjust" creationdate="20200421T035153Z">
        <seg>上記の「右の値を含む/含まない」記法の簡単な覚え方を紹介します。ドットが1つ多くついていると、それだけ&lt;g1&gt;y&lt;/g1&gt;が外に押し出されているのをイメージしてください。だから、そのとき範囲に&lt;g1&gt;y&lt;/g1&gt;は含まれないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be created from an integer:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T010959Z" creationid="hirofumiwakasugi" creationdate="20150916T010959Z">
        <seg>整数から Enum を作ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum can be marked with the `@[Flags]` attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114600Z" creationid="hirofumiwakasugi" creationdate="20150914T114015Z">
        <seg>Enum には `@[Flags]` という属性を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is a set of integer values, where each value has an associated name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013023Z" creationid="hirofumiwakasugi" creationdate="20150914T024113Z">
        <seg>Enum はひと組になった整数を表すもので、そのそれぞれの値が名前を持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An enum is defined with the `enum` keyword, followed by its name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024206Z" creationid="hirofumiwakasugi" creationdate="20150914T024201Z">
        <seg>Enum を定義するには `enum` キーワードに続けてその名前を書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of a module as a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131043Z" creationid="hirofumiwakasugi" creationdate="20150911T131043Z">
        <seg>まず、名前空間としてモジュールを使用する例を見てみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example of this is the C `FILE` type, which you can obtain with `fopen`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023619Z" creationid="hirofumiwakasugi" creationdate="20151008T023619Z">
        <seg>この例としては、`fopen` によって得られる C の `FILE` 型をあげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with `ensure`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014316Z" creationid="hirofumiwakasugi" creationdate="20150907T014307Z">
        <seg>`ensure` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with a variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>変数の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example with an instance variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035030Z" creationid="hirofumiwakasugi" creationdate="20150906T035030Z">
        <seg>インスタンス変数の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031517Z" creationid="hirofumiwakasugi" creationdate="20150910T031454Z">
        <seg>例をあげましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An explicit type can be specified by immediately following the closing bracket with &lt;g1&gt;of&lt;/g1&gt; and a type, each separated by whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173140Z" creationid="makenowjust" creationdate="20200420T173140Z">
        <seg>閉じ角括弧のあとに続けて&lt;g1&gt;of&lt;/g1&gt;と型を置くことで、明示的に型を指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer literal is an optional &lt;g1&gt;+&lt;/g1&gt; or &lt;g2&gt;-&lt;/g2&gt; sign, followed by
a sequence of digits and underscores, optionally followed by a suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183112Z" creationid="makenowjust" creationdate="20200419T182341Z">
        <seg>整数リテラルは &lt;g1&gt;+&lt;/g1&gt; (オプション) または &lt;g2&gt;-&lt;/g2&gt; 符号に続く数値とアンダースコアからなり、さらに型を表わすサフィックスを続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An integer literal is an optional `+` or `-` sign, followed by
a sequence of digits and underscores, optionally followed by a suffix.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052055Z" creationid="hirofumiwakasugi" creationdate="20150901T051705Z">
        <seg>整数リテラルは、`+` (オプション) または `-` 符号に続く数値とアンダースコアによって記述し、オプションでサフィックスを与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An object's internal state, if any, can only be queried by invoking methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T013755Z" creationid="hirofumiwakasugi" creationdate="20150904T013232Z">
        <seg>そして、オブジェクトに内部状態が存在する場合は、メソッドを実行することでその状態について問い合わせることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional (but strongly recommended) descriptive string states it's purpose and a block contains the main logic performing the test.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T232815Z" creationid="akiji" creationdate="20200505T125751Z">
        <seg>ここには、そのテストの意図を説明する文字列（オプションですが、強く推奨）とともに、テストが実行するロジックを納めたブロックが与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An optional trailing colon is preferred for readability.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215250Z" creationid="makenowjust" creationdate="20200412T214630Z">
        <seg>可読性のためにコロンを続けることが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>An underscore is allowed in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012105Z" creationid="hirofumiwakasugi" creationdate="20151009T012105Z">
        <seg>型制約でアンダースコアを使うことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Anatomy of a spec file</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T124545Z" creationid="akiji" creationdate="20200505T124545Z">
        <seg>specファイルの構造</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And C bindings are usually wrapped in safe wrappers that include null pointers and bounds checks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013204Z" creationid="hirofumiwakasugi" creationdate="20151009T012742Z">
        <seg>また、C バインディングは、普通は、NULL ポインタやバウンドチェックを含むより安全なラッパーで包みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And from there we are one click away from the source code ... the actual proof that it is not magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175634Z" creationid="makenowjust" creationdate="20200413T173926Z">
        <seg>そして、そこから1クリックでソースコードを見ることができます。……これが魔法ではないということの証明です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And if the condition is a &lt;g7&gt;var.responds_to?(:method)&lt;/g7&gt;, &lt;g8&gt;var&lt;/g8&gt; is guaranteed to be of a type that responds to that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095031Z" creationid="makenowjust" creationdate="20200424T094959Z">
        <seg>さらに、&lt;g7&gt;var.responds_to?(:method)&lt;/g7&gt;という形なら、本体では&lt;g8&gt;var&lt;/g8&gt;がそのメソッドを持つことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And if the condition is a `var.responds_to?(:method)`, `var` is guaranteed to be of a type that responds to that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052139Z" creationid="hirofumiwakasugi" creationdate="20150905T052139Z">
        <seg>また、もし条件が `var.responds_to?(:method)` の判定であれば、本体の中で `var` がそのメソッドに応答することを保証することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And it is also available to &lt;g1&gt;index assignments&lt;/g1&gt; (&lt;g2&gt;[]=&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175652Z" creationid="makenowjust" creationdate="20200422T175652Z">
        <seg>そして、&lt;g1&gt;インデックス指定の代入&lt;/g1&gt; (&lt;g2&gt;[]=&lt;/g2&gt;) の場合にも同様に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And it is also available to indexers (`[]=`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060316Z" creationid="hirofumiwakasugi" creationdate="20150902T060316Z">
        <seg>インデックス指定の代入 (`[]=`) の場合にも同様に有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And operators can be invoked too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153248Z" creationid="hirofumiwakasugi" creationdate="20160115T153236Z">
        <seg>演算子の場合も同様に実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And since it can't find a `talk` method on it, it errors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034605Z" creationid="hirofumiwakasugi" creationdate="20150910T034310Z">
        <seg>`Animal` には `talk` メソッドが存在しないためにエラーとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And so we have reached The End 😎🎶</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190712Z" creationid="makenowjust" creationdate="20200413T190645Z">
        <seg>これでこの文章はおしまいです 😎🎶</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And to access it, use a syntax similar to type restrictions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012416Z" creationid="hirofumiwakasugi" creationdate="20150907T012416Z">
        <seg>型を指定して、かつその例外にアクセスしたいときは、型制約の場合と同じように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And to accomplish this, we will be using the &lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt; module.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183215Z" creationid="makenowjust" creationdate="20200413T183215Z">
        <seg>これを達成するために&lt;g1&gt;&lt;g2&gt;Colorize&lt;/g2&gt;&lt;/g1&gt;モジュールを使いたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another option is to use &lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt; found in the standard library which only executes the block if the value is not &lt;g3&gt;nil&lt;/g3&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082201Z" creationid="makenowjust" creationdate="20200424T082201Z">
        <seg>他の手法として、標準ライブラリの&lt;g1&gt;&lt;g2&gt;Object#try&lt;/g2&gt;&lt;/g1&gt;メソッドを使うこともできます。これは&lt;g3&gt;nil&lt;/g3&gt;でない場合にのみブロックを実行する、というメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another reason is that another thread could change that instance variable after checking the condition.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015945Z" creationid="hirofumiwakasugi" creationdate="20150903T015447Z">
        <seg>また、もう1つの理由としては、条件式のチェックが行われた後で、他のスレッドがインスタンス変数を書き換える可能性もあるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Another way is this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075255Z" creationid="akiji" creationdate="20200428T075255Z">
        <seg>他にはこんな方法もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any expression may be placed inside the interpolated section, but it’s best to keep the expression small for readability.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192513Z" creationid="makenowjust" creationdate="20200419T192513Z">
        <seg>任意の式を文字列の補間として書くことができますが、可読性を高めるためそれらの式は小さなものに保ったほうが良いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any other character following a backslash is interpreted as the character itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191934Z" creationid="makenowjust" creationdate="20200419T191934Z">
        <seg>その他の文字がバックスラッシュに続いた場合、その文字自身を表すものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any other value is truthy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005754Z" creationid="hirofumiwakasugi" creationdate="20150903T005739Z">
        <seg>その他の値はすべて真となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Any string literal can span multiple lines:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194210Z" creationid="makenowjust" creationdate="20200419T194210Z">
        <seg>任意の文字列リテラルは複数行にまたがって記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arch Linux includes the Crystal compiler in the Community repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021531Z" creationid="hirofumiwakasugi" creationdate="20151009T021531Z">
        <seg>Arch Linux はコミュニティのリポジトリで Crystal コンパイラが提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments can be passed to `some_method` as well:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153137Z" creationid="hirofumiwakasugi" creationdate="20160115T153137Z">
        <seg>`some_method` に引数を渡すことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arguments to the compiled binary can be separated with double dash &lt;g1&gt;--&lt;/g1&gt; from the compiler arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154609Z" creationid="makenowjust" creationdate="20200419T154600Z">
        <seg>コンパイルされたバイナリへの引数は、コンパイラへの引数のあとに2つのハイフン (&lt;g1&gt;--&lt;/g1&gt;) で区切って渡します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172629Z" creationid="makenowjust" creationdate="20200420T172629Z">
        <seg>配列 (Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040535Z" creationid="hirofumiwakasugi" creationdate="20150908T040535Z">
        <seg>Array(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array(Type) |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>Array(Type) |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array-like Type Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173350Z" creationid="makenowjust" creationdate="20200420T173350Z">
        <seg>配列ライクな型のリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays are typically created with an array literal denoted by square brackets (&lt;g1&gt;[]&lt;/g1&gt;) and individual elements separated by a comma (&lt;g2&gt;,&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173936Z" creationid="makenowjust" creationdate="20200420T172858Z">
        <seg>配列は通常、角括弧 (&lt;g1&gt;[]&lt;/g1&gt;) とコンマ (&lt;g2&gt;,&lt;/g2&gt;) によって区切られた個々の要素による配列リテラルで生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of strings can be created with a special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142920Z" creationid="hirofumiwakasugi" creationdate="20150901T140047Z">
        <seg>文字列の配列は特別な記法を使って書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Arrays of symbols can be created with a special syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142913Z" creationid="hirofumiwakasugi" creationdate="20150901T140104Z">
        <seg>シンボルの配列は特別な記法を使って書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Array{1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173503Z" creationid="makenowjust" creationdate="20200420T173503Z">
        <seg>Array{1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Articles from our blog</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222611Z" creationid="makenowjust" creationdate="20200413T222558Z">
        <seg>ブログ記事 (ほとんど未翻訳です)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a consequence, the compiler will automatically check for null references in compile time, helping prevent the dreadful &lt;a0&gt;billion-dollar mistake&lt;/a0&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211636Z" creationid="makenowjust" creationdate="20200413T211636Z">
        <seg>要するに、コンパイラはコンパイル時に自動的に null 参照をチェックしてくれる、ということです。これは&lt;a0&gt;1億ドルの損失&lt;/a0&gt;から免れる助けになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, since `Person` inherits `Reference` the second definition of `==` is not needed, since it's already defined in `Reference`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T024936Z" creationid="hirofumiwakasugi" creationdate="20150908T024647Z">
        <seg>また、これは補足ですが、`Person` は `Reference` を継承しているため、実際には2つ目の `==` を定義する必要はありません。 同様のメソッドが `Reference` で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a side note, we can define `become_older` inside the original `Person` definition, or in a separate definition: Crystal combines all definitions into a single class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122906Z" creationid="hirofumiwakasugi" creationdate="20150904T122619Z">
        <seg>少し補足をすると、上記のように `become_older` メソッドを元々の `Person` クラスの中で定義するだけではなく、元々のクラスと別で改めて定義することも可能です。Crystal はそれらのすべての定義を1つのクラスにまとめます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As a suffix</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080313Z" creationid="makenowjust" creationdate="20200424T080313Z">
        <seg>後置 if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an example, consider a `Person` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022414Z" creationid="hirofumiwakasugi" creationdate="20150904T022016Z">
        <seg>このセクションでは、`Person` というクラスを例として説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As an expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080407Z" creationid="makenowjust" creationdate="20200424T080407Z">
        <seg>式としての if</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As explained in the [proc literals](literals/proc.html) section, a Proc can also be created from existing methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061646Z" creationid="hirofumiwakasugi" creationdate="20150918T061646Z">
        <seg>[Proc リテラル](literals/proc.html)のセクションで説明したように、既存のメソッドから Proc を作ることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As in C, the first member of the enum has a value of zero and each successive value is incremented by one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052843Z" creationid="hirofumiwakasugi" creationdate="20151007T052721Z">
        <seg>C と同じく、enum の最初の要素はゼロで、以降の要素はそれぞれ1ずつ増加した値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As its name implies, it is an improved version of the library named &lt;g3&gt;Curses&lt;/g3&gt;, which was developed to support a text-based dungeon-crawling adventure game called Rogue!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190610Z" creationid="makenowjust" creationdate="20200413T190610Z">
        <seg>その名前が暗に示すように、これは&lt;g3&gt;Curses&lt;/g3&gt;というライブラリの改良版です。&lt;g3&gt;Curses&lt;/g3&gt; は Rouge というテキストベースのダンジョン探索アドベンチャーゲームのために開発されました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As modules are included they are **prepended** to this list.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140252Z" creationid="hirofumiwakasugi" creationdate="20150911T140211Z">
        <seg>モジュールがインクルードされると、そのモジュールはリストの「**先頭**」に追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As stated in the documentation for the &lt;g1&gt;GNU Readline Library&lt;/g1&gt;, &lt;g2&gt;Readline&lt;/g2&gt; is a library that provides a set of functions for use by applications that allow users to edit command lines as they are typed in.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190155Z" creationid="makenowjust" creationdate="20200413T190015Z">
        <seg>&lt;g1&gt;GNU Readline Library&lt;/g1&gt;というドキュメントで述べられているように、&lt;g2&gt;Readline&lt;/g2&gt;はユーザーに対してコマンドライン編集機能を提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As with any other application, at some point we would like to &lt;g1&gt;write tests&lt;/g1&gt; for the different features.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185144Z" creationid="makenowjust" creationdate="20200413T185144Z">
        <seg>他の多くのアプリケーションがそうしているように、異なる機能ごとに&lt;g1&gt;テストを書きたい&lt;/g1&gt;ものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can imagine, there are already &lt;g4&gt;a couple of shards&lt;/g4&gt; in the ecosystem that will allow us to use &lt;g5&gt;NCurses&lt;/g5&gt; in Crystal!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190807Z" creationid="makenowjust" creationdate="20200413T190633Z">
        <seg>&lt;g5&gt;NCurses&lt;/g5&gt; を Crystal から扱える &lt;g4&gt;shardは2つ&lt;/g4&gt;ほど存在しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>As you can see, some basic math is allowed for a member value: `+`, `-`, `*`, `/`, `&amp;`, `|`, `&lt;&lt;`, `&gt;&gt;` and `%`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053055Z" creationid="hirofumiwakasugi" creationdate="20151007T053055Z">
        <seg>上記のように、要素の値には `+`/`-`/`*`/`/`/`&amp;`/`|`/`&lt;&lt;`/`&gt;&gt;`/`%` といった基本的な計算を使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175715Z" creationid="makenowjust" creationdate="20200422T174153Z">
        <seg>代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment is done using the equals sign (&lt;g1&gt;=&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174210Z" creationid="makenowjust" creationdate="20200422T174210Z">
        <seg>代入にはイコール記号 (&lt;g1&gt;=&lt;/g1&gt;) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Assignment is done with the equal (`=`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053925Z" creationid="hirofumiwakasugi" creationdate="20150902T053925Z">
        <seg>代入にはイコール記号 (`=`) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Async # 4
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114624Z" creationid="hirofumiwakasugi" creationdate="20150914T114624Z">
        <seg>Async # 4
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At start our CLI application will have two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172425Z" creationid="makenowjust" creationdate="20200413T172425Z">
        <seg>CLI アプリケーションの開発を始めるにあたって、まず次のオプションを持っていることにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the moment of this writing, Crystal has concurrency support but not parallelism: several tasks can be executed, and a bit of time will be spent on each of these, but two code paths are never executed at the same exact time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071836Z" creationid="akiji" creationdate="20200428T053912Z">
        <seg>これを書いている時点では，Crystal は「並行処理」をサポートしていますが、「並列処理」はサポートしていません。つまり、いくつものタスクを実行することができて、それぞれのタスクに少しずつ時間を割り当てることも可能ですが、完全に同じタイミングで2つのコードパスが実行されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At the third &lt;g1&gt;receive&lt;/g1&gt; the main fiber blocks and execution goes to the other fiber, which sends more values, finishes, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071731Z" creationid="akiji" creationdate="20200429T145324Z">
        <seg>そのため、3回目の&lt;g1&gt;receive&lt;/g1&gt;はメインファイバをブロックされて他のファイバに処理が移り、さらに値が送信されたり、終了したりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes are used to pass flags to the linker to find external libraries:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142633Z" creationid="hirofumiwakasugi" creationdate="20151003T142357Z">
        <seg>また、属性はリンカにフラグを渡すために利用され、リンカはそれにしたがって外部のライブラリを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Attributes can be omitted if the library is implicitly linked, as in the case of libc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143523Z" creationid="hirofumiwakasugi" creationdate="20151003T143432Z">
        <seg>属性は、例えば libc のように、暗黙的にリンクされるライブラリの場合には不要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Available escape sequences:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190544Z" creationid="makenowjust" creationdate="20200419T185946Z">
        <seg>次のエスケープシーケンスが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>BUG</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214451Z" creationid="makenowjust" creationdate="20200412T214451Z">
        <seg>BUG</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be able to call C code by writing bindings to it in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221444Z" creationid="makenowjust" creationdate="20200412T221444Z">
        <seg>Crystalでバインディングを書くことでC言語のコードを呼び出せる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be aware that using this feature will cause an exception to be raised at runtime, if the resulting string results in an invalid regular expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041445Z" creationid="makenowjust" creationdate="20200421T041445Z">
        <seg>この方法で正規表現を生成した場合、構文エラーなどはコンパイル時に検出できず実行時に起こる例外になるということに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be statically type-checked, but without having to specify the type of variables or method arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221404Z" creationid="makenowjust" creationdate="20200412T221404Z">
        <seg>静的に型チェックがされる。しかし変数やメソッドの引数に型を明示する必要はない。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Be wise and choose good names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114202Z" creationid="hirofumiwakasugi" creationdate="20150906T114146Z">
        <seg>引数には良い名前をつけるよう心がけましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because `pointerof` involves pointers, it is considered [unsafe](unsafe.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120054Z" creationid="hirofumiwakasugi" creationdate="20150906T035120Z">
        <seg>`pointerof` はポインタを扱うため「安全でない ([unsafe](unsafe.html))」ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because a non-captured block is always inlined, the above method invocation is **exactly the same** as writing this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040200Z" creationid="hirofumiwakasugi" creationdate="20150916T032157Z">
        <seg>捕捉されないブロック (non-captured block) は常にインライン展開されます。したがって、上記したメソッドの実行は、以下のように書くことと**完全に同じ**です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because at this moment there's only a single thread executing your code, accessing and modifying a class variable in different fibers will work just fine.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150722Z" creationid="akiji" creationdate="20200428T063755Z">
        <seg>現時点ではシングルスレッドでしかコードを実行できなため、複数のファイバから同じクラス変数を参照や変更しても問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because in order to compile a Crystal compiler we need an older Crystal compiler, the only two ways to generate a compiler for a system where there isn't a compiler yet are:
* We checkout the latest version of the compiler written in Ruby, and from that compiler we compile the next versions until the current one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050509Z" creationid="hirofumiwakasugi" creationdate="20150909T050026Z">
        <seg>Crystal のコンパイラをコンパイルするためには、古い Crystal コンパイラが必要です。したがって、まだコンパイラが入手できないシステムでコンパイラを生成するには以下の2つの方法しかありません。

* Ruby で書かれた最新のコンパイラを入手してコンパイラをコンパイルし、それを現在のバージョンまで繰り返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because method names in Crystal must start with a lowercase letter, `fun` names must also start with a lowercase letter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041348Z" creationid="hirofumiwakasugi" creationdate="20151005T041240Z">
        <seg>Crystal ではユーザー名は小文字で始まる必要があるため、`fun` の名前も同様に小文字で始まらなくてはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because public is the default if there is no `public` keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032346Z" creationid="hirofumiwakasugi" creationdate="20150909T032346Z">
        <seg>したがって、`public` というキーワードは存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before talking about control expressions we need to know what *truthy* and *falsey* values are.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023951Z" creationid="hirofumiwakasugi" creationdate="20151009T023945Z">
        <seg>制御式について説明する前に、まずは「真」と「偽」の値というものについて知る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Before talking about control expressions we need to know what &lt;g1&gt;truthy&lt;/g1&gt; and &lt;g2&gt;falsey&lt;/g2&gt; values are.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T051206Z" creationid="makenowjust" creationdate="20200424T051204Z">
        <seg>制御式について説明する前に、まずは&lt;g1&gt;真となる値&lt;/g1&gt;と&lt;g2&gt;偽となる値&lt;/g2&gt;について知る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides double-quotes strings, Crystal also supports string literals indicated by a percent sign (&lt;g1&gt;%&lt;/g1&gt;) and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193048Z" creationid="makenowjust" creationdate="20200419T193048Z">
        <seg>ダブルクォートによる文字列リテラルの他に、Crystalはパーセント記号 (&lt;g1&gt;%&lt;/g1&gt;) と区切り文字の組による文字列リテラルもサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides slash-delimited literals, regular expressions may also be expressed as a percent literal indicated by &lt;g1&gt;%r&lt;/g1&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042321Z" creationid="makenowjust" creationdate="20200421T042321Z">
        <seg>スラッシュ区切りのリテラルの他に、正規表現リテラルは&lt;g1&gt;%r&lt;/g1&gt;と区切り文字の組からなるパーセントリテラルを使って表現することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single string literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt; of strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171748Z" creationid="makenowjust" creationdate="20200419T193808Z">
        <seg>1つの文字列を表すリテラルの他に、文字列の&lt;g1&gt;配列&lt;/g1&gt;を表わすパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Besides the single symbol literal, there is also a percent literal to create an &lt;g1&gt;Array&lt;/g1&gt; of symbols.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172446Z" creationid="makenowjust" creationdate="20200420T171732Z">
        <seg>1つのシンボルを表すリテラルの他に、シンボルの&lt;g1&gt;配列&lt;/g1&gt;を表すパーセントリテラルがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Big programs are better maintained and understood when split across different files.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T143757Z" creationid="hirofumiwakasugi" creationdate="20150905T143721Z">
        <seg>大きなプログラムの場合は、複数のファイルに分けることでメンテナンスが楽になり、また理解もしやすくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary numbers start with &lt;g1&gt;0b&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182610Z" creationid="makenowjust" creationdate="20200419T182610Z">
        <seg>先頭に&lt;g1&gt;0b&lt;/g1&gt;をつけると2進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Binary numbers start with `0b`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052521Z" creationid="hirofumiwakasugi" creationdate="20150901T052456Z">
        <seg>先頭に `0b` をつけると2進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>Blue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024637Z" creationid="hirofumiwakasugi" creationdate="20150914T024637Z">
        <seg>Blue
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Blue
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Blue   = 5  # overwritten to 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024419Z" creationid="hirofumiwakasugi" creationdate="20150914T024419Z">
        <seg>Blue   = 5  # 5に上書きされる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001218Z" creationid="makenowjust" creationdate="20200414T001052Z">
        <seg>真偽値 (Bool)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bool |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071433Z" creationid="hirofumiwakasugi" creationdate="20150919T071433Z">
        <seg>Bool |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both `include` and `extend` make constants defined in the module available to the including/extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142230Z" creationid="hirofumiwakasugi" creationdate="20150911T141939Z">
        <seg>また、`include` と `extend` のどちらを使った場合も、モジュールに定義されている定数を利用できるようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Both of them can be used at the top level to avoid writing a namespace over and over (although the chances of name clashes increase):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142551Z" creationid="hirofumiwakasugi" creationdate="20150911T142441Z">
        <seg>トップレベルで `include`/`extend` することもできます。そうすると、何度も名前空間を書かなくても済むようになります (もちろん、その分だけ名前が衝突する可能性は高くなりますが) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Buffered channels</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103742Z" creationid="akiji" creationdate="20200429T143347Z">
        <seg>バッファ付きチャネル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building and Serving Locally</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165015Z" creationid="makenowjust" creationdate="20200413T165015Z">
        <seg>ローカルでのビルドとサーバーの起動方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Building in release mode should be used for production-ready executables and when performing benchmarks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152249Z" creationid="makenowjust" creationdate="20200419T152249Z">
        <seg>リリースモードでのビルドはプロダクションでの利用やベンチマークの測定の際に用いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Builds the specified targets in &lt;g1&gt;bin&lt;/g1&gt; path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180258Z" creationid="makenowjust" creationdate="20200419T180113Z">
        <seg>&lt;g1&gt;bin&lt;/g1&gt;にある指定したターゲットをビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Built in commands allow dependencies to be easily specified through a YAML file and fetched from their respective repositories.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222219Z" creationid="makenowjust" creationdate="20200413T221853Z">
        <seg>shards コマンドではYAMLファイルで依存関係を指定できて、さらにそれらを取得してこれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But Crystal is written in Crystal itself!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060207Z" creationid="hirofumiwakasugi" creationdate="20150831T060153Z">
        <seg>実は、Crystal は Crystal 自身によって書かれています！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But Crystal is written in Crystal itself! So you first need to use one of the previous described methods to have a running compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083214Z" creationid="hirofumiwakasugi" creationdate="20150831T083214Z">
        <seg>実は、Crystal は Crystal 自身によって書かれています！したがって、まずはこれまでに紹介した方法のいずれかを使ってコンパイラをインストールする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But also it can be included in the program and its methods can be invoked without a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150223Z" creationid="hirofumiwakasugi" creationdate="20150911T145128Z">
        <seg>それだけではなく、プログラムにインクルードしたとき、名前空間の指定なしでメソッドを実行することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But because 32-bit machines are starting to become obsolete, we'll bet on the future and focus more on 64-bit machines.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103224Z" creationid="akiji" creationdate="20200428T062748Z">
        <seg>しかし、32ビットマシンはもはや使用されなくなりつつありますので、我々は将来を見据えて64ビットマシンにより注力しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But check this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064823Z" creationid="hirofumiwakasugi" creationdate="20150912T064823Z">
        <seg>では、次のコードを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But once you abstract that and operate on a higher level, and assume (after mathematical proof or thorough testing) that the lower grounds are safe, you can be confident that your entire codebase is safe.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013651Z" creationid="hirofumiwakasugi" creationdate="20151009T013605Z">
        <seg>しかし、それらを抽象化し、より高いレベルでの操作を行い、さらに、(数学的な証明やテストを通して) 低いレベルの地盤が安全なことを確認すれば、自信を持ってコードベース全体が安全であると言えるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But what happen if the user doesn’t enter any value?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182132Z" creationid="makenowjust" creationdate="20200413T182132Z">
        <seg>しかし、ここでユーザーが何も入力しなかったらどうなるのでしょう？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But you are free to do what you want.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012756Z" creationid="hirofumiwakasugi" creationdate="20150916T012637Z">
        <seg>ただし、最終的には各自が自由に判断できることなので、必ずそうしなければならないというわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, &lt;g1&gt;what happens when we pass an option that is not declared?&lt;/g1&gt; For example -n</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175533Z" creationid="makenowjust" creationdate="20200413T175533Z">
        <seg>ですが、&lt;g1&gt;渡されたオプションを宣言していなかった場合、どうなるのでしょうか？&lt;/g1&gt;　例えば -n を渡してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, if we pass the option &lt;g2&gt;-t&lt;/g2&gt; / &lt;g3&gt;--twist&lt;/g3&gt; it will display the names in uppercase:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174745Z" creationid="makenowjust" creationdate="20200413T174738Z">
        <seg>しかし、&lt;g2&gt;-t&lt;/g2&gt;もしくは&lt;g3&gt;--twist&lt;/g3&gt;というオプションが与えられたときは、名前を大文字にすることにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, in general, `self` is the same as writing the type that will finally own that method, which, when modules are involved, becomes more useful.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T024726Z" creationid="hirofumiwakasugi" creationdate="20150908T024107Z">
        <seg>しかし、`self` と書くことで自身の型を指定できることは、メソッドを定義したモジュールがインクルードされて、そのメソッドを持つのが最終的にインクルードした側の型になる場合により便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But, on the other hand, it makes sense: classes under the same hierarchy should behave in a similar way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034007Z" creationid="hirofumiwakasugi" creationdate="20150910T033731Z">
        <seg>しかし、それ以外にもこの仕様には意味があります。それは、同一階層下のクラスは同じように振る舞うべき、というものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By convention, specs live in the &lt;g1&gt;spec/&lt;/g1&gt; directory of a project.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T064855Z" creationid="akiji" creationdate="20200518T064855Z">
        <seg>慣例的に、specはプロジェクト内の&lt;g1&gt;spec/&lt;/g1&gt;ディレクトリに置かれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the require path is the location of the standard library that comes with the compiler, and the "lib" directory relative to the current working directory (given by &lt;g1&gt;pwd&lt;/g1&gt; in a Unix shell).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084639Z" creationid="makenowjust" creationdate="20200427T084639Z">
        <seg>デフォルトの require パスは、コンパイラとあわせて提供される標準ライブラリと、カレントディレクトリ (UNIX シェルで言う &lt;g1&gt;pwd&lt;/g1&gt;) から相対的に指定される lib ディレクトリとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default the require path is the location of the standard library that comes with the compiler, and the "libs" directory relative to the current working directory (given by `pwd` in a unix shell).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145524Z" creationid="hirofumiwakasugi" creationdate="20150905T144936Z">
        <seg>デフォルトの require パスは、コンパイラとあわせて提供される標準ライブラリと、カレントディレクトリ  (UNIX シェルで言う `pwd`) から相対的に指定される「libs」ディレクトリ となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this list starts with the superclass.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140119Z" creationid="hirofumiwakasugi" creationdate="20150911T134003Z">
        <seg>最初の状態では、このリストはスーパークラスから始まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default this will create a &lt;g2&gt;docs&lt;/g2&gt; directory, with a &lt;g3&gt;docs/index.html&lt;/g3&gt; entry point.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213843Z" creationid="makenowjust" creationdate="20200412T211435Z">
        <seg>デフォルトでは&lt;g2&gt;docs&lt;/g2&gt;ディレクトリが生成され、&lt;g3&gt;docs/index.html&lt;/g3&gt;がエントリーポイントとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, all Crystal files in &lt;g1&gt;./src&lt;/g1&gt; will be appended (i.e. &lt;g2&gt;src/**/*.cr&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162251Z" creationid="makenowjust" creationdate="20200419T162243Z">
        <seg>デフォルトでは、&lt;g1&gt;./src&lt;/g1&gt; ディレクトリにあるすべてのファイルからドキュメント生成をします (つまり &lt;g2&gt;src/**/*.cr&lt;/g2&gt; が指定されたような挙動です)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, it prints information as a shell script.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163228Z" creationid="makenowjust" creationdate="20200419T163228Z">
        <seg>デフォルトではシェルスクリプトのように情報を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>By default, the generated executables are not fully optimized.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150647Z" creationid="makenowjust" creationdate="20200419T150647Z">
        <seg>デフォルトでは、生成された実行可能ファイルは完全には最適化されていません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C-bindings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221410Z" creationid="makenowjust" creationdate="20200413T221410Z">
        <seg>C バインディング</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.getch
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040642Z" creationid="hirofumiwakasugi" creationdate="20151005T040642Z">
        <seg>C.getch
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.srand(1_u32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040719Z" creationid="hirofumiwakasugi" creationdate="20151005T040719Z">
        <seg>C.srand(1_u32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid pid, out status_ptr, options
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043925Z" creationid="hirofumiwakasugi" creationdate="20151005T043925Z">
        <seg>C.waitpid pid, out status_ptr, options
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid pid, pointerof(status_ptr), options
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043758Z" creationid="hirofumiwakasugi" creationdate="20151005T043758Z">
        <seg>C.waitpid pid, pointerof(status_ptr), options
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid(pid, out status_ptr, options)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061447Z" creationid="hirofumiwakasugi" creationdate="20160204T061447Z">
        <seg>C.waitpid(pid, out status_ptr, options)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>C.waitpid(pid, pointerof(status_ptr), options)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061441Z" creationid="hirofumiwakasugi" creationdate="20160204T061405Z">
        <seg>C.waitpid(pid, pointerof(status_ptr), options)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>CURRENCIES = {</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>CURRENCIES = {</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Can be written as this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153030Z" creationid="hirofumiwakasugi" creationdate="20160115T153030Z">
        <seg>上記は以下のように書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Captured blocks and proc literals closure local variables and `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053825Z" creationid="hirofumiwakasugi" creationdate="20150918T053614Z">
        <seg>捕捉されたブロックと proc リテラルはローカル変数と `self` を閉包 (クロージャ) します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Chained assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174937Z" creationid="makenowjust" creationdate="20200422T174937Z">
        <seg>連続した代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Channels</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102700Z" creationid="akiji" creationdate="20200428T055134Z">
        <seg>チャネル（Channel）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Channels, to communicate data between fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103702Z" creationid="akiji" creationdate="20200428T055724Z">
        <seg>ファイバ間でデータをやりとりする「チャネル」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Char</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190417Z" creationid="makenowjust" creationdate="20200419T190417Z">
        <seg>文字 (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Checking the condition at the end of a loop</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095147Z" creationid="makenowjust" creationdate="20200424T095147Z">
        <seg>条件によってループを抜ける</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Child.counter #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041221Z" creationid="hirofumiwakasugi" creationdate="20150910T041221Z">
        <seg>Child.counter #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Child.new.child #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014446Z" creationid="hirofumiwakasugi" creationdate="20151002T014446Z">
        <seg>Child.new.child #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class names, and every type name, begin with a capital letter in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022107Z" creationid="hirofumiwakasugi" creationdate="20150904T022107Z">
        <seg>Crystal では、クラス名と、そして他のすべての型の名前は先頭が大文字となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are allowed, but instance variables not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011606Z" creationid="hirofumiwakasugi" creationdate="20150916T011534Z">
        <seg>また、クラス変数は定義可能ですが、インスタンス変数を定義することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are always associated to a single type and are not inherited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041151Z" creationid="hirofumiwakasugi" creationdate="20150910T041151Z">
        <seg>クラス変数は常に単一の型に結びついており、継承されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables are associated to classes instead of instances.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040654Z" creationid="hirofumiwakasugi" creationdate="20150910T040510Z">
        <seg>クラス変数は、インスタンスにではなくクラス自身に結びついているもので、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables can also be associated to modules and structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041239Z" creationid="hirofumiwakasugi" creationdate="20150910T041239Z">
        <seg>クラス変数をモジュールや構造体に設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Class variables can be read and written from class methods or instance methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040855Z" creationid="hirofumiwakasugi" creationdate="20150910T040852Z">
        <seg>クラス変数は、クラスメソッドかインスタンスメソッドから読み書きすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Code blocks that have Crystal code can be surrounded with triple backticks or indented with four spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215011Z" creationid="makenowjust" creationdate="20200412T211959Z">
        <seg>Crystal のコードブロックは3つのバックティック (バッククォート) で囲むか、スペース4つでインデントします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Coding Style</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T202830Z" creationid="makenowjust" creationdate="20200412T202830Z">
        <seg>コーディングスタイル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Red.red?  #=&gt; true
Color::Blue.red? #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011446Z" creationid="hirofumiwakasugi" creationdate="20150916T011446Z">
        <seg>Color::Red.red?  #=&gt; true
Color::Blue.red? #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Color::Red.value #:: UInt8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024638Z" creationid="hirofumiwakasugi" creationdate="20150914T024638Z">
        <seg>Color::Red.value #:: UInt8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command Line Interface Application</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165626Z" creationid="makenowjust" creationdate="20200413T163121Z">
        <seg>CLI アプリケーション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172340Z" creationid="makenowjust" creationdate="20200422T172340Z">
        <seg>コマンドリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>Command:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Commands will fail if dependencies in &lt;g2&gt;shard.yml&lt;/g2&gt; and &lt;g3&gt;shard.lock&lt;/g3&gt; are out of sync (used by &lt;g4&gt;install&lt;/g4&gt;, &lt;g5&gt;update&lt;/g5&gt;, &lt;g6&gt;check&lt;/g6&gt; and &lt;g7&gt;list&lt;/g7&gt; command)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175918Z" creationid="makenowjust" creationdate="20200419T175918Z">
        <seg>&lt;g2&gt;shard.yml&lt;/g2&gt;と&lt;g3&gt;shard.lock&lt;/g3&gt;の依存関係の同期が取れていない場合にコマンドは失敗します (&lt;g4&gt;install&lt;/g4&gt;、&lt;g5&gt;update&lt;/g5&gt;、&lt;g6&gt;check&lt;/g6&gt;および&lt;g7&gt;list&lt;/g7&gt;の場合)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000146Z" creationid="makenowjust" creationdate="20200414T000146Z">
        <seg>コメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments start with the &lt;g1&gt;#&lt;/g1&gt; character.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000217Z" creationid="makenowjust" creationdate="20200414T000217Z">
        <seg>コメントは&lt;g1&gt;#&lt;/g1&gt;からはじまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comments start with the sharp (`#`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050558Z" creationid="hirofumiwakasugi" creationdate="20150901T050506Z">
        <seg>「`#`」の文字があると、その行はそれ以降がコメントになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Communicating data</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063712Z" creationid="akiji" creationdate="20200428T063712Z">
        <seg>データのやり取り</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Community channels</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222856Z" creationid="makenowjust" creationdate="20200413T222856Z">
        <seg>コミュニティチャンネル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparing against a type will perform an is_a?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094344Z" creationid="makenowjust" creationdate="20200424T093814Z">
        <seg>型に対しては is_a? で比較されます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Comparisons</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T135851Z" creationid="akiji" creationdate="20200505T135851Z">
        <seg>比較</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile and &lt;g1&gt;run the application&lt;/g1&gt;, all in one command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175709Z" creationid="makenowjust" creationdate="20200413T174308Z">
        <seg>コンパイルと&lt;g1&gt;アプリケーションの実行&lt;/g1&gt;を、1度のコマンドでまとめて行う。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compile to efficient native code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221553Z" creationid="makenowjust" creationdate="20200412T221553Z">
        <seg>効率的なネイティブコードにコンパイルする。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiler commands</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153856Z" creationid="makenowjust" creationdate="20200419T153856Z">
        <seg>コマンドの概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiling and running at once</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150204Z" creationid="makenowjust" creationdate="20200419T150204Z">
        <seg>コンパイルと同時に実行する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Compiling without release mode is much faster and the resulting binaries still offer pretty good performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150814Z" creationid="makenowjust" creationdate="20200419T150814Z">
        <seg>リリースモードでないコンパイルは十分に早く、また生成されるバイナリもそれなりのパフォーマンスではあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concrete test cases are defined in &lt;g1&gt;it&lt;/g1&gt; blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T125210Z" creationid="akiji" creationdate="20200505T125210Z">
        <seg>具体的なテストケースは&lt;g1&gt;it&lt;/g1&gt;ブロック内に記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053245Z" creationid="akiji" creationdate="20200428T053245Z">
        <seg>並行処理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency Model</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221205Z" creationid="makenowjust" creationdate="20200413T221100Z">
        <seg>並列モデル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Concurrency vs. Parallelism</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053306Z" creationid="akiji" creationdate="20200428T053306Z">
        <seg>並行処理（Concurrency） vs. 並列処理（Parallelism）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consider the [waitpid](http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html) function:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043331Z" creationid="hirofumiwakasugi" creationdate="20151005T043331Z">
        <seg>[waitpid](http://www.gnu.org/software/libc/manual/html_node/Process-Completion.html) 関数について考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Constants can be declared at the top level or inside other types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055233Z" creationid="hirofumiwakasugi" creationdate="20150913T055233Z">
        <seg>定数はトップレベル、もしくはある型の内部で宣言することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Contributing to the Language Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164446Z" creationid="makenowjust" creationdate="20200412T221740Z">
        <seg>このリファレンスへの貢献方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Control expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T051111Z" creationid="makenowjust" creationdate="20200424T051111Z">
        <seg>制御式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conventions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220450Z" creationid="makenowjust" creationdate="20200412T220445Z">
        <seg>規約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Conversion between pointer types and Reference types is also possible:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020102Z" creationid="hirofumiwakasugi" creationdate="20150930T020010Z">
        <seg>ポインタ型と Reference 型を相互に変換することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Counter.increment # Error: undefined method '+' for Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041103Z" creationid="hirofumiwakasugi" creationdate="20150910T041103Z">
        <seg>Counter.increment # Error: undefined method '+' for Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Counter.instances #=&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040812Z" creationid="hirofumiwakasugi" creationdate="20150910T040812Z">
        <seg>Counter.instances #=&gt; 0
Counter.new
Counter.new
Counter.new
Counter.instances #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a Crystal project</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153327Z" creationid="makenowjust" creationdate="20200419T153327Z">
        <seg>Crystal のプロジェクトの作成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating a statically-linked executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152639Z" creationid="makenowjust" creationdate="20200419T152542Z">
        <seg>静的リンクした実行可能ファイルの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Creating an executable</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150442Z" creationid="makenowjust" creationdate="20200419T150442Z">
        <seg>実行可能ファイルの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cross-compiling can be done for other executables, but its main target is the compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050719Z" creationid="hirofumiwakasugi" creationdate="20150909T050719Z">
        <seg>クロスコンパイルは他の実行ファイルに対しても利用することが可能ですが、主な目的はコンパイラの生成です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal Programming Language</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220949Z" creationid="makenowjust" creationdate="20200412T220949Z">
        <seg>プログラミング言語 Crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal allows declaring uninitialized variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115035Z" creationid="hirofumiwakasugi" creationdate="20150906T115035Z">
        <seg>Crystal では、初期化せず変数を宣言することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal allows you to bind to existing C libraries without writing a single line in C.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T032038Z" creationid="hirofumiwakasugi" creationdate="20151003T141857Z">
        <seg>Crystal では、既存の C ライブラリに対して、C を1行も書かずにバインディングすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal can generate documentation from comments using a subset of &lt;g1&gt;Markdown&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214859Z" creationid="makenowjust" creationdate="20200412T210253Z">
        <seg>Crystal は、&lt;g1&gt;Markdown&lt;/g1&gt;のサブセットのコメントからドキュメントを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal comes with a fully-featured spec library in the &lt;g1&gt;&lt;g2&gt;Spec&lt;/g2&gt; module&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T124010Z" creationid="akiji" creationdate="20200505T124010Z">
        <seg>Crystalには、 &lt;g1&gt;&lt;g2&gt;Spec&lt;/g2&gt;モジュール&lt;/g1&gt;内に、フル機能の spec ライブラリが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal documentation comments use a subset of [Markdown](https://daringfireball.net/projects/markdown/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033327Z" creationid="hirofumiwakasugi" creationdate="20151010T012259Z">
        <seg>Crystal のドキュメンテーションコメントは [Markdown](https://daringfireball.net/projects/markdown/) のサブセットになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal files end with the `.cr` extension.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072004Z" creationid="hirofumiwakasugi" creationdate="20150901T072004Z">
        <seg>Crystal のファイルには `.cr` という拡張子がつきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has Channels inspired by &lt;g1&gt;CSP&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102704Z" creationid="akiji" creationdate="20200428T055203Z">
        <seg>Crystalは&lt;g1&gt;CSP&lt;/g1&gt;を参考にしたチャネルを有しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal has a dedicated syntax to easily call native libraries, eliminating the need to reimplement low-level tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222234Z" creationid="makenowjust" creationdate="20200413T221525Z">
        <seg>Crystal ではネイティブのライブラリを呼ぶため構文を持っており、低レベルのタスクの再実装は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is a programming language that resembles Ruby but compiles to native code and tries to be much more efficient, at the cost of disallowing certain dynamic aspects of Ruby.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T031516Z" creationid="hirofumiwakasugi" creationdate="20150831T050601Z">
        <seg>Crystal は Ruby とよく似たプログラミング言語ですが、ネイティブコードにコンパイルされ、Ruby よりずっと効率的に動作するものを目指しています。一方で、そのために Ruby が持っている動的な機能についてはいくらか制限されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is a programming language with the following goals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221028Z" creationid="makenowjust" creationdate="20200412T221028Z">
        <seg>Crystal は次の目標を掲げるプログラミング言語です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is statically type checked, so any type errors will be caught early by the compiler rather than fail on runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211921Z" creationid="makenowjust" creationdate="20200413T211113Z">
        <seg>Crystal は静的に型チェックされるプログラミング言語です。そのため、実行時にエラーを起こすのではなく、コンパイラが早期に型エラーを発見するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal is typically accompanied by Shards, its dependency manager.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173104Z" creationid="makenowjust" creationdate="20200419T173104Z">
        <seg>Crystal には通常、依存関係管理ツールとして Shards が付随しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal libraries are packed as Shards, and distributed via Git without needing a centralised repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221638Z" creationid="makenowjust" creationdate="20200413T221638Z">
        <seg>Crystal のライブラリは Shards と呼ばれ、中央集権的なリポジトリを持たず Git で配布されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal provides basic methods to do type reflection, casting and introspection.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T004656Z" creationid="hirofumiwakasugi" creationdate="20150930T004607Z">
        <seg>Crystal は型のリフレクションやキャスト、そしてイントロスペクションのための基本的なメソッドを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal provides several literals for creating values of some basic types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000352Z" creationid="makenowjust" creationdate="20200414T000352Z">
        <seg>Crystal には、数多くの基本的な型に対応したリテラルが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports a basic form of [cross compilation](http://en.wikipedia.org/wiki/Cross_compiler).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044528Z" creationid="hirofumiwakasugi" creationdate="20150909T044528Z">
        <seg>Crystal は基本的な[クロスコンパイル](http://en.wikipedia.org/wiki/Cross_compiler)をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports an additional literal for arrays and array-like types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173411Z" creationid="makenowjust" creationdate="20200420T173411Z">
        <seg>Crystal はさらに、配列ライクな型のためのリテラルをサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal supports an additional literal for hashes and hash-like types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175914Z" creationid="makenowjust" creationdate="20200420T175914Z">
        <seg>Crystal はさらにハッシュライクな型のためのリテラルをサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal top sponsors</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221957Z" creationid="makenowjust" creationdate="20200413T221957Z">
        <seg>Crystal のトップスポンサー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal uses green threads, called fibers, to achieve concurrency.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221214Z" creationid="makenowjust" creationdate="20200413T221201Z">
        <seg>Crystal はファイバーと呼ばれる軽量スレッドを用いて、並列性を獲得しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's built-in code formatter can be used not just to format your code,
but also to format code samples included in documentation blocks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215457Z" creationid="makenowjust" creationdate="20200412T215457Z">
        <seg>Crystal に組み込みのコードフォーマッタはコードのフォーマットのためだけでなく、ドキュメンテーションコメント中のコードブロックもフォーマットのためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal's way to do error handling is by raising and rescuing exceptions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012658Z" creationid="hirofumiwakasugi" creationdate="20150907T010624Z">
        <seg>Crystal では、例外を発生 (raise) させ、それを捕捉 (rescue) することによってエラーハンドリングを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal’s answer to metaprogramming is a powerful macro system, which ranges from basic templating and AST inspection, to types inspection and running arbitrary external programs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221023Z" creationid="makenowjust" creationdate="20200413T221001Z">
        <seg>Crystal はメタプログラミングに対する答えとして、強力なマクロシステムを備えています。この力は基本的なテンプレート処理から AST の分析や型の分析、さらには外部コマンドの実行までに及びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Crystal’s syntax is heavily inspired by Ruby’s, so it feels natural to read and easy to write, and has the added benefit of a lower learning curve for experienced Ruby devs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210741Z" creationid="makenowjust" creationdate="20200413T210741Z">
        <seg>Crystal の構文は Ruby の影響をつよく受けています。そのため自然に読めて、簡単に書けます。そして、 Ruby 開発の経験があれば習得は容易でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Curses::Window.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131046Z" creationid="hirofumiwakasugi" creationdate="20150911T131046Z">
        <seg>Curses::Window.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>DEPRECATED</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214452Z" creationid="makenowjust" creationdate="20200412T214452Z">
        <seg>DEPRECATED</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Default value is the first directory that either exists or can be created of &lt;g6&gt;${XDG_CACHE_HOME}/crystal&lt;/g6&gt; (if &lt;g7&gt;XDG_CACHE_HOME&lt;/g7&gt; is defined), &lt;g8&gt;${HOME}/.cache/crystal&lt;/g8&gt;, &lt;g9&gt;${HOME}/.crystal&lt;/g9&gt;, &lt;g10&gt;./.crystal&lt;/g10&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170637Z" creationid="makenowjust" creationdate="20200419T170637Z">
        <seg>デフォルト値は次に上げるディレクトリのうち最初に見つかったか作成可能だったものになります: &lt;g6&gt;${XDG_CACHE_HOME}/crystal&lt;/g6&gt; (&lt;g7&gt;XDG_CACHE_HOME&lt;/g7&gt;がある場合)、&lt;g8&gt;${HOME}/.cache/crystal&lt;/g8&gt;、&lt;g9&gt;${HOME}/.crystal&lt;/g9&gt;、もしくは&lt;g10&gt;./.crystal&lt;/g10&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221554Z" creationid="makenowjust" creationdate="20200413T221554Z">
        <seg>依存関係の管理</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Description copied from class `Animal`

Returns the name of `self`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213317Z" creationid="makenowjust" creationdate="20200412T213317Z">
        <seg>Description copied from class `Animal`

Returns the name of `self`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Development dependencies won't be installed and only locked dependencies will be installed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175813Z" creationid="makenowjust" creationdate="20200419T175813Z">
        <seg>開発用の依存関係は実行されずロックされた依存関係のみがインストールされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Did you notice that in all of the previous examples we never said the types of a `Person`'s `@name` and `@age`? This is because the compiler inferred them for us.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053528Z" creationid="hirofumiwakasugi" creationdate="20150904T130628Z">
        <seg>これまでの例の中で、`Person` の `@name` と `@age` に対して特に型の指定をしていなかったことに気づいたでしょうか。その理由は、コンパイラには自動的に型を推論する機能があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Directory and File Names</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204201Z" creationid="makenowjust" creationdate="20200412T204201Z">
        <seg>ディレクトリとファイル名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Do you consider yourself a helpful person?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165126Z" creationid="makenowjust" creationdate="20200412T221958Z">
        <seg>助けを求める人のことを考えていますか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documentation should be positioned right above definitions of classes, modules, and methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211629Z" creationid="makenowjust" creationdate="20200412T211624Z">
        <seg>ドキュメンテーションコメントはクラス、モジュール、そしてメソッド定義のすぐ上に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Documenting code</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T210059Z" creationid="makenowjust" creationdate="20200412T210059Z">
        <seg>コードのドキュメント化</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the file for your platform and uncompress it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055747Z" creationid="hirofumiwakasugi" creationdate="20150831T055747Z">
        <seg>それぞれのプラットフォームに合わせて適切なファイルをダウンロードして展開してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Download the file for your platform and uncompress it. Inside it you will have a `bin/crystal` executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T082936Z" creationid="hirofumiwakasugi" creationdate="20150831T082936Z">
        <seg>それぞれのプラットフォームに合わせて適切なファイルをダウンロードして展開してください。その中に、`bin/crystal` という実行ファイルが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each block variable has the type of every yield expression in that position.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023224Z" creationid="hirofumiwakasugi" creationdate="20150916T022816Z">
        <seg>ブロックの変数はすべての yield 式に応じた型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each constant in the enum has the type of the enum:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024540Z" creationid="hirofumiwakasugi" creationdate="20150914T024431Z">
        <seg>Enum のそれぞれの定数は Enum の型を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each example can contain multiple expectations, but it should test only one specific behaviour.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T132534Z" creationid="akiji" creationdate="20200505T132511Z">
        <seg>各実行例には複数の式を含めることが可能ですが、1つの挙動に対するテストのみを行うべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each of the above kinds of variables will be explained later on.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054307Z" creationid="hirofumiwakasugi" creationdate="20150902T054307Z">
        <seg>上記のそれぞれの変数の種類については改めて説明します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Easy, peasy!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180825Z" creationid="makenowjust" creationdate="20200413T180825Z">
        <seg>簡単です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Employee.new "John", "Acme" # OK
Employee.new "Peter" # Error: wrong number of arguments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023917Z" creationid="hirofumiwakasugi" creationdate="20150910T023843Z">
        <seg>Employee.new "John", "Acme" # OK
Employee.new "Peter" # 'Employee:Class#new' (1 for 2) を実行すると</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty array literals always need a type specification:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173302Z" creationid="makenowjust" creationdate="20200420T173302Z">
        <seg>空の配列リテラルは常に型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Empty hash literals always need type specifications:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175829Z" creationid="makenowjust" creationdate="20200420T175829Z">
        <seg>空のハッシュリテラルは常に型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enums are a type-safe alternative to [Symbol](http://crystal-lang.org/api/Symbol.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012004Z" creationid="hirofumiwakasugi" creationdate="20150916T011713Z">
        <seg>Enum は、型安全な[シンボル](http://crystal-lang.org/api/Symbol.html)の代替物として利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Environment variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165947Z" creationid="makenowjust" creationdate="20200419T165947Z">
        <seg>環境変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Equivalence, Identity and Type</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T134801Z" creationid="akiji" creationdate="20200505T134801Z">
        <seg>等価性、同一性、型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Escaping</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191546Z" creationid="makenowjust" creationdate="20200419T191546Z">
        <seg>エスケープ文字</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though the instance has two `Int32` fields, the compiler always includes an extra `Int32` field for the type id of the object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121004Z" creationid="hirofumiwakasugi" creationdate="20150906T120905Z">
        <seg>上記では、インスタンスは2つの `Int32` のフィールドを持っています。ただし、オブジェクトの型 ID のために、コンパイラによって常に `Int32` フィールドが追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though this logic might improve in the future, right now it forces you to keep your exception handlers to their necessary minimum, making the code's intention more clear:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023041Z" creationid="hirofumiwakasugi" creationdate="20150907T022721Z">
        <seg>このロジックは将来的には改定されるかもしれません。ただ、現時点では例外処理の中で行うことは必要最小限に留め、コードの意図を明確にして書くことが求められます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Event loop</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T054358Z" creationid="akiji" creationdate="20200428T054358Z">
        <seg>イベントループ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Eventually generates a
new &lt;g2&gt;shard.lock&lt;/g2&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181247Z" creationid="makenowjust" creationdate="20200419T181247Z">
        <seg>最終的には新たな&lt;g2&gt;shard.lock&lt;/g2&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every class except `Object`, the hierarchy root, inherits from another class (its superclass).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023224Z" creationid="hirofumiwakasugi" creationdate="20150910T023224Z">
        <seg>クラス階層のルートクラスである `Object` を除き、すべてのクラスは他のクラス (スーパークラス) を継承しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Every time you use an alias the compiler replaces it with the type it refers to.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070921Z" creationid="hirofumiwakasugi" creationdate="20150919T070916Z">
        <seg>エイリアスはコンパイラによって、それらが参照している型に置き変えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of `inherited`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014442Z" creationid="hirofumiwakasugi" creationdate="20151002T014434Z">
        <seg>`inherited` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example of `method_missing`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014452Z" creationid="hirofumiwakasugi" creationdate="20151002T014452Z">
        <seg>`method_missing` の例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163400Z" creationid="makenowjust" creationdate="20200419T154707Z">
        <seg>例:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Example: &lt;g1&gt;overview/hello_world.md&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T040606Z" creationid="makenowjust" creationdate="20200413T164825Z">
        <seg>例: &lt;g1&gt;overview/hello_world.md&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Examples</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T070410Z" creationid="akiji" creationdate="20200518T070410Z">
        <seg>コマンド例</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested meaning a start delimiter inside the string escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193305Z" creationid="makenowjust" creationdate="20200419T193305Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested; meaning a start delimiter inside the literal escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042334Z" creationid="makenowjust" creationdate="20200421T042334Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Except for the pipes, all delimiters can be nested; meaning a start delimiter inside the string escapes the next end delimiter.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172119Z" creationid="makenowjust" creationdate="20200420T172119Z">
        <seg>パイプ文字を除いて、すべての区切り文字はネストに応じて適切に処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exception handling has a short syntax form: assume a method definition is an implicit `begin ... end` expression, then specify `rescue`, `ensure` and `else` clauses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014221Z" creationid="hirofumiwakasugi" creationdate="20150907T014221Z">
        <seg>例外処理には短縮記法が用意されています。それは、メソッドの定義は暗黙的に `begin ... end` 構文であるとして `rescue`/`ensure`/`else` を使用できるというものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Execution of a program</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T072511Z" creationid="akiji" creationdate="20200428T055342Z">
        <seg>プログラムの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Exit status:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180413Z" creationid="makenowjust" creationdate="20200419T180413Z">
        <seg>終了コード:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expectations</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T074814Z" creationid="akiji" creationdate="20200505T134514Z">
        <seg>Expectation（想定結果）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expectations define if the value being tested (&lt;g1&gt;actual&lt;/g1&gt;) matches a certain value or specific criteria.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T135251Z" creationid="akiji" creationdate="20200505T134730Z">
        <seg>Expactationは、テスト対象の（&lt;g1&gt;実際の&lt;/g1&gt;）値が、特定の値や一定の基準に合致するかどうかを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expected: true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165202Z" creationid="makenowjust" creationdate="20200419T165202Z">
        <seg>Expected: true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Expecting errors</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T141636Z" creationid="akiji" creationdate="20200505T141636Z">
        <seg>エラーを想定する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Explicit types can be specified by immediately following the closing bracket with &lt;g1&gt;of&lt;/g1&gt; (separated by whitespace), a key type (&lt;g2&gt;K&lt;/g2&gt;) followed by &lt;g3&gt;=&gt;&lt;/g3&gt; as delimiter and a value type (&lt;g4&gt;V&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175704Z" creationid="makenowjust" creationdate="20200420T175704Z">
        <seg>閉じひげ括弧のあとに続けて&lt;g1&gt;of&lt;/g1&gt;とキーの型 (&lt;g2&gt;K&lt;/g2&gt;)、さらに &lt;g3&gt;=&gt;&lt;/g3&gt; に続けて値の型 (&lt;g4&gt;V&lt;/g4&gt;) を置くことで、明示的に型を指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>FIXME</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214454Z" creationid="makenowjust" creationdate="20200412T214454Z">
        <seg>FIXME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Failure/Error: false.should eq(true)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165201Z" creationid="makenowjust" creationdate="20200419T165201Z">
        <seg>Failure/Error: false.should eq(true)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T054108Z" creationid="akiji" creationdate="20200428T054040Z">
        <seg>ファイバ（Fiber）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers communicate with each other using channels, as in Go or Clojure, without having to turn to shared memory or locks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221339Z" creationid="makenowjust" creationdate="20200413T221339Z">
        <seg>ファイバー同士は Go や Clojure のようなチャネルを用いて協調します。共有メモリやロックは用いません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers ready to be executed: for example when you spawn a fiber, it's ready to be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062959Z" creationid="akiji" creationdate="20200428T062959Z">
        <seg>実行可能なファイバ（例えば，新しく生成されたファイバは実行可能な状態です）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers that voluntarily asked to wait: this is done with &lt;g1&gt;Fiber.yield&lt;/g1&gt;, which means "I can continue executing, but I'll give you some time to execute other fibers if you want".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150712Z" creationid="akiji" creationdate="20200428T063643Z">
        <seg>自主的に待機しているファイバ（&lt;g1&gt;Fiber.yield&lt;/g1&gt;によって「続けて実行できるけれど、他に実行したいファイバがあれば、そっちを実行してていいよ」と宣言したもの）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fibers, unlike threads, are cooperative.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062111Z" creationid="akiji" creationdate="20200428T062111Z">
        <seg>ファイバはスレッドと違って協調的に動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>File paths match the namespace of their contents.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011646Z" creationid="hirofumiwakasugi" creationdate="20151010T011629Z">
        <seg>ファイルパスは、そのファイルの内容の名前空間と一致するようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Files are named after the class or namespace they define, with &lt;g1&gt;underscore-case&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204717Z" creationid="makenowjust" creationdate="20200412T204717Z">
        <seg>ファイル名は、そこで定義されるクラス名や名前空間にしたがって、&lt;g1&gt;アンダースコア区切り&lt;/g1&gt;で命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Files are named after the class or namespace they define, with _underscore-case_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011806Z" creationid="hirofumiwakasugi" creationdate="20151010T011643Z">
        <seg>ファイル名は、そこで定義されるクラスや名前空間にしたがって、「アンダースコア区切り」で命名します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can omit the &lt;g1&gt;case&lt;/g1&gt;'s value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093314Z" creationid="makenowjust" creationdate="20200424T093314Z">
        <seg>そして、&lt;g1&gt;case&lt;/g1&gt;の値を部分を省略することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, you can ommit the `case`'s value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010125Z" creationid="hirofumiwakasugi" creationdate="20151001T010125Z">
        <seg>`case` の値を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First you have to add the repository to your APT configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071555Z" creationid="hirofumiwakasugi" creationdate="20150831T052657Z">
        <seg>まずは、公式の Crystal リポジトリを追加するために Apt を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First you have to add the repository to your YUM configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071623Z" creationid="hirofumiwakasugi" creationdate="20150831T055100Z">
        <seg>まずは、公式の Crystal リポジトリを追加するために Yum を構成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, note the `self.new` notation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060206Z" creationid="hirofumiwakasugi" creationdate="20150904T060206Z">
        <seg>まず、`self.new` と書いていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, the program spawns a fiber but doesn't execute it yet.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081036Z" creationid="akiji" creationdate="20200428T081036Z">
        <seg>まず、プログラムはファイバを生成しますが、まだそのファイバは実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flag keywords must be the first word in their respective line and must be in all caps.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215234Z" creationid="makenowjust" creationdate="20200412T214613Z">
        <seg>フラグ付けのキーワードはそれぞれの行の最初の単語であり、かつすべて大文字でなければいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Flagging Classes, Modules, and Methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214256Z" creationid="makenowjust" creationdate="20200412T214256Z">
        <seg>クラス、モジュール、そしてメソッドに対するフラグ付け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Float64 |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>Float64 |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Floats</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190701Z" creationid="makenowjust" creationdate="20200419T185611Z">
        <seg>浮動小数点数 (Float)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Focusing on a group of specs</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101428Z" creationid="akiji" creationdate="20200516T101428Z">
        <seg>特定のグループにフォーカスしたspec</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Follow these conventions so your code will be more accessible to other developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T141816Z" creationid="hirofumiwakasugi" creationdate="20151009T141444Z">
        <seg>他の開発者が利用しやすいように、以下の規約に沿ってコードを書くようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041701Z" creationid="hirofumiwakasugi" creationdate="20150910T041701Z">
        <seg>Foo.new
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new.yield_with_self { emphasize(10) } #=&gt; "***10***"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020425Z" creationid="hirofumiwakasugi" creationdate="20151001T020425Z">
        <seg>Foo.new.yield_with_self { emphasize(10) } #=&gt; "***10***"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030945Z" creationid="hirofumiwakasugi" creationdate="20150916T030945Z">
        <seg>Foo.new.yield_with_self { one } # =&gt; 1
Foo.new.yield_normally { one }  # =&gt; "one"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For [Reference](http://crystal-lang.org/api/Reference.html) types, the size is the same as the size of a pointer:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035907Z" creationid="hirofumiwakasugi" creationdate="20150906T035438Z">
        <seg>[Reference](http://crystal-lang.org/api/Reference.html) 型である場合は、そのサイズはポインタのサイズと同じになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a generic type like &lt;g1&gt;Set&lt;/g1&gt;, the generic type &lt;g2&gt;T&lt;/g2&gt; is inferred from the types of the elements in the same way as with the array literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174630Z" creationid="makenowjust" creationdate="20200420T173722Z">
        <seg>ジェネリック型である&lt;g1&gt;Set&lt;/g1&gt;に対しては、ジェネリック型 &lt;g2&gt;T&lt;/g2&gt; が配列リテラルと同様の方法で要素の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a generic type, the generic types are inferred from the types of the keys and values in the same way as with the hash literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180533Z" creationid="makenowjust" creationdate="20200420T180533Z">
        <seg>ジェネリック型の場合、型引数はハッシュリテラルと同様の方法でキーと値の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a non-generic type like &lt;g1&gt;HTTP::Headers&lt;/g1&gt;, this is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180255Z" creationid="makenowjust" creationdate="20200420T180255Z">
        <seg>ジェネリック型でない型&lt;g1&gt;HTTP::Headers&lt;/g1&gt;に対しては、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For a non-generic type like &lt;g1&gt;IO::Memory&lt;/g1&gt;, this is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173623Z" creationid="makenowjust" creationdate="20200420T173623Z">
        <seg>ジェネリック型ではない型&lt;g1&gt;IO::Memory&lt;/g1&gt;に対しては、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For an unquoted identifier the same naming rules apply as for methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171342Z" creationid="makenowjust" creationdate="20200420T171342Z">
        <seg>ダブルクォートで囲まれていない識別子の場合は、メソッド名として受け入れられるものと同じ規則の名前が受け入れられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For comparing an expression against a &lt;g1&gt;case&lt;/g1&gt;'s value the &lt;g2&gt;case equality operator&lt;/g2&gt; &lt;g3&gt;===&lt;/g3&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091706Z" creationid="makenowjust" creationdate="20200424T091002Z">
        <seg>&lt;g1&gt;case&lt;/g1&gt;において、対象の値と条件式は&lt;g2&gt;case 等価性演算子&lt;/g2&gt; (&lt;g3&gt;===&lt;/g3&gt;) によって比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For easy setup just run in your command line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062024Z" creationid="hirofumiwakasugi" creationdate="20150831T052806Z">
        <seg>簡単にその設定を行うためのスクリプトを用意していますので、以下のコマンドをそのまま実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For everything I/O related there's an event loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065005Z" creationid="akiji" creationdate="20200428T054702Z">
        <seg>I/Oに関係するものであればなんでも、イベントループのお世話になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020139Z" creationid="hirofumiwakasugi" creationdate="20150902T020139Z">
        <seg>例をあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example &lt;g2&gt;#from_json&lt;/g2&gt;,  &lt;g3&gt;#to_io&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203943Z" creationid="makenowjust" creationdate="20200412T203943Z">
        <seg>例えば、&lt;g2&gt;#from_json&lt;/g2&gt;や&lt;g3&gt;#to_io&lt;/g3&gt;などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example `#from_json`,  `#to_io`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010913Z" creationid="hirofumiwakasugi" creationdate="20151010T010913Z">
        <seg>例えば、`#from_json` や `#to_io` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example if there's I/O to be waited on, a fiber will tell the scheduler "Look, I have to wait for this I/O to be available, you continue executing other fibers and come back to me when that I/O is ready".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102850Z" creationid="akiji" creationdate="20200428T062404Z">
        <seg>例えばI/O による待ちが発生していた場合、ファイバはランタイムスケジューラに対して「おーい，自分はI/Oが使えるようになるまで待たないといけないから、他のファイバを実行していいよ。I/Oの準備ができたら帰ってきてね」と告げます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example on a Linux it could say "x86_64-unknown-linux-gnu".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045311Z" creationid="hirofumiwakasugi" creationdate="20150909T045258Z">
        <seg>例えば、Linux であれば "x86_64-unknown-linux-gnu" となるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example the very well known `size_t` type is defined like this in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043749Z" creationid="hirofumiwakasugi" creationdate="20150908T043727Z">
        <seg>例えば、`size_t` というよく知られた型は、Crystal では以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <note>BufferdIOはクラスではなくモジュールに変更されたため、ここの記述は要修正。
https://github.com/manastech/crystal/issues/1453</note>
      <tuv lang="EN-US">
        <seg>For example there's the standard library's `BufferedIO(T)`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T060855Z" creationid="hirofumiwakasugi" creationdate="20150912T073316Z">
        <seg>例えば、標準ライブラリに `BufferedIO(T)` というものがあります。 (訳注: `BufferedIO(T)` はクラスではなくモジュールに変更されたので、これ以降の内容は現在の Crystal には当てはまらないため翻訳していません。[An example code in the docs' "Generics" doesn't work](https://github.com/manastech/crystal/issues/1453))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g1&gt;HTTP::WebSocket&lt;/g1&gt; is defined in &lt;g2&gt;src/http/web_socket.cr&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204823Z" creationid="makenowjust" creationdate="20200412T204823Z">
        <seg>例えば、&lt;g1&gt;HTTP::WebSocket&lt;/g1&gt;は&lt;g2&gt;src/http/web_socket.cr&lt;/g2&gt;で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g2&gt;HTTP&lt;/g2&gt;, and &lt;g3&gt;LibXML&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203904Z" creationid="makenowjust" creationdate="20200412T203904Z">
        <seg>例えば、&lt;g2&gt;HTTP&lt;/g2&gt;や&lt;g3&gt;LibXML&lt;/g3&gt;などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, &lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt; defines case equality as when an object is an instance of that class, &lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt; as when the value matches the regular expression and &lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt; as when the value is included in that range.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091406Z" creationid="makenowjust" creationdate="20200424T091406Z">
        <seg>例えば、&lt;g6&gt;&lt;g7&gt;Class&lt;/g7&gt;&lt;/g6&gt; 型では case 等価性が「比較対象のオブジェクトがそのクラスのインスタンスかどうか」として定義されていたり、&lt;g8&gt;&lt;g9&gt;Regex&lt;/g9&gt;&lt;/g8&gt; では「比較対象の文字列にマッチするかどうか」で、&lt;g10&gt;&lt;g11&gt;Range&lt;/g11&gt;&lt;/g10&gt;では「比較対象の値が含まれるかどうか」で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, `HTTP::WebSocket` is defined in `src/http/web_socket.cr`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011824Z" creationid="hirofumiwakasugi" creationdate="20151010T011824Z">
        <seg>例えば、`HTTP::WebSocket` は `src/http/web_socket.cr` で定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, `HTTP`, and `LibXML`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010844Z" creationid="hirofumiwakasugi" creationdate="20151010T010702Z">
        <seg>例えば、`HTTP` や `LibXML` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, a block which is given an object to use as the default receiver by being invoked with `with ... yield` can access macros defined within that object's ancestors chain:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020339Z" creationid="hirofumiwakasugi" creationdate="20151001T015927Z">
        <seg>例えば、ブロックが与えられていて、`with ... yield` によってデフォルトのレシーバがあるオブジェクトに設定されているときには、そのオブジェクトの継承チェーンの中で定義されているマクロにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, an API's method can specify a [type restriction](type_restrictions.html) using an enum type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011956Z" creationid="hirofumiwakasugi" creationdate="20150916T011820Z">
        <seg>例えば、Enum 型を利用して API のメソッド[型制約](type_restrictions.html)を設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if static libraries are put in &lt;g2&gt;build/libs&lt;/g2&gt;, setting the environment variable accordingly will tell the compiler to look for libraries there.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T171230Z" creationid="makenowjust" creationdate="20200419T171230Z">
        <seg>例えば静的ライブラリが&lt;g2&gt;build/libs&lt;/g2&gt;に置かれていたとすると、環境変数をそれに応じて設定することでコンパイラがそこにライブラリを探索しに行くように伝えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if we define a class that has a `+` method but isn't a `Number`, we can use the `add` method that doesn't have type restrictions, but we can't use the `add` method that has restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T014211Z" creationid="hirofumiwakasugi" creationdate="20150908T013756Z">
        <seg>例えば、`Number` ではないクラスが `+` メソッドを持っている場合を考えてみてください。もし `add` というメソッドが型制約を持たない場合、それらのクラスを利用することができますが、型制約がある場合には利用することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if we take the above code and add this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055638Z" creationid="hirofumiwakasugi" creationdate="20150912T055534Z">
        <seg>例えば、上記のコードに以下を追加したとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you are on a Mac, the `uname -m -s` command says "Darwin x86_64".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045102Z" creationid="hirofumiwakasugi" creationdate="20150909T045017Z">
        <seg>例えば Mac の場合であれば、`uname -m -s` コマンドの実行結果は "Darwin x86_64" です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, if you put &lt;g1&gt;require "foo"&lt;/g1&gt; in &lt;g2&gt;project.cr&lt;/g2&gt; and run &lt;g3&gt;crystal src/project.cr&lt;/g3&gt; in the project's root directory, it will find &lt;g4&gt;foo&lt;/g4&gt; in &lt;g5&gt;lib/foo/foo.cr&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090405Z" creationid="makenowjust" creationdate="20200427T090405Z">
        <seg>このとき &lt;g2&gt;project.cr&lt;/g2&gt; に &lt;g1&gt;require "foo"&lt;/g1&gt; を加えて &lt;g3&gt;crystal src/project.cr&lt;/g3&gt; をプロジェクトのルートディレクトリで実行すると、コンパイラは &lt;g4&gt;foo&lt;/g4&gt; として &lt;g5&gt;lib/foo/foo.cr&lt;/g5&gt; を発見します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, invoking `ASTNode#id` in the above example solves the problem:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035808Z" creationid="hirofumiwakasugi" creationdate="20151001T035808Z">
        <seg>例えば、上記の例では、`ASTNode#id` を実行することで問題を解決できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, reassigning a variable with a different expression makes it have that expression’s type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053053Z" creationid="hirofumiwakasugi" creationdate="20150902T052132Z">
        <seg>例えば、次のようにローカル変数に別の式を再代入すると、その新しい式の型の変数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, suppose a ficticious library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052141Z" creationid="hirofumiwakasugi" creationdate="20151008T052141Z">
        <seg>例えば、以下のようなライブラリがあるものと考えてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the `String` class implements `to_unsafe` to return `UInt8*`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045122Z" creationid="hirofumiwakasugi" creationdate="20151005T045122Z">
        <seg>例えば、`String` クラスが `UInt8*` を返す `to_unsafe` を実装している場合を考えてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, the standard library includes a `times` method on integers, allowing you to write:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161541Z" creationid="hirofumiwakasugi" creationdate="20150916T031807Z">
        <seg>例えば、標準ライブラリには `times` という整数のメソッドがあり、それを使うと以下のように書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, this works as expected:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080837Z" creationid="akiji" creationdate="20200428T080837Z">
        <seg>例えば、以下のコードは想定した通りに動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we can define four different `become_older` methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071421Z" creationid="hirofumiwakasugi" creationdate="20150906T071338Z">
        <seg>例えば、`become_older` であれば、以下の4つの異なるメソッドを定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example, we may run &lt;g1&gt;crystal -v&lt;/g1&gt; and Crystal will display:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172031Z" creationid="makenowjust" creationdate="20200413T172031Z">
        <seg>例えば&lt;g1&gt;crystal -v&lt;/g1&gt;を実行すると、Crystal は次のように表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150831Z" creationid="hirofumiwakasugi" creationdate="20150901T072338Z">
        <seg>例をあげます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: &lt;g3&gt;LibC&lt;/g3&gt;, &lt;g4&gt;LibEvent2&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204151Z" creationid="makenowjust" creationdate="20200412T204151Z">
        <seg>例えば、&lt;g3&gt;LibC&lt;/g3&gt;や&lt;g4&gt;LibEvent2&lt;/g4&gt;などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: `@[Link(ldflags: "-lpcre")]`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143202Z" creationid="hirofumiwakasugi" creationdate="20151003T143202Z">
        <seg>例: `@[Link(ldflags: "-lpcre")]`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For example: `LibC`, `LibEvent2`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011023Z" creationid="hirofumiwakasugi" creationdate="20151010T011023Z">
        <seg>例えば、`LibC` や `LibEvent2` などです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For instance:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140125Z" creationid="hirofumiwakasugi" creationdate="20151010T140125Z">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For integers and floats you can use the various `to_...` methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041211Z" creationid="hirofumiwakasugi" creationdate="20151005T041211Z">
        <seg>整数と浮動小数点数に関しては、様々な `to_...` メソッドが利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For more details see &lt;g4&gt;Using the compiler – Creating documentation&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211548Z" creationid="makenowjust" creationdate="20200412T211548Z">
        <seg>より詳細には&lt;g4&gt;コンパイラの利用 - ドキュメントの生成&lt;/g4&gt;を閲覧してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For nested procs (and any type, in general), you can use parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011652Z" creationid="hirofumiwakasugi" creationdate="20151009T011652Z">
        <seg>ネストされた Proc に対しては (および実際にはどんな型であっても) カッコを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For our second application, we will add a &lt;g1&gt;text decoration&lt;/g1&gt; (&lt;g2&gt;blink&lt;/g2&gt;in this case):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184435Z" creationid="makenowjust" creationdate="20200413T184435Z">
        <seg>ユーザーの入力を受け取る方のアプリケーションに、今回は&lt;g2&gt;blink&lt;/g2&gt; (点滅)という&lt;g1&gt;テキストの装飾&lt;/g1&gt;を追加してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For simple development builds, there is usually no reason to do so.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152313Z" creationid="makenowjust" creationdate="20200419T152313Z">
        <seg>開発時のビルドであれば、リリースビルドをする必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For starters, our applications already display information but (I think) we could do better.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182942Z" creationid="makenowjust" creationdate="20200413T182942Z">
        <seg>はじめに、アプリケーションは現時点でも情報を表示してはいるけど、そこまで良い表示だとは言えません。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For the above example to output the docs at &lt;g1&gt;public&lt;/g1&gt; with custom canonical base url, and entrypoint &lt;g2&gt;src/my_app.cr&lt;/g2&gt;,
the following arguments can be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163130Z" creationid="makenowjust" creationdate="20200419T162946Z">
        <seg>次の例ではcanonicalなベースURLを明示的に指定した上で、&lt;g1&gt;public&lt;/g1&gt;を出力先のディレクトリにして, そして&lt;g2&gt;src/my_app.cr&lt;/g2&gt;をエントリーポイントとしてドキュメントを生成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For these two situations, the &lt;g3&gt;OptionParser&lt;/g3&gt; class has two methods: &lt;g4&gt;#invalid_option&lt;/g4&gt; and &lt;g5&gt;#missing_option&lt;/g5&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180120Z" creationid="makenowjust" creationdate="20200413T180120Z">
        <seg>2つの状況に応じて、&lt;g3&gt;OptionParser&lt;/g3&gt;クラスは&lt;g4&gt;#invalid_option&lt;/g4&gt;と&lt;g5&gt;#missing_option&lt;/g5&gt;という2つメソッドを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For this to be useful the method name should have some reference to the module, otherwise chances of name clashes are high.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150623Z" creationid="hirofumiwakasugi" creationdate="20150911T150305Z">
        <seg>ただ、名前が衝突する可能性も高くなってしまうため、モジュールに関連したメソッド名にしておくことがこのパターンを有効に活用するコツになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For unit tests, it is recommended to follow the conventions for method names: Outer &lt;g1&gt;describe&lt;/g1&gt; is the name of the class, inner &lt;g2&gt;describe&lt;/g2&gt; targets methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233859Z" creationid="akiji" creationdate="20200505T133821Z">
        <seg>単体テストでは、外側の&lt;g1&gt;describe&lt;/g1&gt;にクラス名を、内側の&lt;g2&gt;describe&lt;/g2&gt;にテスト対象のメソッドを指定するという組み合わせが推奨されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Free variables allow type inference to be used when creating generic types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072402Z" creationid="hirofumiwakasugi" creationdate="20150908T040818Z">
        <seg>自由変数を使うことで、ジェネリック型を作るときに型推論を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From methods</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172018Z" creationid="makenowjust" creationdate="20200422T172018Z">
        <seg>メソッドから Proc を生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>From this you can see that the main routine is simply the program itself: there's no need to define a "main" function or something similar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072454Z" creationid="hirofumiwakasugi" creationdate="20150901T072454Z">
        <seg>このプログラムを見ればわかる通り、Crystal ではプログラム自体がメインルーチンとなります。つまり、「main」関数やそれに値するものを定義する必要はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Fund Crystal and help it become production-ready at</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210319Z" creationid="makenowjust" creationdate="20200413T210319Z">
        <seg>production-readyに向けてファンドをお願いします: </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Further &lt;g4&gt;describe&lt;/g4&gt; sections can be nested within the outer unit to specify smaller units under test (such as individual methods).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233247Z" creationid="akiji" creationdate="20200505T133722Z">
        <seg> &lt;g4&gt;describe&lt;/g4&gt;セクションはネストさせることができ、より小さな単位 （個々のメソッドなど）を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Garbage Collector: to clean up "no longer used" memory.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T113144Z" creationid="akiji" creationdate="20200428T055808Z">
        <seg>"もう使用されない" メモリを掃除する「ガベージコレクタ」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic Type Argument</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172914Z" creationid="makenowjust" creationdate="20200420T172914Z">
        <seg>ジェネリック型引数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Generic classes and structs can be inherited.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061942Z" creationid="hirofumiwakasugi" creationdate="20150924T061642Z">
        <seg>ジェネリックなクラスとモジュールを継承することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given a valid keyword, Crystal will automatically generate visual flags that help highlight problems, notes and/or possible issues.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214434Z" creationid="makenowjust" creationdate="20200412T214434Z">
        <seg>特定のキーワードを与えると Crystal は自動で問題や注意を強調するために、視覚的なフラグを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Given the same number of arguments, the compiler will try to sort them by leaving the less restrictive ones to the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072545Z" creationid="hirofumiwakasugi" creationdate="20150906T072441Z">
        <seg>もし同じ数の引数をとるメソッドが複数ある場合、コンパイラは最も制約の少ないものが最後にくる (優先されない) ようにソートを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gives a hint to the compiler to always inline a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073142Z" creationid="hirofumiwakasugi" creationdate="20150919T073142Z">
        <seg>常にメソッドをインラインにするようにコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Gives this compile-time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155212Z" creationid="hirofumiwakasugi" creationdate="20150905T043736Z">
        <seg>これはコンパイルエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Global variables start with a dollar sign (`$`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053517Z" creationid="hirofumiwakasugi" creationdate="20150902T053517Z">
        <seg>変数名の先頭にドル記号 (`$`) をつけるとグローバル変数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Great!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183326Z" creationid="makenowjust" creationdate="20200413T175354Z">
        <seg>いい感じですね。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Green</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Green</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Green       # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024409Z" creationid="hirofumiwakasugi" creationdate="20150914T024409Z">
        <seg>Green       # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HERE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034149Z" creationid="makenowjust" creationdate="20200420T034149Z">
        <seg>HERE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Headers{"foo" =&gt; "bar"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180228Z" creationid="makenowjust" creationdate="20200420T180228Z">
        <seg>HTTP::Headers{"foo" =&gt; "bar"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140134Z" creationid="hirofumiwakasugi" creationdate="20151009T140134Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Response.ok "text/plain", "Hello world, got #{request.path}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034948Z" creationid="hirofumiwakasugi" creationdate="20151102T034948Z">
        <seg>HTTP::Response.ok "text/plain", "Hello world, got #{request.path}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new ...
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162445Z" creationid="makenowjust" creationdate="20200413T162445Z">
        <seg>HTTP::Server.new ...
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162533Z" creationid="makenowjust" creationdate="20200413T162533Z">
        <seg>HTTP::Server.new do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8000) ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072631Z" creationid="hirofumiwakasugi" creationdate="20150901T072631Z">
        <seg>HTTP::Server.new(8000) ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8080) do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061326Z" creationid="hirofumiwakasugi" creationdate="20160204T061326Z">
        <seg>HTTP::Server.new(8080) do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>HTTP::Server.new(8080) do |request|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072642Z" creationid="hirofumiwakasugi" creationdate="20150901T072642Z">
        <seg>HTTP::Server.new(8080) do |request|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174742Z" creationid="makenowjust" creationdate="20200420T174742Z">
        <seg>ハッシュ (Hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash(String, Type)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071435Z" creationid="hirofumiwakasugi" creationdate="20150919T071435Z">
        <seg>Hash(String, Type)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash-like Type Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175838Z" creationid="makenowjust" creationdate="20200420T175838Z">
        <seg>ハッシュライクな型のリテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hashes are typically created with a hash literal denoted by curly braces (&lt;g1&gt;{ }&lt;/g1&gt;) enclosing a list of pairs using &lt;g2&gt;=&gt;&lt;/g2&gt; as delimiter between key and value and separated by commas &lt;g3&gt;,&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175320Z" creationid="makenowjust" creationdate="20200420T175046Z">
        <seg>ハッシュは通常、ひげ括弧 (&lt;g1&gt;{ }&lt;/g1&gt;) に囲われた中に、キーと値を &lt;g2&gt;=&gt;&lt;/g2&gt; で組にしてコンマ &lt;g3&gt;,&lt;/g3&gt; で区切って並べたものである、ハッシュリテラルによって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hash{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180031Z" creationid="makenowjust" creationdate="20200420T180031Z">
        <seg>Hash{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have a syntax similar to Ruby (but compatibility with it is not a goal).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221322Z" creationid="makenowjust" creationdate="20200412T221322Z">
        <seg>Rubyのような構文を持つ (しかし互換性は目標ではない)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have compile-time evaluation and generation of code, to avoid boilerplate code.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221858Z" creationid="makenowjust" creationdate="20200412T221536Z">
        <seg>コンパイル時評価が出来て、ボイラープレートを消し去るためコンパイル時にコード生成ができる。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Have no fear using blocks for readability or code reuse, it won't affect the resulting executable performance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T033049Z" creationid="hirofumiwakasugi" creationdate="20150916T033005Z">
        <seg>コードの読みやすさや再利用性のために積極的にブロックを利用しましょう。それが実行時のパフォーマンスに影響することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063553Z" creationid="hirofumiwakasugi" creationdate="20160204T062353Z">
        <seg>Hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hello World!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161803Z" creationid="makenowjust" creationdate="20200413T161803Z">
        <seg>Hello World!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here &lt;g1&gt;channel.send&lt;/g1&gt; is executed first, but since there's no one waiting for a value (yet), execution continues in other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T142136Z" creationid="akiji" creationdate="20200429T142136Z">
        <seg>ここでは、まず&lt;g1&gt;channel.send&lt;/g1&gt;が実行されますが、まだだれもその値を待っている人がいないので、他のファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the standard output &lt;g2&gt;might&lt;/g2&gt; never block so the program will continue executing forever.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075644Z" creationid="akiji" creationdate="20200428T075644Z">
        <seg>ただし、標準出力はブロックされない&lt;g2&gt;かもしれません&lt;/g2&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here the two values are received and the channel is depleted.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103808Z" creationid="akiji" creationdate="20200429T144608Z">
        <seg>ここで2つの値が取り出されてチャネルが空になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we are sending literal values, but the spawned fiber might compute this value by, for example, reading a file, or getting it from a socket.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T140454Z" creationid="akiji" creationdate="20200429T140454Z">
        <seg>今回はリテラル値を渡していますが、生成されたファイバはファイルから読み込んだり、ソケットから値を取得したりして、この値を計算する場合もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we have two fibers: one reads from a socket and the other does a &lt;g1&gt;sleep&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150802Z" creationid="akiji" creationdate="20200428T064350Z">
        <seg>ここには、2つのファイバがあります。1つ目はソケットから何かを読み出すもので、もう一つは&lt;g1&gt;sleep&lt;/g1&gt;するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we will name two well-known libraries: &lt;g1&gt;Readline&lt;/g1&gt; and &lt;g2&gt;NCurses&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191325Z" creationid="makenowjust" creationdate="20200413T191325Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt;と&lt;g2&gt;NCurses&lt;/g2&gt;という、2つのよく知られたライブラリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here we will name two well-known libraries: &lt;g1&gt;Readline&lt;/g1&gt; and&lt;g2&gt; NCurses&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191027Z" creationid="makenowjust" creationdate="20200413T185842Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt; と &lt;g2&gt;NCurses&lt;/g2&gt; という、2つのよく知られたライブラリです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, `person` is an instance of `Person`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022330Z" creationid="hirofumiwakasugi" creationdate="20150904T022303Z">
        <seg>この例では、`person` は `Person` クラスのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the right-hand side of the &lt;g1&gt;&amp;&amp;&lt;/g1&gt; expression is also guaranteed to have &lt;g2&gt;a&lt;/g2&gt; as not &lt;g3&gt;Nil&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081606Z" creationid="makenowjust" creationdate="20200424T081606Z">
        <seg>&lt;g1&gt;&amp;&amp;&lt;/g1&gt; 式の右辺が評価された場合、&lt;g2&gt;a&lt;/g2&gt;が&lt;g3&gt;Nil&lt;/g3&gt;ではないことも同様に保証されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here, the right-hand side of the `&amp;&amp;` expression is also guaranteed to have `a` as not `Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015121Z" creationid="hirofumiwakasugi" creationdate="20150903T015044Z">
        <seg>`&amp;&amp;` 式の右辺が評価された場合、`a` が `Nil` でないことも同時に保証されることがわかると思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Heredoc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194817Z" creationid="makenowjust" creationdate="20200419T194817Z">
        <seg>ヒアドキュメント</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here’s the final result, with invalid/missing options handling, plus other new options:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180413Z" creationid="makenowjust" creationdate="20200413T180413Z">
        <seg>これが、無効なオプション/パラメーターの処理を追加して、新しいオプションを追加した、最終的なソースコードです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal numbers start with &lt;g1&gt;0x&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182641Z" creationid="makenowjust" creationdate="20200419T182641Z">
        <seg>先頭に&lt;g1&gt;0x&lt;/g1&gt;をつけると16進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hexadecimal numbers start with `0x`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052550Z" creationid="hirofumiwakasugi" creationdate="20150901T052550Z">
        <seg>先頭に `0x` をつけると16進数になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>How do we &lt;g1&gt;read&lt;/g1&gt; that value?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180826Z" creationid="makenowjust" creationdate="20200413T180749Z">
        <seg>どのようにして値を&lt;g1&gt;読む&lt;/g1&gt;のでしょうか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However that is not true for macro defs, here the argument list is that of the method generated by the macro def, you cannot not access their compile time value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092128Z" creationid="hirofumiwakasugi" creationdate="20151009T030304Z">
        <seg>しかし、これはマクロメソッド (macro def) に対しては有効ではありません。「macro def」によって生成されたメソッドの引数のリストに対して、それらのコンパイル時の値にアクセスすることは不可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, explicit `return` are possible:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015355Z" creationid="hirofumiwakasugi" creationdate="20150904T015355Z">
        <seg>ただ、明示的に `return` を書くことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if `x` is closured by a proc, the type is always the mixed type of all assignments to it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055219Z" creationid="hirofumiwakasugi" creationdate="20150918T055148Z">
        <seg>しかし、もし `x` が proc によってクロージャに包まれた場合は、その型はすべての代入された型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, if the programmer makes a typo, say `:reed`, the error will only be caught at runtime, but writing `Color::Reed` will result in a compile-time error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012428Z" creationid="hirofumiwakasugi" creationdate="20150916T012238Z">
        <seg>ただ、この場合はもしプログラマーが `:reed` とタイポしてしまったとすると、ランタイムにエラーが発生することになります。一方、`Color::Reed` であればコンパイルエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, in the third send the channel's buffer is full, so execution goes to the main fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103802Z" creationid="akiji" creationdate="20200429T144329Z">
        <seg>しかし、3回目のsendではチャネルのバッファがいっぱいになっているため、メインファイバに処理が移ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, once multiple threads (parallelism) is introduced in the language, it might break.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102917Z" creationid="akiji" creationdate="20200428T063842Z">
        <seg>しかし、一旦マルチスレッド（並列処理）が言語に導入されると、そういう訳にもいかなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, regular code usually never involves pointer manipulation or uninitialized variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012935Z" creationid="hirofumiwakasugi" creationdate="20151009T012742Z">
        <seg>ただ、通常のコードでポインタ操作や初期化しない変数を扱うことはないでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, some C functions accept callbacks to be executed by other C functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052121Z" creationid="hirofumiwakasugi" creationdate="20151008T052121Z">
        <seg>しかし、C の関数には、他の C 関数によって実行されるコールバックを受け取るものがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the compiler cannot always figure out the order because there isn't always a total ordering, so it's always better to put less restrictive methods at the end.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T073602Z" creationid="hirofumiwakasugi" creationdate="20150906T073003Z">
        <seg>しかしながら、必ずしも順序関係が全順序であるとは限らないため、コンパイラが常に正しく順序を設定できるわけではありません。したがって、いつも制約の少ないメソッドを最後に書くようにすることを推奨します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the compiler doesn't know that `execute_callback` can potentially raise because it is not marked as `@[Raises]` and the compiler has no way to figure this out.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052920Z" creationid="hirofumiwakasugi" creationdate="20151008T052920Z">
        <seg>しかし、`execute_callback` に `@[Raises]` が指定されていないため、コンパイラはそれが例外を発生させるものであることを知ることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, the only way to create a `MyBox(T)` instance is by passing a `T` value, that becomes `@value`'s type, and that's what makes it all work.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064809Z" creationid="hirofumiwakasugi" creationdate="20150912T064732Z">
        <seg>しかし、`MyBox(T)` のインスタンスを作るためには必ず `T` の値を渡す必要があり、それが `@value` の型となるため、実際には、こうしておくことですべての場合に問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, there's a tiny flaw in the above code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063505Z" creationid="hirofumiwakasugi" creationdate="20150912T063130Z">
        <seg>ただ、上記のコードにはわずかな欠点があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you can change this default type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053243Z" creationid="hirofumiwakasugi" creationdate="20151007T053225Z">
        <seg>デフォルトの型は以下のように変更することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, you might want to specify it for two reasons:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024527Z" creationid="hirofumiwakasugi" creationdate="20150909T024256Z">
        <seg>しかし、以下の2つの理由から、戻り値の型を指定したい場合があるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Html output will be in &lt;g1&gt;_book&lt;/g1&gt; folder (some links won't work if opening the files locally).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165051Z" creationid="makenowjust" creationdate="20200413T164638Z">
        <seg>HTML の出力は&lt;g1&gt;_book&lt;/g1&gt;ディレクトリになります (一部のリンクはローカルでは上手く開けません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>INFO_CAPTURECOUNT = 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022114Z" creationid="hirofumiwakasugi" creationdate="20151008T022114Z">
        <seg>INFO_CAPTURECOUNT = 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>IO::Memory{1, 2, 3}
Set{1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173553Z" creationid="makenowjust" creationdate="20200420T173553Z">
        <seg>IO::Memory{1, 2, 3}
Set{1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Identifiers may contain any unicode characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172146Z" creationid="makenowjust" creationdate="20200420T172146Z">
        <seg>識別子には任意のユニコード文字を含むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g11&gt;CRYSTAL_CACHE_DIR&lt;/g11&gt; is set but points to a path that is not writeable, the default values are used instead.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170714Z" creationid="makenowjust" creationdate="20200419T170714Z">
        <seg>&lt;g11&gt;CRYSTAL_CACHE_DIR&lt;/g11&gt;で指定されたパスが書き込み不可能だった場合もデフォルト値が代わりに利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If &lt;g1&gt;MyHash&lt;/g1&gt; is generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180557Z" creationid="makenowjust" creationdate="20200420T180557Z">
        <seg>ここで&lt;g1&gt;MyHash&lt;/g1&gt;がジェネリック型であれば、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If Crystal isn't available in some system you can try cross-compiling it there.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050816Z" creationid="hirofumiwakasugi" creationdate="20150909T050805Z">
        <seg>もし、あるシステムでコンパイラが利用できない場合は、このクロスコンパイルを試してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `MyType` is generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072344Z" creationid="hirofumiwakasugi" creationdate="20150901T140432Z">
        <seg>もし `MyType` がジェネリック型である場合は、上記は以下と同じ意味です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `MyType` is not generic, the above is equivalent to this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072335Z" creationid="hirofumiwakasugi" creationdate="20150901T140409Z">
        <seg>もし `MyType` がジェネリック型でない場合は、上記は以下と同じ意味です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If `x` is assigned something else after the block, the compiler knows the type changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055150Z" creationid="hirofumiwakasugi" creationdate="20150918T055057Z">
        <seg>もし、ブロックの後で `x` に何かが代入されたとき、コンパイラはその型が変更されたと判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a &lt;g1&gt;when&lt;/g1&gt;'s expression is a type, &lt;g2&gt;is_a?&lt;/g2&gt; is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091439Z" creationid="makenowjust" creationdate="20200424T091439Z">
        <seg>もし&lt;g1&gt;when&lt;/g1&gt;節の条件式に型が与えられていれば、代わりに&lt;g2&gt;is_a?&lt;/g2&gt;が使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a C function executes a user-provided callback that might raise, it must be annotated with the `@[Raises]` attribute.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T051733Z" creationid="hirofumiwakasugi" creationdate="20151008T030306Z">
        <seg>例外を発生させる可能性のあるコールバックを C の関数が実行するときには、`@[Raises]` 属性を指定しておく必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `break` receives many arguments, they are automatically transformed to a [Tuple](http://crystal-lang.org/api/Tuple.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025406Z" creationid="hirofumiwakasugi" creationdate="20150916T025406Z">
        <seg>`break` が複数の引数を受けとるとき、それらは自動的に[タプル](http://crystal-lang.org/api/Tuple.html)に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `break` receives no arguments, it's the same as receiving a single `nil` argument:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025547Z" creationid="hirofumiwakasugi" creationdate="20150916T025420Z">
        <seg>`break` が引数をとらない場合、それは `nil` を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `next` receives many arguments, they are automaticaly transformed to a [Tuple](http://crystal-lang.org/api/Tuple.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030141Z" creationid="hirofumiwakasugi" creationdate="20150916T030126Z">
        <seg>`next` が複数の引数を受けとるとき、それらは自動的に[タプル](http://crystal-lang.org/api/Tuple.html)に変換されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a `when`'s expression is a type, `is_a?` is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010018Z" creationid="hirofumiwakasugi" creationdate="20150903T025401Z">
        <seg>もし `when` 節の式に型が与えられた場合は、`is_a?` を用いて比較されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a `finalize` method, when an instance of that class is garbage-collected that method will be invoked:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041749Z" creationid="hirofumiwakasugi" creationdate="20150910T041614Z">
        <seg>もしクラスに `finalize` メソッドが定義されていた場合、そのクラスのインスタンスがガベージコレクトされるときにそのメソッドが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class defines a `new` or `initialize` then its superclass constructors are not inherited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024008Z" creationid="hirofumiwakasugi" creationdate="20150910T023817Z">
        <seg>もしクラスに `new` や `initialize` が定義されると、スーパークラスのコンストラクタは継承されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a class variable is read before it is assigned a value, it will include the `Nil` type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041019Z" creationid="hirofumiwakasugi" creationdate="20150910T041010Z">
        <seg>もし値が代入される前にクラス変数を読み込むと、それは `Nil` 型を持つものとして解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a constant is not used, its initializer is never included in the final executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055934Z" creationid="hirofumiwakasugi" creationdate="20150913T055934Z">
        <seg>もしある定数が使われなければ、最終的な実行ファイルにその定数の初期化処理は含まれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085247Z" creationid="makenowjust" creationdate="20200427T084827Z">
        <seg>"filename" という名前のディレクトリの中に "filename.cr" というファイルがあれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found with a directory "src" in it and it contains a directory named "filename" directly underneath it with a "filename.cr" file inside it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085253Z" creationid="makenowjust" creationdate="20200427T085028Z">
        <seg>"filename" という名前のディレクトリの中の "src" ディレクトリ中に "filename" というディレクトリがあり、その中に "filename.cr" があれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a directory named "filename" is found with a directory "src" in it and it contains a file named "filename.cr" directly underneath it, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085250Z" creationid="makenowjust" creationdate="20200427T084945Z">
        <seg>"filename" という名前のディレクトリの中の "src" ディレクトリ中に "filename.cr" というファイルがあれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a file named "filename.cr" is found in the require path, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085131Z" creationid="makenowjust" creationdate="20200427T084731Z">
        <seg>"filename.cr" という名前のファイルが require パスで見つかれば、そのファイルが読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a file named "filename.cr" is found relative to the current file, it is required.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090853Z" creationid="makenowjust" creationdate="20200427T090729Z">
        <seg>"filename.cr" という名前のファイルが現在のディレクトリから相対的な位置で見つかれば、そのファイルを読み込まれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a top-level macro is marked as `private` it is only accessible in that file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015719Z" creationid="hirofumiwakasugi" creationdate="20151001T015605Z">
        <seg>もしトップレベルのマクロが `private` に指定された場合は、そのファイル内でのみアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a type defines a `to_unsafe` method, when passing it to C the value returned by this method will be passed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044331Z" creationid="hirofumiwakasugi" creationdate="20151005T044331Z">
        <seg>もし、ある型に `to_unsafe` メソッドが定義されていた場合、C に渡されるのはそのメソッドからの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a variable is the condition of an &lt;g1&gt;if&lt;/g1&gt;, inside the &lt;g2&gt;then&lt;/g2&gt; branch the variable will be considered as not having the &lt;g3&gt;Nil&lt;/g3&gt; type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081334Z" creationid="makenowjust" creationdate="20200424T081329Z">
        <seg>変数が&lt;g1&gt;if&lt;/g1&gt;の条件式に使われたとき、&lt;g2&gt;then&lt;/g2&gt;節の中ではその変数は&lt;g3&gt;Nil&lt;/g3&gt;型を持たないと判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If a variable is the condition of an `if`, inside the `then` branch the variable will be considered as not having the `Nil` type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014316Z" creationid="hirofumiwakasugi" creationdate="20150903T014120Z">
        <seg>もしある変数が `if` の条件になっているとき、`then` の分岐内においては、その値が `Nil` 型ではないと判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt; branch is empty, or it’s missing, it’s considered as if it had &lt;g2&gt;nil&lt;/g2&gt; in it:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080544Z" creationid="makenowjust" creationdate="20200424T080544Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;が評価する分岐節が空、もしくは存在しない場合、そこに&lt;g2&gt;nil&lt;/g2&gt;が与えられていたのと同じ挙動になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is &lt;g2&gt;var.nil?&lt;/g2&gt; then the type of &lt;g3&gt;var&lt;/g3&gt; in the &lt;g4&gt;then&lt;/g4&gt; branch is known by the compiler to be &lt;g5&gt;Nil&lt;/g5&gt;, and to be known as non-&lt;g6&gt;Nil&lt;/g6&gt; in the &lt;g7&gt;else&lt;/g7&gt; branch:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085223Z" creationid="makenowjust" creationdate="20200424T085223Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件が&lt;g2&gt;var.nil?&lt;/g2&gt;のようになっていると、コンパイラは&lt;g4&gt;then&lt;/g4&gt;節では&lt;g3&gt;var&lt;/g3&gt;が&lt;g5&gt;Nil&lt;/g5&gt;型だと判断して、&lt;g7&gt;else&lt;/g7&gt;では&lt;g6&gt;Nil&lt;/g6&gt;型以外の型だと判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is a &lt;g2&gt;responds_to?&lt;/g2&gt; test, in the &lt;g3&gt;then&lt;/g3&gt; branch the type of a variable is guaranteed to be restricted to the types that respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083811Z" creationid="makenowjust" creationdate="20200424T083723Z">
        <seg> &lt;g1&gt;if&lt;/g1&gt;の条件で&lt;g2&gt;responds_to?&lt;/g2&gt;によるチェックを行なうと、&lt;g3&gt;then&lt;/g3&gt;節ではその変数がそのメソッドを持つ型に制限されていることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an &lt;g1&gt;if&lt;/g1&gt;'s condition is an &lt;g2&gt;is_a?&lt;/g2&gt; test, the type of a variable is guaranteed to be restricted by that type in the &lt;g3&gt;then&lt;/g3&gt; branch.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083726Z" creationid="makenowjust" creationdate="20200424T082734Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式で&lt;g2&gt;is_a?&lt;/g2&gt;によるチェックを行うと、&lt;g3&gt;then&lt;/g3&gt;節で変数がその型に制限されていることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if` branch is empty, or it’s missing, it’s considered as if it had `nil` in it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025739Z" creationid="hirofumiwakasugi" creationdate="20150903T013505Z">
        <seg>もし、条件に合致する分岐節が空の場合、もしくは合致する分岐節自体が存在しない場合には、そこに `nil` が与えられていたのと同じ挙動になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if`'s condition is a `responds_to?` test, in the `then` branch the type of a variable is guaranteed to be restricted to the types that respond to that method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030223Z" creationid="hirofumiwakasugi" creationdate="20150903T030021Z">
        <seg>`if` の条件で `responds_to?` によるチェックを行うと、`then` 節での変数の型に対して、そのメソッドに応答するものであることを制限し保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an `if`'s condition is an `is_a?` test, the type of a variable is guaranteed to be restricted by that type in the `then` branch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030115Z" creationid="hirofumiwakasugi" creationdate="20150903T021654Z">
        <seg>`if` の条件で `is_a?` によるチェックを行うと、`then` 節での変数の型を制限し保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an argument points to a folder, all spec
files inside that folder are appended.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165441Z" creationid="makenowjust" creationdate="20200419T163906Z">
        <seg>引数がフォルダを指していた場合、そのフォルダ中の spec をまとめて指定したことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an exception is raised inside the `initialize` method, `finalize` won't be invoked.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041925Z" creationid="hirofumiwakasugi" creationdate="20150910T041925Z">
        <seg>もし `initialize` メソッドで例外が発生したとき、`finalize` は実行されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an instance variable is not assigned in all of the `initialize` defined in a class, it will be considered as also having the type `Nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T053828Z" creationid="hirofumiwakasugi" creationdate="20150905T053828Z">
        <seg>もし、あるインスタンス変数が、クラスで定義されているすべての `initialize` で初期化されなかったとき、そのインスタンス変数は `Nil` 型を持つと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If an option matches then the block passed to &lt;g2&gt;parser#on&lt;/g2&gt; gets executed!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173500Z" creationid="makenowjust" creationdate="20200413T173451Z">
        <seg>ここで、オプションがマッチしたときに、&lt;g2&gt;parser#on&lt;/g2&gt;に渡されたブロックが実行される、というわけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If any such thing is marked with &lt;g1&gt;focus: true&lt;/g1&gt; then only those examples will run.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101624Z" creationid="akiji" creationdate="20200516T101547Z">
        <seg>もし&lt;g1&gt;focus: true&lt;/g1&gt;が指定されたブロックがあった場合、指定されたブロックのみが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If for any reason you can't or don't want to use one of the previous installation methods, you can still download Crystal in a standalone .tar.gz file with everything you need to get started.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055610Z" creationid="hirofumiwakasugi" creationdate="20150831T052600Z">
        <seg>何らかの理由で、これまで紹介した方法でインストールすることができない場合、.tar.gz ファイルをダウンロードする方法もあります。その中に、Crystal に必要なすべてのものが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If for some reason we are sure `a` is an `Int32` after the `if`, we can force the compiler to treat it like one:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015109Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>もし何らかの理由で、`if` の後で `a` が `Int32` であるとしたい場合は、そのように扱うようにコンパイラに強制することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If in the previous example we pass a symbol, the generated code becomes invalid:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021112Z" creationid="hirofumiwakasugi" creationdate="20151001T020911Z">
        <seg>例えばもし、上記の例でシンボルを渡した場合には、生成されたコードは不正なものとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it can't find one, the type union remains.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033139Z" creationid="hirofumiwakasugi" creationdate="20150910T033118Z">
        <seg>もし同一階層下に見つからない型であれば、そのまま型の組み合わせとして残ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is impossible for a type to be restricted by another type, a compile-time error is issued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015428Z" creationid="hirofumiwakasugi" creationdate="20150930T015428Z">
        <seg>ある型を別の型に強制することは不可能で、コンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it is only a library for other shards to depend on, &lt;g3&gt;shard.lock&lt;/g3&gt; should &lt;g4&gt;not&lt;/g4&gt; be checked in, only &lt;g5&gt;shard.yml&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174457Z" creationid="makenowjust" creationdate="20200419T174457Z">
        <seg>他のshardから依存されるようなライブラリである場合&lt;g3&gt;shard.lock&lt;/g3&gt;はバージョン管理下に置くべき&lt;g4&gt;ではあありません&lt;/g4&gt;。&lt;g5&gt;shard.yml&lt;/g5&gt;のみを含めてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it receives no arguments it's the same as receiving a single `nil` argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030200Z" creationid="hirofumiwakasugi" creationdate="20150916T030156Z">
        <seg>引数をとらない場合には、`nil` を1つ受け取ったのと同じことになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's *falsey*, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052649Z" creationid="hirofumiwakasugi" creationdate="20150905T052649Z">
        <seg>もしそれが「偽」の場合のみ、右辺に対して評価を行い、結果の値が右辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's *truthy*, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052514Z" creationid="hirofumiwakasugi" creationdate="20150905T052514Z">
        <seg>もしそれが「真」の場合のみ、右辺に対して評価を行い、結果の値が右辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's &lt;g2&gt;falsey&lt;/g2&gt;, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101746Z" creationid="makenowjust" creationdate="20200424T101746Z">
        <seg>それが&lt;g2&gt;偽となる&lt;/g2&gt;値であれば、右辺を評価し、それを結果の値とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it's &lt;g2&gt;truthy&lt;/g2&gt;, it evaluates its right hand side and has that value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T102259Z" creationid="makenowjust" creationdate="20200424T101601Z">
        <seg>それが&lt;g2&gt;真となる&lt;/g2&gt;値であれば、右辺の値を評価し、その値を結果とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no &lt;g1&gt;source&lt;/g1&gt; argument is provided, the Crystal source is read from standard input.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160002Z" creationid="makenowjust" creationdate="20200419T160002Z">
        <seg>&lt;g1&gt;source&lt;/g1&gt;が引数で指定されなかった場合は、ソースコードを標準入力から読み込みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no &lt;g2&gt;files&lt;/g2&gt; argument is provided, the default is &lt;g3&gt;./spec&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163939Z" creationid="makenowjust" creationdate="20200419T163939Z">
        <seg>何も&lt;g2&gt;files&lt;/g2&gt;引数を指定しなかった場合は、デフォルト値として&lt;g3&gt;./spec&lt;/g3&gt;が与えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no command is given, &lt;g1&gt;install&lt;/g1&gt; will be run by default.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174642Z" creationid="makenowjust" creationdate="20200419T174642Z">
        <seg>コマンドが指定されなかった場合、&lt;g1&gt;install&lt;/g1&gt;がデフォルトでは実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is &lt;g3&gt;Float64&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T183137Z" creationid="makenowjust" creationdate="20200419T183137Z">
        <seg>サフィックスがない場合はリテラルの型は&lt;g3&gt;Float64&lt;/g3&gt;となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is `Float64`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074014Z" creationid="hirofumiwakasugi" creationdate="20150901T074014Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Float64` になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest between &lt;g3&gt;Int32&lt;/g3&gt;, &lt;g4&gt;Int64&lt;/g4&gt; and &lt;g5&gt;UInt64&lt;/g5&gt;
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182509Z" creationid="makenowjust" creationdate="20200419T182509Z">
        <seg>サフィックスがない場合はリテラルの型は&lt;g3&gt;Int32&lt;/g3&gt;か&lt;g4&gt;Int64&lt;/g4&gt;または&lt;g5&gt;UInt64&lt;/g5&gt;の中で、その数値に適した最小のものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest between `Int32`, `Int64` and `UInt64`
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025649Z" creationid="hirofumiwakasugi" creationdate="20151009T025642Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Int32`/`Int64`/`UInt64`のいずれかのうち、数値に合致する最も小さいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no suffix is present, the literal's type is the lowest betwen `Int32`, `Int64` and `UInt64`
in which the number fits:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052257Z" creationid="hirofumiwakasugi" creationdate="20150901T051834Z">
        <seg>もしサフィックスがない場合は、リテラルの型は `Int32`/`Int64`/`UInt64`のいずれかのうち、数値に合致する最も小さいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If no targets are specified, all are built.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180300Z" creationid="makenowjust" creationdate="20200419T180124Z">
        <seg>ターゲットが指定されていなければ、すべてがビルドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not already present, generates a &lt;g2&gt;shard.lock&lt;/g2&gt; file from resolved dependencies, locking version
numbers or Git commits.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180805Z" creationid="makenowjust" creationdate="20200419T180805Z">
        <seg>&lt;g2&gt;shard.lock&lt;/g2&gt;が存在しない場合、解決した依存関係、ロックしたバージョンもしくはGitコミットから生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one of the branches never reaches past the end of an &lt;g1&gt;if&lt;/g1&gt;, like in the case of a &lt;g2&gt;return&lt;/g2&gt;, &lt;g3&gt;next&lt;/g3&gt;, &lt;g4&gt;break&lt;/g4&gt; or &lt;g5&gt;raise&lt;/g5&gt;, that type is not considered at the end of the &lt;g6&gt;if&lt;/g6&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075226Z" creationid="makenowjust" creationdate="20200424T075226Z">
        <seg>ある分岐節が&lt;g1&gt;if&lt;/g1&gt;の最後まで絶対に到達しない場合 (&lt;g2&gt;return&lt;/g2&gt;や&lt;g3&gt;next&lt;/g3&gt;、&lt;g4&gt;break&lt;/g4&gt;、&lt;g5&gt;raise&lt;/g5&gt;などがある場合)、 &lt;g6&gt;if&lt;/g6&gt;の後でその分岐節における型が考慮されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one of the branches never reaches past the end of an `if`, like in the case of a `return`, `next`, `break` or `raise`, that type is not considered at the end of the `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025816Z" creationid="hirofumiwakasugi" creationdate="20150903T012622Z">
        <seg>もし、ある分岐節が `if` の最後まで絶対に到達しない場合、例えば `return`/`next`/`break`/`raise` などが存在した場合には、`if` の後でその分岐節における型が考慮されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If one or more &lt;g1&gt;var&lt;/g1&gt; arguments are provided,
the value of each named variable is printed on its own line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163353Z" creationid="makenowjust" creationdate="20200419T163353Z">
        <seg>もしいくつかの&lt;g1&gt;var&lt;/g1&gt;引数が渡された場合、それらの変数の値がそれぞれの行に出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the callback passed to `store_callback` raises, then `execute_callback` will raise.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052827Z" creationid="hirofumiwakasugi" creationdate="20151008T052822Z">
        <seg>このとき、もし `store_callback` に渡されたコールバックが例外を発生させるものであるときには、`execute_callback` が例外を発生させるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the compiler can't detect this at compile-time, an exception will be raised at runtime.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024803Z" creationid="hirofumiwakasugi" creationdate="20151008T024715Z">
        <seg>もしコンパイラがコンパイル時にこのことを検出できなかった場合、ランタイムに例外が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the compiler detects at compile-time that a closure is being passed, an error will be issued:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024655Z" creationid="hirofumiwakasugi" creationdate="20151008T024642Z">
        <seg>もし、クロージャが渡されていることがコンパイル時に検出されるとエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition is an &lt;g4&gt;var.is_a?(Type)&lt;/g4&gt; test, &lt;g5&gt;var&lt;/g5&gt; is guaranteed to be of type &lt;g6&gt;Type&lt;/g6&gt; inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095007Z" creationid="makenowjust" creationdate="20200424T094954Z">
        <seg>条件式が&lt;g4&gt;var.is_a?(Type)&lt;/g4&gt;という形なら、本体では&lt;g5&gt;var&lt;/g5&gt;は&lt;g6&gt;Type&lt;/g6&gt;型であることが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the condition is an `var.is_a?(Type)` test, `var` is guaranteed to be of type Type inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052123Z" creationid="hirofumiwakasugi" creationdate="20150905T052123Z">
        <seg>条件で `var.is_a?(Type)` による判定を行うと、本体の中では `var` の型がその型であることを保証することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the constant denotes a type, you get back a `TypeNode`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041605Z" creationid="hirofumiwakasugi" creationdate="20151001T041605Z">
        <seg>もし定数が型を示していれば、そのとき得られるのは `TypeNode` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the expectation is met, code execution continues.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T133017Z" creationid="akiji" creationdate="20200505T133017Z">
        <seg>もし結果が想定通りであれば、コードの実行を継続します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the left-hand side contains just one variable, the right-hand side is considered an array:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060149Z" creationid="hirofumiwakasugi" creationdate="20150902T060132Z">
        <seg>それでは、もし左辺に1つの変数しかないときはどうでしょうか。その場合には、右辺が配列であると解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the method has arguments, you must specify their types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022124Z" creationid="hirofumiwakasugi" creationdate="20150902T022124Z">
        <seg>引数を持つメソッドの場合は、その型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the return type is void you can omit it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040824Z" creationid="hirofumiwakasugi" creationdate="20151005T040718Z">
        <seg>もし戻り値の型が void であれば省略することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the right-hand side contains just one expression, it is considered an indexed type and the following syntax sugar applies:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060158Z" creationid="hirofumiwakasugi" creationdate="20150902T055855Z">
        <seg>もし代入文の右辺に1つの式しかないときにはどうなるのでしょうか。その場合には、インデックスを持つ型だと解釈され、以下のシンタックスシュガーが適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the right-hand side contains just one expression, the type is indexed for each variable on the left-hand side like so:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175549Z" creationid="makenowjust" creationdate="20200422T175540Z">
        <seg>代入式の右辺に1つしか式が無かった場合、次の例のように各変数に順にインデックスして代入していきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If the specified line is the beginning of a &lt;g1&gt;describe&lt;/g1&gt; or &lt;g2&gt;context&lt;/g2&gt; section, all specs inside that group are run.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T065229Z" creationid="akiji" creationdate="20200518T065229Z">
        <seg>指定された行が&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;セクションの先頭だった場合は、そのセクション内の全てのspecが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there are conditional breaks, the call's return value type will be a union of the type of the block's value and the type of the many `break`s:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025313Z" creationid="hirofumiwakasugi" creationdate="20150916T024921Z">
        <seg>もしある条件によって break する場合、そのメソッドの戻り値の型は、ブロックの戻り値の型と (複数ある場合にはすべての) `break` の型の組み合わせとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If there aren't other fibers to execute, the Event Loop will wait until either of these events happen, without consuming CPU time.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150815Z" creationid="akiji" creationdate="20200428T070439Z">
        <seg>もし他に実行可能なファイバがいなければ、イベントループはイベントループはCPUを消費することなく、どちらかのイベントが発生するまで待機します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we create more boxes with more types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060141Z" creationid="hirofumiwakasugi" creationdate="20150912T055711Z">
        <seg>この箱クラスのインスタンスを、別の型を与えていくつか作成してみます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we had invoked `Person.new` with another type, `@name` would have taken a different type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134631Z" creationid="hirofumiwakasugi" creationdate="20150904T134510Z">
        <seg>もし、`Person.new` の引数が別の型だった場合は、`@name` もそれに応じて別の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we run the `hierarchy` command again, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063038Z" creationid="hirofumiwakasugi" creationdate="20150912T063038Z">
        <seg>`hierarchy` コマンドを再度実行してみましょう。その結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we run the `tool hierarchy` command again, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024444Z" creationid="hirofumiwakasugi" creationdate="20151009T024444Z">
        <seg>`tool hierarchy` コマンドを再度実行してみましょう。その結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we want to execute the spawned fiber for ever, we can use &lt;g1&gt;sleep&lt;/g1&gt; without arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075856Z" creationid="akiji" creationdate="20200428T075856Z">
        <seg>もし、生成したファイバを実行させ続けたいのであれば、引数なしの &lt;g1&gt;sleep&lt;/g1&gt; を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If we want to try it then the &lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt; shard will give us an easy API to use &lt;g5&gt;Readline&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190348Z" creationid="makenowjust" creationdate="20200413T190348Z">
        <seg>それらの機能を使いたいのであれば&lt;g4&gt;crystal-lang/crystal-readline&lt;/g4&gt; shardが&lt;g5&gt;Readline&lt;/g5&gt;を簡単に扱える API を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you are using Mac and the Homebrew formula, this will be automatically configured for you if you install Crystal adding `--with-llvm` flag.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062345Z" creationid="hirofumiwakasugi" creationdate="20150831T060425Z">
        <seg>もし Mac を使っていて Homebrew のフォーミュラからインストールする場合は、`--with-llvm` フラグを与えてインストールすれば LLVM が自動的に構成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the above program with the `hierarchy` command you will see this for `Person`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032241Z" creationid="hirofumiwakasugi" creationdate="20150910T032227Z">
        <seg>上記のプログラムに対して `hierarchy` を実行すると、`Person` は以下のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the above program with the `tool hierarchy` command you will see this for `Person`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140028Z" creationid="hirofumiwakasugi" creationdate="20151009T140028Z">
        <seg>上記のプログラムに対して `tool hierarchy` を実行すると、`Person` は以下のように表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the previous programs with the `hierarchy` command, the compiler will show you a hierarchy graph with the types it inferred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135533Z" creationid="hirofumiwakasugi" creationdate="20150904T134746Z">
        <seg>これらのプログラムに `hierarchy` コマンドでコンパイラを起動すると、推論された型を階層的に表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you compile the previous programs with the `tool hierarchy` command, the compiler will show you a hierarchy graph with the types it inferred.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025323Z" creationid="hirofumiwakasugi" creationdate="20151009T025323Z">
        <seg>これらのプログラムに `tool hierarchy` コマンドでコンパイラを起動すると、推論された型を階層的に表示することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you define the function inline in the same call you can omit the argument types, the compiler will add the types for you based on the `fun` signature:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024506Z" creationid="hirofumiwakasugi" creationdate="20151008T024506Z">
        <seg>もし呼び出しと同時にインラインで関数を定義する場合は、引数の型を省略することが可能です。このとき、コンパイラが `fun` のシグネイチャに基づいて型を追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you do want to have different `Person` types, one with `@name` being an `Int32` and one with `@name` being a `String`, you must use [generics](generics.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T045923Z" creationid="hirofumiwakasugi" creationdate="20150905T045504Z">
        <seg>もし、`@name` が `Int32` である `Person` 型と、`@name` が `String` である `Person` 型の2つを使いたい場合は、 [ジェネリクス](generics.html) を利用すべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't mark them, `begin/rescue` blocks that surround this function's calls won't work as expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053456Z" creationid="hirofumiwakasugi" creationdate="20151008T053456Z">
        <seg>もし上記のように指定しなかった場合、この関数の呼び出しを囲む `begin/rescue` ブロックが期待通りに働いてくれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you don't specify one it defaults to `Reference` for classes and `Struct` for structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023456Z" creationid="hirofumiwakasugi" creationdate="20150910T023444Z">
        <seg>継承元を明示的に指定せず定義した場合、クラスであれば `Reference` を、構造体であれば `Struct` がスーパークラスになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you find bugs or sections
which need more clarification you're welcome to contribute to this
language reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164457Z" creationid="makenowjust" creationdate="20200413T164304Z">
        <seg>バグ、もしくはより詳細な説明の必要なセクションを見つけたのなら、この言語リファレンスへ貢献することを歓迎します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you get an error like:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061035Z" creationid="hirofumiwakasugi" creationdate="20160204T061024Z">
        <seg>以下のエラーが発生することがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to bind to a C function that starts with a capital letter you can give the function another name for Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041456Z" creationid="hirofumiwakasugi" creationdate="20151005T041456Z">
        <seg>もし、大文字で始まる C の関数へバインドしたい場合、Crystal のために別の名前を与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to execute the body at least once and then check for a breaking condition, you can do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052159Z" creationid="hirofumiwakasugi" creationdate="20150905T052159Z">
        <seg>ループを抜けるための条件を設定することで、必ず1回は本体を実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you need to write a string that has many double quotes, parenthesis, or similar
characters, you can use alternative literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104420Z" creationid="hirofumiwakasugi" creationdate="20150901T104420Z">
        <seg>もし文字列にダブルクォートやカッコなどの文字が多く含まれている場合には、次のような形式でリテラルを書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you prefer to do it manually execute:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053622Z" creationid="hirofumiwakasugi" creationdate="20150831T052947Z">
        <seg>もし手動で構成したいのであれば、以下の操作を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you redefine a method, the last definition will take precedence.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123107Z" creationid="hirofumiwakasugi" creationdate="20150904T122933Z">
        <seg>もしあるメソッドが再度定義された場合、最後に定義されたものが優先されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you run the compiler from somewhere else, say the &lt;g1&gt;src&lt;/g1&gt; folder, &lt;g2&gt;lib&lt;/g2&gt; will not be in the path and &lt;g3&gt;require "foo"&lt;/g3&gt; can't be resolved.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090700Z" creationid="makenowjust" creationdate="20200427T090700Z">
        <seg>プロジェクトのルートディレクトリ以外の場所からコンパイラを実行すると (例えば  &lt;g1&gt;src&lt;/g1&gt; ディレクトリの中から、など)、 &lt;g2&gt;lib&lt;/g2&gt; は require パスに追加されず &lt;g3&gt;require "foo"&lt;/g3&gt; はうまく解決できません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you use a single uppercase letter as a type restriction, the identifier becomes a free variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035649Z" creationid="hirofumiwakasugi" creationdate="20150908T030348Z">
        <seg>型制約において、型を1文字の大文字で指定するとその識別子は自由変数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want a method to only accept the type Int32 (not instances of it), you use `.class`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025720Z" creationid="hirofumiwakasugi" creationdate="20150908T025544Z">
        <seg>もし、メソッドが (そのインスタンスではなく) `Int32` というクラスだけを受け入れるようにしたい場合、`.class` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to contribute then you might want to install Crystal from sources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T062357Z" creationid="hirofumiwakasugi" creationdate="20150831T060128Z">
        <seg>もしコントリビュートしたいと考えているのであれば、Crystal をソースコードからインストールしたくなることと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to invoke the program's method, even though the current type defines a method with the same name, prefix the call with `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021405Z" creationid="hirofumiwakasugi" creationdate="20150904T021221Z">
        <seg>プログラムに定義されたメソッドを実行したいけれど、自身の型にも同名のメソッドが定義されている場合には、`::` をプレフィックスに与えることで実行できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to pass `NULL` instead of a callback, just pass `nil`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022900Z" creationid="hirofumiwakasugi" creationdate="20151009T022900Z">
        <seg>もしコールバックの代わりに `NULL` を渡したい場合は、単純に `nil` を渡してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you want to support the empty-tuple case, add another overload:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030209Z" creationid="hirofumiwakasugi" creationdate="20150908T030209Z">
        <seg>もし空のタプルもサポートしたいのであれば、もう1つオーバーロードを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're planning to contribute to the project you might find useful to install LLVM as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055330Z" creationid="hirofumiwakasugi" creationdate="20150831T055330Z">
        <seg>もしプロジェクトにコントリビュートしたいのであれば、同時に LLVM もインストールしておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your class defines a finalizer, be sure to catch any exceptions that might be raised in the `initialize` methods and free resources.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T042148Z" creationid="hirofumiwakasugi" creationdate="20150910T042000Z">
        <seg>もしクラスに `finalize` を定義する場合は、必ず `initialize` メソッドで発生し得る例外を捕捉して、リソースの開放をするようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If your shard builds an application, both &lt;g1&gt;shard.yml&lt;/g1&gt; and &lt;g2&gt;shard.lock&lt;/g2&gt; should be checked into version control to provide reproducible dependency installs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174221Z" creationid="makenowjust" creationdate="20200419T174221Z">
        <seg>アプリケーションを開発しているのであれば、再現可能な依存関係のインストールを実現するために、&lt;g1&gt;shard.yml&lt;/g1&gt;と&lt;g2&gt;shard.lock&lt;/g2&gt;をバージョン管理下に置いてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Imagine if all arrays and hashes had their types mixed, it would be pretty annoying to deal with them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061508Z" creationid="hirofumiwakasugi" creationdate="20150912T061124Z">
        <seg>例えば、配列やハッシュが様々な型の要素を含むときに、要素がそれぞれ固有の型を持っていないと非常に扱いづらいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit constants, `None` and `All`, are automatically added to these enums, where `None` has the value `0` and `All` has the "or"ed value of all constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T052016Z" creationid="hirofumiwakasugi" creationdate="20150915T051414Z">
        <seg>また、このとき Enum には、`None` と `All` が暗黙的に追加されます。`None` の値は `0` で、`All` はすべての定数の「OR」をとったときの値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Implicit-object allowed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094341Z" creationid="makenowjust" creationdate="20200424T093716Z">
        <seg>暗黙のオブジェクト指定が利用できます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Crystal everything is an object.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T012652Z" creationid="hirofumiwakasugi" creationdate="20150904T012652Z">
        <seg>Crystal ではすべてのものがオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In Debian derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052645Z" creationid="hirofumiwakasugi" creationdate="20150831T052645Z">
        <seg>Debian 系のディストリビューションでは、公式の Crystal リポジトリを利用してインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In RedHat derived distributions, you can use the official Crystal repository.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055048Z" creationid="hirofumiwakasugi" creationdate="20150831T055045Z">
        <seg>RedHat 系のディストリビューションでは、公式の Crystal リポジトリを利用してインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a 32-bit machine we can only spawn 512 fibers, which is not a lot.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103133Z" creationid="akiji" creationdate="20200428T062725Z">
        <seg>32ビットマシンの場合はそれほど多くはなく、生成できるファイバは512個だけです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In a way, there's still nothing relating `T` with `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064512Z" creationid="hirofumiwakasugi" creationdate="20150912T064017Z">
        <seg>ただ、それでも `T` と `@value` の間に関連性があるわけではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all of these cases you can use the special &lt;g1&gt;*&lt;/g1&gt; and &lt;g2&gt;**&lt;/g2&gt; suffixes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091517Z" creationid="makenowjust" creationdate="20200427T091517Z">
        <seg>これらのすべての場合で、末尾に &lt;g1&gt;*&lt;/g1&gt; と &lt;g2&gt;**&lt;/g2&gt; という特別な記号を利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In all of these cases you can use the special `*` and `**` suffixes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161145Z" creationid="hirofumiwakasugi" creationdate="20150905T161026Z">
        <seg>これらのすべてのケースにおいて、 `*` と `**` という特別なサフィックスを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In both cases you can use nested names and they will be looked up in nested directories:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160538Z" creationid="hirofumiwakasugi" creationdate="20150905T160428Z">
        <seg>上記したどちらのケースでも、ネストされた形式で名前を指定することが可能で、その場合にはネストされたデイレクトリを探索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case no default can be found, this option is mandatory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162703Z" creationid="makenowjust" creationdate="20200419T162636Z">
        <seg>デフォルト値が見つからない場合、このオプションは必須です</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In case we want to build richer CLI applications, there are libraries that can help us.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190917Z" creationid="makenowjust" creationdate="20200413T185802Z">
        <seg>よりリッチなCLI アプリケーションを構築しようと思ったとき、これらのライブラリが助けになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In cases like this where we want each instance to have a unique type for `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061002Z" creationid="hirofumiwakasugi" creationdate="20150912T060710Z">
        <seg>したがって、このような場合には、`@value` がインスタンスごとに固有の型を持つことが望ましいと考えることでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In certain cases you want to tell the compiler to fix the type of an instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T094141Z" creationid="hirofumiwakasugi" creationdate="20150905T093311Z">
        <seg>ときには、インスタンス変数の型をコンパイラに固定してもらいたいときもあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In class names, acronyms are &lt;g1&gt;all-uppercase&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203845Z" creationid="makenowjust" creationdate="20200412T203836Z">
        <seg>クラス名では、頭字語は&lt;g1&gt;すべて大文字&lt;/g1&gt;とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In class names, acronyms are _all-uppercase_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010828Z" creationid="hirofumiwakasugi" creationdate="20151010T010702Z">
        <seg>クラス名では、頭字語は「すべて大文字」とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In code examples, the comment &lt;g1&gt;#=&gt;&lt;/g1&gt; is used to show the value of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162809Z" creationid="makenowjust" creationdate="20200413T162809Z">
        <seg>コードの例では、ある式の結果を示すために&lt;g1&gt;#=&gt;&lt;/g1&gt;というコメントを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In code examples, the comment `#=&gt;` is used to show the value of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072316Z" creationid="hirofumiwakasugi" creationdate="20150901T072316Z">
        <seg>コードの例では、ある式の結果の値を示すために `#=&gt;` というコメントを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, the standard library already takes care of doing all of this so you don't have to.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074523Z" creationid="akiji" creationdate="20200428T074523Z">
        <seg>基本的に、標準ライブラリは使用者がそうした一切を気にかける必要がないように配慮されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In general, they are just value holders associated with the type that the programmer expects them to have according to their location and usage on the program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060839Z" creationid="hirofumiwakasugi" creationdate="20150902T052052Z">
        <seg>どういうことかというと、一般的にローカル変数というのは単純に型の情報を持った値の入れ物のようなものと考えることができて、プログラムにおけるそれぞれの場所や用途に応じてその入れ物の型も変化するということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In generated documentation the dummy `&amp;block` method will always appear, regardless of you writing it or not.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072339Z" creationid="hirofumiwakasugi" creationdate="20150906T072316Z">
        <seg>ドキュメントでは、明示的にダミーの `&amp;block` を指定したかどうかに関わらず、必ず `&amp;block` を引数に伴って出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In its basic form, it allows matching a value against other values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023531Z" creationid="hirofumiwakasugi" creationdate="20150903T023234Z">
        <seg>基本的な書き方は以下のような形で、値と値のマッチングによって制御します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In let_it_cli.cr:5:46</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182451Z" creationid="makenowjust" creationdate="20200413T182451Z">
        <seg>In let_it_cli.cr:5:46</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In macro definitions arguments are passed as their AST nodes, giving you access to them in macro expansions (`{{some_macro_argument}}`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030258Z" creationid="hirofumiwakasugi" creationdate="20151009T030258Z">
        <seg>マクロの定義では、引数は AST ノードとして渡され、マクロ展開 (`{{some_macro_argument}}`) を使ってそれらにアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In method names, acronyms are &lt;g1&gt;all-lowercase&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203926Z" creationid="makenowjust" creationdate="20200412T203926Z">
        <seg>メソッド名では、頭字語は&lt;g1&gt;すべて小文字&lt;/g1&gt;とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In method names, acronyms are _all-lowercase_.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010856Z" creationid="hirofumiwakasugi" creationdate="20151010T010856Z">
        <seg>メソッド名では、頭字語は「すべて小文字」とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In non-packed structs, padding between field types is inserted according to the target system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073043Z" creationid="hirofumiwakasugi" creationdate="20150919T072939Z">
        <seg>パックしていない構造体では、対象のシステムに応じて、フィールドの型の間にパディングが挿入されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to account for load-order dependencies, &lt;g3&gt;source_file&lt;/g3&gt; can be used to specify one (or multiple)
entrypoints for the docs generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162432Z" creationid="makenowjust" creationdate="20200419T162432Z">
        <seg>読む込む順序に依存する場合は、ドキュメントジェネレータに明示的に1つ (ないし複数) の&lt;g3&gt;source_file&lt;/g3&gt; をエントリーポイントして指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In order to achieve this, the compiler executable provides two flags:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044817Z" creationid="hirofumiwakasugi" creationdate="20150909T044557Z">
        <seg>そのために、コンパイラに以下の2つのフラグを用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code `Int32 -&gt; String` is a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011715Z" creationid="hirofumiwakasugi" creationdate="20151009T011653Z">
        <seg>通常のコードにおいては、`Int32 -&gt; String` はシンタックスエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32 | String` means invoking the method `|` on `Int32` with `String` as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010641Z" creationid="hirofumiwakasugi" creationdate="20151009T010641Z">
        <seg>通常のコードにおいては、`Int32 | String` が意味するのは、`Int32` に対して `String` を引数として `|` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32*` means invoking the `*` method on `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010951Z" creationid="hirofumiwakasugi" creationdate="20151009T010951Z">
        <seg>通常のコードにおいては、`Int32*` が意味するのは、`Int32` に対して `*` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32?` is a syntax error.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010914Z" creationid="hirofumiwakasugi" creationdate="20151009T010848Z">
        <seg>通常のコードにおいては、`Int32?` はシンタックスエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `Int32[8]` means invoking the `[]` method on `Int32` with `8` as an argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011122Z" creationid="hirofumiwakasugi" creationdate="20151009T011116Z">
        <seg>通常のコードにおいては、`Int32[8]` が意味するのは、`Int32` に対して `8` を引数として `[]` メソッドを実行することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In regular code, `{Int32, String}` is a tuple instance containing `Int32` and `String` as its elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011232Z" creationid="hirofumiwakasugi" creationdate="20151009T011204Z">
        <seg>通常のコードにおいては、`{Int32, String}` は `Int32` と `String` を要素として持つタプルのインスタンスです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, avoid `&amp;block` forwarding when `yield` is involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032539Z" creationid="hirofumiwakasugi" creationdate="20150917T032404Z">
        <seg>一言で言うと、`yield` を伴うときには `&amp;block` のフォワーディングは避けるべき、ということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In short, it is preferred to:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T135946Z" creationid="hirofumiwakasugi" creationdate="20151010T135946Z">
        <seg>簡単に言うと、以下のようにするのが好ましいということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In test files, specs are structured by example groups which are defined by &lt;g1&gt;describe&lt;/g1&gt; and &lt;g2&gt;context&lt;/g2&gt; sections.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233230Z" creationid="akiji" creationdate="20200505T133338Z">
        <seg>テストファイル内では、specは&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;といったセクションで実行例をグルーピングします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that block we define all the options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173629Z" creationid="makenowjust" creationdate="20200413T173314Z">
        <seg>このブロックですべてのオプションを定義しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In that case, we would get an empty string (if the user only presses &lt;g1&gt;Enter&lt;/g1&gt;) or maybe a &lt;g2&gt;Nil&lt;/g2&gt; value (if the input stream id closed, e.g. by pressing &lt;g3&gt;Ctrl+D&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182258Z" creationid="makenowjust" creationdate="20200413T182258Z">
        <seg>この場合は、空文字列 (ユーザーが &lt;g1&gt;Enter&lt;/g1&gt;を押した場合) もしくは &lt;g2&gt;Nil&lt;/g2&gt; 値 (&lt;g3&gt;Ctrl+D&lt;/g3&gt;によって入力ストリームを閉じた場合) が返ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the "Everything is an object" section we said that an object has a type and responds to some methods, which is the only way to interact with objects, so we'll need a `name` and `age` methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T061750Z" creationid="hirofumiwakasugi" creationdate="20150904T052518Z">
        <seg>「すべてがオブジェクト」のセクションで、「オブジェクトは型を持ち、メソッドに応答する」ものであると書きました。つまり、オブジェクトと対話するためにはメソッドが必要だということです。それでは、名前と年齢のために `name` と `age` の2つのメソッドを設定しましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code we didn't have to specify the type arguments of `MyBox`, the compiler inferred them following this process:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070907Z" creationid="hirofumiwakasugi" creationdate="20150912T070907Z">
        <seg>上記では、`MyBox` に型引数を与えていません。このとき、コンパイラは以下の流れで推論を行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above code, `a` is a union of `Int32 | String`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010108Z" creationid="hirofumiwakasugi" creationdate="20150930T014204Z">
        <seg>上記のコードでは、`a` は `Int32 | String` の組み合わせ (ユニオン型) となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example the type of `&amp;block` wasn't specified: this just means that the captured block doesn't have arguments and doesn't return anything.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061933Z" creationid="hirofumiwakasugi" creationdate="20150918T061933Z">
        <seg>上記の例において、`&amp;block` の型を指定していません。これは捕捉されたブロックが引数を何も受け取らず、戻り値も返さないことを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example three variables were declared, associated to an index, and then they were printed, referring to these variables with the same indices.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021240Z" creationid="hirofumiwakasugi" creationdate="20151002T021104Z">
        <seg>上記の例では、3つの変数を宣言しインデックスに紐付けています。それから出力をしていますが、そのときに同じインデックスで変数を参照しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example we used &lt;g1&gt;nil&lt;/g1&gt; just to communicate that the fiber ended.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T132539Z" creationid="akiji" creationdate="20200429T132539Z">
        <seg>上の例では単にファイバが終了したことを伝えるだけの目的で &lt;g1&gt;nil&lt;/g1&gt; を使いました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, `invoke` receives a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024318Z" creationid="hirofumiwakasugi" creationdate="20150917T024210Z">
        <seg>上記の例で、`invoke` はブロックを受け取ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, even though `x` is a local variable, it was captured by the proc literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053936Z" creationid="hirofumiwakasugi" creationdate="20150918T053758Z">
        <seg>上記の例において、`x` はローカル変数であるにも関わらず、proc リテラルによって捕捉されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, it is as if we pasted the `length` method from the module into the `Items` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T135837Z" creationid="hirofumiwakasugi" creationdate="20150911T133944Z">
        <seg>上記の例では、まるでモジュールの `length` メソッドを `Items` クラスの中に貼り付けたようにメソッドが実行されていることがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the above example, it is as if we pasted the `size` method from the module into the `Items` class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092312Z" creationid="hirofumiwakasugi" creationdate="20151009T092312Z">
        <seg>上記の例では、まるでモジュールの `size` メソッドを `Items` クラスの中に貼り付けたようにメソッドが実行されていることがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the case of a generic type, the type arguments can be specified too:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072433Z" creationid="hirofumiwakasugi" creationdate="20150901T140601Z">
        <seg>ジェネリック型である場合には、型引数を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the first case:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135141Z" creationid="hirofumiwakasugi" creationdate="20150904T135122Z">
        <seg>1つの例の場合:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the latter case, T will be set to the union of the array literal elements.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140016Z" creationid="hirofumiwakasugi" creationdate="20150901T135656Z">
        <seg>配列リテラルで生成した場合であれば、リテラルの要素の型の組み合わせによって型が決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the latter case, `K` will be set to the union of the hash literal keys, and `V` will be set to the union of the hash literal values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142449Z" creationid="hirofumiwakasugi" creationdate="20150901T142332Z">
        <seg>ハッシュリテラルで生成した場合であれば、リテラルのキーと値それぞれの型の組み合わせによって型が決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the literal notation, &lt;g3&gt;nil&lt;/g3&gt; can be omitted: &lt;g4&gt;x..&lt;/g4&gt; is an end-less range starting from &lt;g5&gt;x&lt;/g5&gt;, and &lt;g6&gt;..x&lt;/g6&gt; is an begin-less range ending at &lt;g7&gt;x&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035741Z" creationid="makenowjust" creationdate="20200421T035741Z">
        <seg>リテラルを書く上では &lt;g3&gt;nil&lt;/g3&gt; は省略できます。つまり &lt;g4&gt;x..&lt;/g4&gt; は &lt;g5&gt;x&lt;/g5&gt; から始まる end-less 範囲で、&lt;g6&gt;..x&lt;/g6&gt; は&lt;g7&gt;x&lt;/g7&gt;で終わる begin-less 範囲です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the next sections a dollar sign (`$`) denotes the command line.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071925Z" creationid="hirofumiwakasugi" creationdate="20150901T071925Z">
        <seg>なお、以降ではドル記号 (`$`) でコマンドラインを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the previous example `self` is the same as writing `Person`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023847Z" creationid="hirofumiwakasugi" creationdate="20150908T023654Z">
        <seg>上記の例では、`self` を指定するのは、そのまま `Person` と書くことと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In the second case:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135153Z" creationid="hirofumiwakasugi" creationdate="20150904T135153Z">
        <seg>2つ目の例の場合:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In these cases you have to manually mark such functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053358Z" creationid="hirofumiwakasugi" creationdate="20151008T053358Z">
        <seg>こういったケースでは、それらの関数に手動で指示を与える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case the compiler allocates `x` on the heap and uses it as the context data of the proc to make it work, because normally local variables live in the stack and are gone after a method returns.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054123Z" creationid="hirofumiwakasugi" creationdate="20150918T054123Z">
        <seg>このとき、コンパイラは `x` をヒープに割り当て、proc が動作するためのコンテキストのデータをして利用します。通常であれば、ローカル変数はスタックに存在し、メソッドが終了すると消えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, if we assign something that's not an `Int32` to `@age`, a compile-time error will be issued at the assignment location.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155308Z" creationid="hirofumiwakasugi" creationdate="20150905T100056Z">
        <seg>こうしておくと、`@age` に `Int32` ではない値を代入しようとしたときに、その場所でコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, leading whitespace is not included in the resulting string.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104227Z" creationid="hirofumiwakasugi" creationdate="20150901T104227Z">
        <seg>この場合、先頭の空白が結果の文字列に含まれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, no runtime checks are done: pointers are unsafe and this type of casting is usually only needed in C bindings and low-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015956Z" creationid="hirofumiwakasugi" creationdate="20150930T015956Z">
        <seg>このとき、ランタイムのチェックは行われません。ポインタは安全でない (unsafe) ため、通常、この型キャストは C バインディングやローレベルなコードにおいてのみ利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the block receives a parameter that represents the parameter passed to the option.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175327Z" creationid="makenowjust" creationdate="20200413T175327Z">
        <seg>この場合、ブロックにはオプションに与えられたパラメーターの値が渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this case, the compiler will consider any usage of `@name` as always being either a `String` or an `Int32` and will give a compile time error if a method is not found for *both* types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155300Z" creationid="hirofumiwakasugi" creationdate="20150905T042636Z">
        <seg>このケースでは、コンパイラは `@name` は常に `String` か `Int32` のいずれかの型であるとして解釈します。したがって、もしその「両方」の型に存在しないメソッドが呼び出された場合にはコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this cases you can help the compiler by using an `as` expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002329Z" creationid="hirofumiwakasugi" creationdate="20151220T002314Z">
        <seg>こういったケースでは、`as`式を使うことでコンパイラを補助することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way a block can be saved as a callback:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061907Z" creationid="hirofumiwakasugi" creationdate="20150918T061907Z">
        <seg>この方法で、ブロックをコールバックとして保存しておくこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way a module can be used as a namespace:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145113Z" creationid="hirofumiwakasugi" creationdate="20150911T142912Z">
        <seg>このとき、モジュールを名前空間として利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way generic types are less tedious to work with.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072243Z" creationid="hirofumiwakasugi" creationdate="20150912T071027Z">
        <seg>このようにして、ジェネリック型の扱いが冗長になってしまうことを軽減しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way we pass a pointer of `status_ptr` to the function for it to fill its value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043900Z" creationid="hirofumiwakasugi" creationdate="20151005T043846Z">
        <seg>このとき、`status_ptr` のポインタを関数に渡し、値を設定してもらっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In this way, default arguments and named arguments are related to each other: when you specify default arguments you are also allowing the caller to use their names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114215Z" creationid="hirofumiwakasugi" creationdate="20150906T113517Z">
        <seg>このように、デフォルト引数と名前付き引数には密接な関係があります。つまり、デフォルト引数を指定した場合、同事に呼び出し側がその名前で引数を指定できるようになるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;g1&gt;type grammar&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170522Z" creationid="makenowjust" creationdate="20200422T170522Z">
        <seg>型制約やジェネリック型の型引数など型が期待される場所であれば、&lt;g1&gt;型の文法&lt;/g1&gt;で説明しているような短い記法で型を書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>In type restrictions, generic type arguments and other places where a type is expected, you can use a shorter syntax, as explained in the &lt;g1&gt;type&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171839Z" creationid="makenowjust" creationdate="20200422T171839Z">
        <seg>型制約やジェネリック型の型引数など型が期待される場所であれば、&lt;g1&gt;型の文法&lt;/g1&gt;で説明しているような短い記法で型を書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Indicates the call convention of a [lib fun](c_bindings/fun.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074352Z" creationid="hirofumiwakasugi" creationdate="20150919T074346Z">
        <seg>[lib fun](c_bindings/fun.html) の呼出規約を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Individual symbols are separated by a single space character (&lt;g1&gt; &lt;/g1&gt;) which must be escaped to use it as a part of an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172243Z" creationid="makenowjust" creationdate="20200420T172243Z">
        <seg>個々のシンボルは1つのスペース (&lt;g1&gt; &lt;/g1&gt;) で区切られていて、スペースを1つの部分に含めたい場合はエスケープが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inheriting Documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212923Z" creationid="makenowjust" creationdate="20200412T212923Z">
        <seg>ドキュメントの継承</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Initializes a shard folder and creates a &lt;g1&gt;shard.yml&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180511Z" creationid="makenowjust" creationdate="20200419T180511Z">
        <seg>shard用のフォルダを生成して&lt;g1&gt;shard.yml&lt;/g1&gt;を生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163657Z" creationid="makenowjust" creationdate="20200413T163657Z">
        <seg>入力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside an &lt;g1&gt;if&lt;/g1&gt;'s branch the type of a variable is the one it got assigned in that branch, or the one that it had before the branch if it was not reassigned:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075057Z" creationid="makenowjust" creationdate="20200424T075031Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の分岐節の中である変数に代入が行なわれたとき、変数の型は代入された式の型になりますが、もし条件に合致せずその代入式が評価されなかった場合、以前の型のままで変更されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside an `if`'s branch the type of a variable is the one it got assigned in that branch, or the one that it had before the branch if it was not reassigned:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025805Z" creationid="hirofumiwakasugi" creationdate="20150903T011814Z">
        <seg>`if` の分岐節の中である変数に代入が行われたとき、変数の型は代入された式の型になりますが、もし条件に合致せずその代入式が評価されなかった場合には、以前の型のままで変更されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside it you will have a `bin/crystal` executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055805Z" creationid="hirofumiwakasugi" creationdate="20150831T055805Z">
        <seg>その中に、`bin/crystal` という実行ファイルが含まれています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inside the repository you will also find a wrapper script at `bin/crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060933Z" creationid="hirofumiwakasugi" creationdate="20150831T060755Z">
        <seg>リポジトリの中を見ると、`bin/crystal` というラッパースクリプトが存在することに気づくと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Inspired by &lt;g1&gt;Rspec&lt;/g1&gt;, it includes a domain specific language (DSL) that allows you to write examples in a way similar to plain english.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T124438Z" creationid="akiji" creationdate="20200505T124341Z">
        <seg>また、&lt;g1&gt;Rspec&lt;/g1&gt;を参考に、素の英語に近い形で実行例を記述できるドメイン固有言語（DSL：Domain Specific Language）を導入しまています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Installation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173305Z" creationid="makenowjust" creationdate="20200419T173305Z">
        <seg>インストール方法</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance methods are prefixed with &lt;g3&gt;#&lt;/g3&gt;, class methods with &lt;g4&gt;.&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233919Z" creationid="akiji" creationdate="20200505T133958Z">
        <seg>インスタンスメソッドの場合はメソッド名の前に &lt;g3&gt;#&lt;/g3&gt;を、クラスメソッドの場合は&lt;g4&gt;.&lt;/g4&gt;を付けましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables can also be initialized outside `initialize` methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054955Z" creationid="hirofumiwakasugi" creationdate="20150905T054955Z">
        <seg>インスタンス変数を `initialize` メソッドの外側で初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instance variables' types are inferred from the values assigned to them, like it was explained in [instance variables type inference](instance_variables_type_inference.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060051Z" creationid="hirofumiwakasugi" creationdate="20150912T054625Z">
        <seg>[インスタンス変数と型推論](instance_variables_type_inference.html)で説明したように、インスタンス変数の型は代入された値から推論されます:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of defining a type with `class` you can do so with `struct`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053814Z" creationid="hirofumiwakasugi" creationdate="20150913T053658Z">
        <seg>ある型を定義するとき、`class` ではなく `struct` を使うことで構造体を定義することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Instead of overriding you can define specialized methods by using type restrictions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024415Z" creationid="hirofumiwakasugi" creationdate="20150910T024330Z">
        <seg>オーバーライドの代わりに、型制約を利用して派生クラスに特化したメソッドを定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Int64 |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071433Z" creationid="hirofumiwakasugi" creationdate="20150919T071433Z">
        <seg>Int64 |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Integers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181937Z" creationid="makenowjust" creationdate="20200419T181937Z">
        <seg>整数 (Integer)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally a symbol is represented as an `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131554Z" creationid="hirofumiwakasugi" creationdate="20150901T131529Z">
        <seg>内部的には、シンボルは `Int32` で表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, a channel implements all the locking mechanisms to avoid data races, but from the outside you use them as communication primitives, so you (the user) don't have to use locks.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103031Z" creationid="akiji" creationdate="20200428T064113Z">
        <seg>チャネルは内部的にデータ競合を避けるためのロック機構を実装していますが、外から使う分にはロックを考慮する必要のないデータの送受信手法として使用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, symbols are implemented as constants with a numeric value of type &lt;g1&gt;Int32&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171712Z" creationid="makenowjust" creationdate="20200420T171712Z">
        <seg>内部的には、シンボルは&lt;g1&gt;Int32&lt;/g1&gt;型の定数値として実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Internally, the compiler rewrites command literals to calls to the top-level method &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt; with a string literal containing the command as argument: &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; and &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; are rewritten to &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172958Z" creationid="makenowjust" creationdate="20200422T172958Z">
        <seg>内部的にはコンパイラはコマンドリテラルを &lt;g1&gt;&lt;g2&gt; `()&lt;/g2&gt;&lt;/g1&gt; メソッドに文字列リテラルを渡すように書き換えています。つまり &lt;g3&gt; `echo #{argument}` &lt;/g3&gt; と &lt;g4&gt;%x(echo #{argument})&lt;/g4&gt; は &lt;g5&gt; `("echo #{argument}")&lt;/g5&gt; のように書き換えられています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192656Z" creationid="makenowjust" creationdate="20200419T192158Z">
        <seg>文字列の補間</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation can be disabled by escaping the &lt;g1&gt;#&lt;/g1&gt; character with a backslash or by using a non-interpolating string literal like &lt;g2&gt;%q()&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192729Z" creationid="makenowjust" creationdate="20200419T192637Z">
        <seg>&lt;g1&gt;#&lt;/g1&gt;をバックスラッシュでエスケープするか、&lt;g2&gt;%q()&lt;/g2&gt;のような補間を許可しないような文字列リテラルを使うことで、補間を無効にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation is implemented using a &lt;g1&gt;String::Builder&lt;/g1&gt; and invoking &lt;g2&gt;Object#to_s(IO)&lt;/g2&gt; on each expression enclosed by &lt;g3&gt;#{...}&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192832Z" creationid="makenowjust" creationdate="20200419T192832Z">
        <seg>補間は&lt;g1&gt;String::Builder&lt;/g1&gt;を使い、&lt;g3&gt;#{...}&lt;/g3&gt;の中の式に対して&lt;g2&gt;Object#to_s(IO)&lt;/g2&gt;を呼び出すことで実装されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Interpolation works in regular expression literals just as it does in &lt;g1&gt;string literals&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041326Z" creationid="makenowjust" creationdate="20200421T041326Z">
        <seg>文字列の補間は正規表現リテラル中でも&lt;g1&gt;文字列リテラル&lt;/g1&gt;の場合と同様に機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171920Z" creationid="makenowjust" creationdate="20200422T171920Z">
        <seg>Proc の呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking the compiler with the `hierarchy` command we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135700Z" creationid="hirofumiwakasugi" creationdate="20150904T135515Z">
        <seg>`hierarchy` コマンドでコンパイラを起動すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Invoking the compiler with the `tool hierarchy` command we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025336Z" creationid="hirofumiwakasugi" creationdate="20151009T025336Z">
        <seg>`tool hierarchy` コマンドでコンパイラを起動すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It accepts a single argument, a string literal, and it can come in many flavors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T161716Z" creationid="hirofumiwakasugi" creationdate="20150905T161552Z">
        <seg>引数には1つの文字列リテラルをとり、その書き方によって様々な形式で対象を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It accepts multiple arguments, and the result is the union of the expression types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062601Z" creationid="hirofumiwakasugi" creationdate="20150930T062601Z">
        <seg>複数の引数を渡すことも可能で、その場合にはそれぞれの式の組み合わせの型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It allows writing a chain of if-else-if with a small change in semantic and some more powerful constructs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090846Z" creationid="hirofumiwakasugi" creationdate="20150903T023143Z">
        <seg>これは、多少異なる点もありますが、if 文で if-else-if の形で複数の条件分岐を構築することに近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It also does not work with constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081903Z" creationid="makenowjust" creationdate="20200424T081903Z">
        <seg>また、定数に対しても機能しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It basically allocates the necessary memory for it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060757Z" creationid="hirofumiwakasugi" creationdate="20150904T060739Z">
        <seg>そのとき、必要なメモリが割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can be followed by these modifiers:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015949Z" creationid="hirofumiwakasugi" creationdate="20150902T015847Z">
        <seg>また、正規表現リテラルにはオプションを追加することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can contain alphanumeric characters, underscore (&lt;g1&gt;_&lt;/g1&gt;) or characters with a code point greater than &lt;g2&gt;159&lt;/g2&gt;(&lt;g3&gt;0x9F&lt;/g3&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171453Z" creationid="makenowjust" creationdate="20200420T171453Z">
        <seg>つまり、アルファベットや数値、アンダースコア (&lt;g1&gt;_&lt;/g1&gt;) 、もしくは &lt;g2&gt;159&lt;/g2&gt;(&lt;g3&gt;0x9F&lt;/g3&gt;) より大きいコードポイントの文字をシンボルの識別子に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It can either be followed by exactly four hexadecimal characters representing the unicode bytes (&lt;g2&gt;\u0000&lt;/g2&gt; to &lt;g3&gt;\uFFFF&lt;/g3&gt;) or a number of one to six hexadecimal characters wrapped in curly braces (&lt;g4&gt;\u{0}&lt;/g4&gt; to &lt;g5&gt;\u{10FFFF}&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T190356Z" creationid="makenowjust" creationdate="20200419T190331Z">
        <seg>ユニコードの文字を表現するため、ちょうど4つの16進数の数値か (&lt;g2&gt;\u0000&lt;/g2&gt; to &lt;g3&gt;\uFFFF&lt;/g3&gt;) かひげ括弧で囲った6つまでの16進数の数値が利用できます (&lt;g4&gt;\u{0}&lt;/g4&gt; to &lt;g5&gt;\u{10FFFF}&lt;/g5&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of a string of UTF-8 character enclosed in forward slashes (&lt;g2&gt;/&lt;/g2&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041152Z" creationid="makenowjust" creationdate="20200421T040543Z">
        <seg>リテラルとしては、UTF-8の文字列をスラッシュ (&lt;g2&gt;/&lt;/g2&gt;) で囲んで記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of the name of the type followed by a list of  comma separated key-value pairs enclosed in curly braces (&lt;g1&gt;{}&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180029Z" creationid="makenowjust" creationdate="20200420T180029Z">
        <seg>型の名前のあとに続けたひげ括弧 (&lt;g1&gt;{}&lt;/g1&gt;) の中に、コンマ区切りのキーと値の組を並べることで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It consists of the name of the type followed by a list of elements enclosed in curly braces (&lt;g1&gt;{}&lt;/g1&gt;) and individual elements separated by a comma (&lt;g2&gt;,&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174210Z" creationid="makenowjust" creationdate="20200420T173502Z">
        <seg>型の名前にひげ括弧 (&lt;g1&gt;{}&lt;/g1&gt;) とコンマ (&lt;g2&gt;,&lt;/g2&gt;) によって区切られた個々の要素を続けることで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It doesn’t work with instance variables, class variables, or variables bound in a closure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081803Z" creationid="makenowjust" creationdate="20200424T081803Z">
        <seg>インスタンス変数、クラス変数、クロージャに束縛された変数に関してはこの機能は機能しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has a different name, but behaves exactly like &lt;g4&gt;describe&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233955Z" creationid="akiji" creationdate="20200505T134251Z">
        <seg>これは、名前が違うだけで、その挙動は&lt;g4&gt;describe&lt;/g4&gt;と全く変わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It has the same effect as writing &lt;g1&gt;is_a?(Nil)&lt;/g1&gt; but it's shorter and easier to read and write.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T145248Z" creationid="tobias" creationdate="20200501T145248Z">
        <seg>それは&lt;g1&gt;is_a?(Nil)&lt;/g1&gt;と書くのと同じですが、より短く読み書きが簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because it only accepts a symbol literal as its argument, and is also treated specially by the compiler, as explained in [if var.responds_to?(...)](if_varresponds_to.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014059Z" creationid="hirofumiwakasugi" creationdate="20150930T013944Z">
        <seg>これが擬似メソッドである理由は、[if 変数.responds_to?(...)](if_varresponds_to.html) で説明したように、引数にシンボルのリテラルのみを受け取り、そして、コンパイラによって特別な扱いを受けるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in &lt;g1&gt;if var.nil?(...)&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T145108Z" creationid="tobias" creationdate="20200501T145108Z">
        <seg>これが疑似メソッドである理由は、&lt;g1&gt;if var.nil?(...)&lt;/g1&gt;で説明したように、このメソッドはコンパイラによって参照され、それによって型情報を設定することができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a pseudo-method because the compiler knows about it and it can affect type information, as explained in [if var.is_a?(...)](if_varis_a.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013812Z" creationid="hirofumiwakasugi" creationdate="20150930T011157Z">
        <seg>これが擬似メソッドである理由は、[if 変数.is_a?(...)](if_varis_a.html) で説明したように、このメソッドはコンパイラによって参照され、それによって型情報を設定することができるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is a very common practice to pass options to the application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164130Z" creationid="makenowjust" creationdate="20200413T164130Z">
        <seg>アプリケーションにオプションを渡すことはとても一般的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also used to refer to code from &lt;g1&gt;specs&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091308Z" creationid="makenowjust" creationdate="20200427T090741Z">
        <seg>また、&lt;g1&gt;specs&lt;/g1&gt; からコードを参照する場合にも利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also used to refer to code from specs:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160401Z" creationid="hirofumiwakasugi" creationdate="20150905T160230Z">
        <seg>また、spec からコードを参照する場合にも利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is created by enclosing an UTF-8 character in single quotes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074441Z" creationid="hirofumiwakasugi" creationdate="20150901T074441Z">
        <seg>UTF-8 の文字をシングルクォートで囲んで記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is defined as a method on &lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt; and can be overridden by subclasses to provide meaningful semantics in case statements.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091145Z" creationid="makenowjust" creationdate="20200424T091145Z">
        <seg>これは&lt;g4&gt;&lt;g5&gt;Object&lt;/g5&gt;&lt;/g4&gt;に定義されたメソッドで、case 文で使う際に意味があるようにサブクラスでオーバライドされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is indicated by &lt;g2&gt;%i&lt;/g2&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171905Z" creationid="makenowjust" creationdate="20200420T171905Z">
        <seg>それは&lt;g2&gt;%i&lt;/g2&gt;と区切り文字の組によって記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is indicated by &lt;g2&gt;%w&lt;/g2&gt; and a pair of delimiters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193903Z" creationid="makenowjust" creationdate="20200419T193903Z">
        <seg>それは&lt;g2&gt;%w&lt;/g2&gt;と区切り文字の組によって記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is often used in generic code, to make use of the compiler's type inference capabilities:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062811Z" creationid="hirofumiwakasugi" creationdate="20150930T062630Z">
        <seg>これはジェネリックコードにおいて、コンパイラの型推論の力を利用したいときにしばしば使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is only available in the same scope as the command literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172851Z" creationid="makenowjust" creationdate="20200422T172851Z">
        <seg>この特殊変数はコマンドリテラルと同じスコープに限り有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is possible to directly call methods on heredoc string literals, or use them inside parentheses:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034037Z" creationid="makenowjust" creationdate="20200420T034037Z">
        <seg>ヒアドキュメントの直後にそれに対するメソッド呼び出しを続けたり、括弧の中でヒアドキュメントを使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically constructed with a range literal, consisting of two or three dots:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033825Z" creationid="makenowjust" creationdate="20200421T033825Z">
        <seg>通常、範囲は2つもしくは3つのドットからなる範囲リテラルによって生成されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a char literal by enclosing an UTF-8 character in single quotes.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T185801Z" creationid="makenowjust" creationdate="20200419T185801Z">
        <seg>通常、シングルクォートでUTF-8でエンコードされた文字を囲って文字リテラルを記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a hash literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140851Z" creationid="hirofumiwakasugi" creationdate="20150901T140851Z">
        <seg>通常、以下のハッシュリテラルを利用して書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with a proc literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021043Z" creationid="hirofumiwakasugi" creationdate="20150902T021043Z">
        <seg>通常、Proc リテラルを使って生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is typically created with an array literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T135948Z" creationid="hirofumiwakasugi" creationdate="20150901T131939Z">
        <seg>通常、以下の配列リテラルを利用して書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It makes them be thread local.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072504Z" creationid="hirofumiwakasugi" creationdate="20150919T072504Z">
        <seg>これによって、それらの変数がスレッドローカルになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It manages dependencies for Crystal projects and libraries with reproducible
installs across computers and systems.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173259Z" creationid="makenowjust" creationdate="20200419T173259Z">
        <seg>これは Crystal のプロジェクトやライブラリの依存関係を管理して、あるシステムやコンピュータのまたがって再現可能なインストールを実現します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It matches anything:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012131Z" creationid="hirofumiwakasugi" creationdate="20151009T012120Z">
        <seg>それはすべてにマッチすることを示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It must not start with a number and may end with an exclamation mark (&lt;g4&gt;!&lt;/g4&gt;) or question mark (&lt;g5&gt;?&lt;/g5&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171551Z" creationid="makenowjust" creationdate="20200420T171551Z">
        <seg>そして、数字から識別子をはじめることはできず、識別子の最後にエクストラメーションマーク (&lt;g4&gt;!&lt;/g4&gt;) やクエスチョンマーク (&lt;g5&gt;?&lt;/g5&gt;) を続けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It occupies 32 bits.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074303Z" creationid="hirofumiwakasugi" creationdate="20150901T074230Z">
        <seg>そのビット数は32ビットです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It only has a single value:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000940Z" creationid="makenowjust" creationdate="20200414T000747Z">
        <seg>ただ1つの値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It provides a structure for writing executable examples of how your code should behave.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T232629Z" creationid="akiji" creationdate="20200505T124133Z">
        <seg>これは、あなたのコードがどのような挙動を示すべきかを示す実行例を記述する構造を提供するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It returns a union type of the type of the passed expressions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012331Z" creationid="hirofumiwakasugi" creationdate="20151009T012331Z">
        <seg>渡された式の型の組み合わせ (ユニオン型) を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It will be substituted at runtime by the captured output from executing the string in a subshell.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172827Z" creationid="makenowjust" creationdate="20200422T172520Z">
        <seg>実行時に文字列の内容をコマンドとしてサブシェルで実行して、その出力の文字列が結果の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's a small object that has an associated &lt;g1&gt;stack&lt;/g1&gt; of 8MB, which is what is usually assigned to an operating system thread.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065753Z" creationid="akiji" creationdate="20200428T060032Z">
        <seg>ファイバは、通常OSスレッド上の &lt;g1&gt;スタックメモリ&lt;/g1&gt; 上に8MBが割り当てられた小さなオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's good advice to add it to &lt;g6&gt;.gitignore&lt;/g6&gt; (the &lt;g7&gt;&lt;g8&gt;crystal init&lt;/g8&gt;&lt;/g7&gt; does this automatically when initializing a &lt;g9&gt;lib&lt;/g9&gt; repository).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174612Z" creationid="makenowjust" creationdate="20200419T174612Z">
        <seg>&lt;g6&gt;.gitignore&lt;/g6&gt;にそれを含めることをオススメします (&lt;g7&gt;&lt;g8&gt;crystal init&lt;/g8&gt;&lt;/g7&gt; は&lt;g9&gt;lib&lt;/g9&gt; リポジトリを初期化する際にそれを自動的に行います).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Items.length #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141821Z" creationid="hirofumiwakasugi" creationdate="20150911T141821Z">
        <seg>Items.length #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Items.size #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092316Z" creationid="hirofumiwakasugi" creationdate="20151009T092316Z">
        <seg>Items.size #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Its type is the union of the types of both sides.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010053Z" creationid="hirofumiwakasugi" creationdate="20150905T052607Z">
        <seg>その型は両辺の型の組み合わせ (ユニオン型）です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It’s broken: we need to handle &lt;g1&gt;invalid options&lt;/g1&gt; and &lt;g2&gt;invalid parameters&lt;/g2&gt; given to an option!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180036Z" creationid="makenowjust" creationdate="20200413T180036Z">
        <seg>これは壊れていますね。&lt;g1&gt;無効なオプション&lt;/g1&gt;と&lt;g2&gt;無効なパラメーター&lt;/g2&gt;が渡されたときの処理をする必要するがあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just Crystal making our life easy.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174028Z" creationid="makenowjust" creationdate="20200413T173050Z">
        <seg>実装が簡単になったのは Crystal のおかげです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just like a class or a struct, you can define methods for enums:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011443Z" creationid="hirofumiwakasugi" creationdate="20150916T011402Z">
        <seg>クラスや構造体と同様に、Enum にもメソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LUCKY_NUMBERS     = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205107Z" creationid="makenowjust" creationdate="20200412T205107Z">
        <seg>LUCKY_NUMBERS     = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;a0&gt;0.34.0&lt;/a0&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210344Z" creationid="makenowjust" creationdate="20200413T210335Z">
        <seg>最新のリリース &lt;a0&gt;0.34.0&lt;/a0&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Latest release &lt;g1&gt;0.34.0&lt;/g1&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212105Z" creationid="makenowjust" creationdate="20200413T212105Z">
        <seg>最新のリリース &lt;g1&gt;0.34.0&lt;/g1&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leading whitespace is removed from the heredoc contents according to the number of whitespace in the last line before the heredoc identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033928Z" creationid="makenowjust" creationdate="20200420T033928Z">
        <seg>最後の行のヒアドキュメントの識別子の前の空白の個数分だけ、ヒアドキュメントの内容から先頭の空白文字が削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leading whitespace is removing from the heredoc contents according to the number of whitespace that this last `IDENT` has.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062351Z" creationid="hirofumiwakasugi" creationdate="20160204T062144Z">
        <seg>ヒアドキュメントでは、終端の `IDENT` に指定されている先頭の空白の数にしたがって、ヒアドキュメントの内容から先頭の空白が削除されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Learn how to bind to C libraries</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221549Z" creationid="makenowjust" creationdate="20200413T221549Z">
        <seg>C ライブラリのバインディング方法について学ぶ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Leave no blanks between them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033511Z" creationid="hirofumiwakasugi" creationdate="20151010T033502Z">
        <seg>間に空白行が入っていてはいけません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Length</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182021Z" creationid="makenowjust" creationdate="20200419T182021Z">
        <seg>大きさ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's build another &lt;g1&gt;fabulous&lt;/g1&gt; application with the following feature:
By default (i.e. no options given) the application will display the names of the Fab Four.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175858Z" creationid="makenowjust" creationdate="20200413T174655Z">
        <seg>続けて、デフォルトでは (オプションが与えられなかったときに) The Fab Four のメンバーの名前を表示する、という機能を持った、&lt;g1&gt;ファビュラスな&lt;/g1&gt;アプリケーションを作ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's start with two examples to familiarize ourselves with the language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072409Z" creationid="hirofumiwakasugi" creationdate="20150901T072409Z">
        <seg>それでは、まずはこれから紹介する2つのプログラムの例を見ながら、Crystal に親しんでいきましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lets make John's pet talk:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034133Z" creationid="hirofumiwakasugi" creationdate="20150910T034104Z">
        <seg>それでは、John のペットに喋らせてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s add more &lt;g1&gt;life&lt;/g1&gt; (i.e. colors!) to the outputs.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183143Z" creationid="makenowjust" creationdate="20200413T183019Z">
        <seg>せっかくなので出力を&lt;g1&gt;色付け&lt;/g1&gt;してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s build a really simple application that shows a string with colors!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183246Z" creationid="makenowjust" creationdate="20200413T183246Z">
        <seg>色付いた文字列を表示する、単純なアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s build an application using this parser!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172329Z" creationid="makenowjust" creationdate="20200413T172329Z">
        <seg>それではこのパーサーを使ったアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s create a new application: the Fab Four will sing with us any phrase we want.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181535Z" creationid="makenowjust" creationdate="20200413T180944Z">
        <seg>The Fab Four が望むフレーズを唄ってくれる、というアプリケーションを作ってみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s create another application: &lt;g1&gt;when passing the option &lt;g2&gt;-g&lt;/g2&gt; / &lt;g3&gt;--goodbye_hello&lt;/g3&gt;, the application will say hello to a given name &lt;g4&gt;passed as a parameter to the option&lt;/g4&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175838Z" creationid="makenowjust" creationdate="20200413T175221Z">
        <seg>次はこんなアプリケーションを作ってみましょう。&lt;g1&gt;&lt;g2&gt;-g&lt;/g2&gt; / &lt;g3&gt;--goodbye_hello&lt;/g3&gt;オプションが与えられたときに、&lt;g4&gt;オプションのパラメーター&lt;/g4&gt;として渡された名前に挨拶をする&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s try it!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175336Z" creationid="makenowjust" creationdate="20200413T175336Z">
        <seg>試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let’s try the renewed application … and &lt;g1&gt;hear&lt;/g1&gt; the difference!!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184841Z" creationid="makenowjust" creationdate="20200413T184558Z">
        <seg>生まれ変わったアプリケーションを試してみてください……そして、違いを&lt;g1&gt;聴き取って&lt;/g1&gt;ください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052144Z" creationid="hirofumiwakasugi" creationdate="20151008T052144Z">
        <seg>LibFoo.store_callback -&gt;{ raise "OH NO!" }
LibFoo.execute_callback
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Library authors are advised to put their definitions inside a module to avoid name clashes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131718Z" creationid="hirofumiwakasugi" creationdate="20150911T131411Z">
        <seg>あなたがライブラリの作者であれば、上記のように型などの定義をモジュールの内部で行うことによって名前の衝突を避けるべきです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Libs</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T203954Z" creationid="makenowjust" creationdate="20200412T203954Z">
        <seg>ライブラリ (Lib)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Like above, they are not inherited by including types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041346Z" creationid="hirofumiwakasugi" creationdate="20150910T041346Z">
        <seg>その場合も、上記と同様に、インクルードによってクラス変数が引き継がれることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Likewise, we can wait for multiple fibers to complete execution, and gather their values:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151047Z" creationid="akiji" creationdate="20200429T134328Z">
        <seg>同様に、処理を完了するために複数のファイバを待ち受けて、それらの値を集約することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Limitations</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082037Z" creationid="makenowjust" creationdate="20200424T081649Z">
        <seg>制約</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Lists the installed dependencies and their versions.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181040Z" creationid="makenowjust" creationdate="20200419T181040Z">
        <seg>インストールされた依存関係とそれらのバージョンの一覧を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000357Z" creationid="makenowjust" creationdate="20200414T000357Z">
        <seg>リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000322Z" creationid="makenowjust" creationdate="20200414T000322Z">
        <seg>リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local variables</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180224Z" creationid="makenowjust" creationdate="20200422T180224Z">
        <seg>ローカル変数</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Local variables start with lowercase letters.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053623Z" creationid="hirofumiwakasugi" creationdate="20150902T051653Z">
        <seg>変数名の先頭が小文字の変数はローカル変数です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro conditionals can be used outside a macro definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040247Z" creationid="hirofumiwakasugi" creationdate="20151001T040232Z">
        <seg>マクロの条件分岐は、マクロの外側でも使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro defs allow you to define a method for a class hierarchy and have that method be evaluated at the end of the type-inference phase, as a macro, where type information is known, for each concrete subtype.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012111Z" creationid="hirofumiwakasugi" creationdate="20151002T011727Z">
        <seg>マクロで def を使うと、クラス階層内でメソッドを定義することが可能で、そのメソッドは型推論フェーズの終わりに評価されます。そのとき、マクロはそれぞれの派生型の型情報を知っている状態で評価されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macro iterations can be used outside a macro definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040446Z" creationid="hirofumiwakasugi" creationdate="20151001T040446Z">
        <seg>マクロのイテレーションは、マクロの外側でも使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211717Z" creationid="makenowjust" creationdate="20200413T211717Z">
        <seg>マクロ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros are also looked-up in the ancestors chain (superclasses and included modules).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015921Z" creationid="hirofumiwakasugi" creationdate="20151001T015914Z">
        <seg>また、マクロは継承チェーン (スーパクラスとインクルードされたモジュール) からも探索されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros are methods that receive AST nodes at compile-time and produce
code that is pasted into a program.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014644Z" creationid="hirofumiwakasugi" creationdate="20151001T014640Z">
        <seg>マクロとは、コンパイル時に AST ノードを受け取り、コードを生成してそれをプログラムに書き込むメソッドです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros can access constants.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041453Z" creationid="hirofumiwakasugi" creationdate="20151001T041453Z">
        <seg>マクロは定数にアクセスすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Macros declared at the top-level are visible anywhere.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015527Z" creationid="hirofumiwakasugi" creationdate="20151001T015417Z">
        <seg>トップレベルで宣言されたマクロはどこからでもアクセス可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to always use `--release` for production-ready executables and when performing benchmarks.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072118Z" creationid="hirofumiwakasugi" creationdate="20150901T072118Z">
        <seg>したがって、プロダクションでの利用やベンチマークを測定するような場合には、必ず `--release` をつけるようにしてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to install [all the required libraries](https://github.com/manastech/crystal/wiki/All-required-libraries).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060736Z" creationid="hirofumiwakasugi" creationdate="20150831T060736Z">
        <seg>ただし、 [「すべての必要なライブラリ」](https://github.com/manastech/crystal/wiki/All-required-libraries)がインストールされている必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many projects use a custom &lt;g2&gt;spec helper&lt;/g2&gt; which organizes these includes.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T125129Z" creationid="akiji" creationdate="20200505T125129Z">
        <seg>多くのプロジェクトでは、 これらのインクルードを取りまとめるカスタムの&lt;g2&gt;spec ヘルパ&lt;/g2&gt;を使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Many projects use a custom spec helper file, usually named &lt;g1&gt;spec/spec_helper.cr&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200521T001035Z" creationid="akiji" creationdate="20200518T071950Z">
        <seg>多くのプロジェクトでは、（通常&lt;g1&gt;spec/spec_helper.cr&lt;/g1&gt;という名前の）カスタムされたspecヘルパファイルを使用しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marking a class as abstract will also prevent us from creating an instance of it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035618Z" creationid="hirofumiwakasugi" creationdate="20150910T035546Z">
        <seg>abstract クラスとすることで、そのクラスを直接インスタンス化するのを避けることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or [lib fun](c_bindings/fun.html) as potentially raising an exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073519Z" creationid="hirofumiwakasugi" creationdate="20150919T073510Z">
        <seg>メソッド、および [lib fun](c_bindings/fun.html) が例外を発生させる可能性があることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks a method or [lib fun](c_bindings/fun.html) as returning twice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073513Z" creationid="hirofumiwakasugi" creationdate="20150919T073359Z">
        <seg>メソッド、および [lib fun](c_bindings/fun.html) が2回リターンすることを指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Marks an [enum](enum.html) as a "flags enum", which changes the behaviour of some of its methods, like `to_s`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074833Z" creationid="hirofumiwakasugi" creationdate="20150919T074833Z">
        <seg>[Enum](enum.html) を「Flags Enum」とします。これによって、`to_s` などのいくつかのメソッドの挙動が変更されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Maximum Value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182034Z" creationid="makenowjust" creationdate="20200419T182034Z">
        <seg>最大値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Meet all</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222530Z" creationid="makenowjust" creationdate="20200413T222530Z">
        <seg>一覧はこちら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method calls</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082209Z" creationid="makenowjust" creationdate="20200424T082209Z">
        <seg>メソッド呼び出し</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Method names begin with a lowercase letter and, as a convention, only use lowercase letters, underscores and numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122532Z" creationid="hirofumiwakasugi" creationdate="20150904T122532Z">
        <seg>メソッド名の先頭は小文字である必要があります。また、メソッド名には使うのは小文字とアンダースコア、そして数値のみとすることが慣習的です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods are public by default: the compiler will always let you invoke them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040710Z" creationid="hirofumiwakasugi" creationdate="20150909T032000Z">
        <seg>メソッドのデフォルトの可視性は public になっており、どこからでも実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods can accept a block of code that is executed
with the `yield` keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013249Z" creationid="hirofumiwakasugi" creationdate="20150916T013214Z">
        <seg>メソッドはコードブロックをとることができ、そのブロックは `yield` キーワードによって実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods can be marked as `private` or `protected`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032415Z" creationid="hirofumiwakasugi" creationdate="20150909T032415Z">
        <seg>メソッドには `private` または `protected` を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods on integers, floats and chars are provided for these convertions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022312Z" creationid="hirofumiwakasugi" creationdate="20151009T022301Z">
        <seg>整数や浮動小数点数、そして文字にはこれらの変換のためのメソッドが提供されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Methods overload by several criteria:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071245Z" creationid="hirofumiwakasugi" creationdate="20150906T071206Z">
        <seg>メソッドがオーバーロードされるための条件は次の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Minimum Value</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182026Z" creationid="makenowjust" creationdate="20200419T182026Z">
        <seg>最小値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modifiers</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041506Z" creationid="makenowjust" creationdate="20200421T041506Z">
        <seg>修飾子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Modules serve two purposes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150909Z" creationid="hirofumiwakasugi" creationdate="20150911T130338Z">
        <seg>モジュールは以下の2つの役割のためにあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moo.new # undefined method 'new' for Moo:Class
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150708Z" creationid="hirofumiwakasugi" creationdate="20150911T150708Z">
        <seg>Moo.new # undefined method 'new' for Moo:Class
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More articles</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222631Z" creationid="makenowjust" creationdate="20200413T222631Z">
        <seg>さらに記事を見る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More information about statically linking &lt;g1&gt;can be found on the wiki&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152900Z" creationid="makenowjust" creationdate="20200419T152900Z">
        <seg>静的リンクについてのより詳細な情報は&lt;g1&gt;Wikiを参照&lt;/g1&gt;してください (英語)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal build --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155604Z" creationid="makenowjust" creationdate="20200419T155604Z">
        <seg>その他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal build --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt; で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal eval --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165909Z" creationid="makenowjust" creationdate="20200422T165745Z">
        <seg>lgstその他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal eval --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt;で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More options are described in the integrated help: &lt;g1&gt;crystal run --help&lt;/g1&gt; or man page &lt;g2&gt;man crystal&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155636Z" creationid="makenowjust" creationdate="20200419T155000Z">
        <seg>その他のオプションは統合されたヘルプにて説明されています。&lt;g1&gt;crystal run --help&lt;/g1&gt;を使うか、&lt;g2&gt;man crystal&lt;/g2&gt;で man ページを見てください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More release notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222713Z" creationid="makenowjust" creationdate="20200413T222713Z">
        <seg>さらにリリースノートを見る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More than one type argument is allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024500Z" creationid="hirofumiwakasugi" creationdate="20151009T024500Z">
        <seg>型引数は複数設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>More then one type arguments are allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065701Z" creationid="hirofumiwakasugi" creationdate="20150912T065618Z">
        <seg>型引数は複数設定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Moreover, and to keep the language clean, Crystal has built-in type inference, so most type annotations are unneeded.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211227Z" creationid="makenowjust" creationdate="20200413T211227Z">
        <seg>さらに、Crystal は型推論も備えています。ほとんどの場合、型注釈は必要ありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiline strings</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194151Z" creationid="makenowjust" creationdate="20200419T194151Z">
        <seg>複数行の文字列</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple `rescue` clauses can be specified:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012443Z" creationid="hirofumiwakasugi" creationdate="20150907T012443Z">
        <seg>複数の `rescue` 節を設定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175158Z" creationid="makenowjust" creationdate="20200422T175158Z">
        <seg>多重代入</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment is also available to methods that end with &lt;g1&gt;=&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175618Z" creationid="makenowjust" creationdate="20200422T175618Z">
        <seg>多重代入は名前が&lt;g1&gt;=&lt;/g1&gt;で終わるメソッドに対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple assignment is also available to methods that end with `=`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060243Z" creationid="hirofumiwakasugi" creationdate="20150902T060243Z">
        <seg>多重代入は、メソッド名が `=` で終わるメソッドに対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Multiple tags can be specified by giving an &lt;g1&gt;&lt;g2&gt;Enumerable&lt;/g2&gt;&lt;/g1&gt;, such as &lt;g3&gt;&lt;g4&gt;Array&lt;/g4&gt;&lt;/g3&gt; or &lt;g5&gt;&lt;g6&gt;Set&lt;/g6&gt;&lt;/g5&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T102334Z" creationid="akiji" creationdate="20200516T102334Z">
        <seg>&lt;g3&gt;&lt;g4&gt;Array&lt;/g4&gt;&lt;/g3&gt;や&lt;g5&gt;&lt;g6&gt;Set&lt;/g6&gt;&lt;/g5&gt;といった&lt;g1&gt;&lt;g2&gt;Enumerable&lt;/g2&gt;&lt;/g1&gt;型を使用して、複数のタグを指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyBox(Int32).new(1)       # OK
MyBox(Int32).new("hello") # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063746Z" creationid="hirofumiwakasugi" creationdate="20150912T063746Z">
        <seg>MyBox(Int32).new(1)       # OK
MyBox(Int32).new("hello") # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyHash(String, String | Int32){"foo" =&gt; "bar"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180600Z" creationid="makenowjust" creationdate="20200420T180600Z">
        <seg>MyHash(String, String | Int32){"foo" =&gt; "bar"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>MyHash{"foo" =&gt; 1, "bar" =&gt; "baz"}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180534Z" creationid="makenowjust" creationdate="20200420T180534Z">
        <seg>MyHash{"foo" =&gt; 1, "bar" =&gt; "baz"}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214455Z" creationid="makenowjust" creationdate="20200412T214455Z">
        <seg>NOTE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NOTE: When running interactively, stdin can usually be closed by typing the end of transmission character (&lt;g1&gt;Ctrl+D&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160234Z" creationid="makenowjust" creationdate="20200419T160234Z">
        <seg>注意: 対話的に実行したい場合、一般的には&lt;g1&gt;Ctrl+D&lt;/g1&gt;を入力することで標準入力を閉じることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>NamedTuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165920Z" creationid="makenowjust" creationdate="20200422T165920Z">
        <seg>名前付きタプル (NamedTuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Naming</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T202836Z" creationid="makenowjust" creationdate="20200412T202836Z">
        <seg>命名</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next follows the full list of operators with their usual meaning.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025303Z" creationid="hirofumiwakasugi" creationdate="20150909T025303Z">
        <seg>これから、すべての演算子を、その一般的な用途とあわせて紹介します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000703Z" creationid="makenowjust" creationdate="20200414T000703Z">
        <seg>Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No language is 100% safe: some parts will inevitably be low-level, interface with the operating system and involve pointer manipulation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T013343Z" creationid="hirofumiwakasugi" creationdate="20151009T012743Z">
        <seg>100% 安全な言語というのは存在しません。ローレベルな処理や、OS のインターフェース、そしてポインタの操作をどこかで必ず含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No runtime checks are performed in these cases because, again, pointers are involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T022153Z" creationid="hirofumiwakasugi" creationdate="20150930T020307Z">
        <seg>この場合も、ポインタが絡む処理になるためランタイムのチェックは行われません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>No, it’s not really magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174146Z" creationid="makenowjust" creationdate="20200413T172828Z">
        <seg>いえいえ、実のところ魔法ではないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not all of these files are required for every project, and some might need more customization, but &lt;g1&gt;crystal init&lt;/g1&gt; creates a good default environment for developing Crystal applications and libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153841Z" creationid="makenowjust" creationdate="20200419T153841Z">
        <seg>すべてのファイルがあらゆるプロジェクトで必要になるわけではなく、カスタマイズが必要に感じる場合もあるでしょう。しかし、&lt;g1&gt;crystal init&lt;/g1&gt;は Crystal のlアプリケーションやライブラリの開発に十分なデフォルトの環境を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that &lt;g2&gt;||&lt;/g2&gt; and &lt;g3&gt;&amp;&amp;&lt;/g3&gt; use the &lt;g4&gt;[]?&lt;/g4&gt; method to check for key presence.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174831Z" creationid="makenowjust" creationdate="20200422T174831Z">
        <seg>このとき &lt;g2&gt;||&lt;/g2&gt; と &lt;g3&gt;&amp;&amp;&lt;/g3&gt; は、 &lt;g4&gt;[]?&lt;/g4&gt; メソッドをキーの存在のチェックに使うことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `:foo` was the result of the interpolation, because that's what was passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021212Z" creationid="hirofumiwakasugi" creationdate="20151001T021013Z">
        <seg>マクロに渡されたものがそのまま埋め込まれるので、結果は `:foo` となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `===` is used for comparing an expression against a `case`'s value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023748Z" creationid="hirofumiwakasugi" creationdate="20150903T023738Z">
        <seg>`case` において、対象の値と条件式は `===` を使って比較されることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `@type` is always the *instance* type, even when the macro is invoked in a class method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041433Z" creationid="hirofumiwakasugi" creationdate="20151001T041433Z">
        <seg>`@type` は常に (もしクラスメソッドの中で実行されたとしても) 「インスタンス」の型になることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `private` methods are visible by subclasses:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032832Z" creationid="hirofumiwakasugi" creationdate="20150909T032832Z">
        <seg>`private` メソッドがサブクラスからも実行可能であることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `self` always represents a match against an instance type, even in class methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025130Z" creationid="hirofumiwakasugi" creationdate="20150908T025037Z">
        <seg>注意点として、それがもしクラスメソッドの中であったとしても、`self` は常にインスタンスの型に対してのチェックとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that `||` and `&amp;&amp;` use the `[]?` method to check for key prescence.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055045Z" creationid="hirofumiwakasugi" creationdate="20150902T055045Z">
        <seg>このとき、`||` と `&amp;&amp;` は、キーの存在チェックのために `[]?` メソッドを使うことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that because expressions are assigned to temporary variables it is possible to exchange variables’ contents in a single line:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055737Z" creationid="hirofumiwakasugi" creationdate="20150902T055732Z">
        <seg>また、式は一時的な変数に代入される仕組みになっているため、次のように1行で変数の値を交換することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if a variable is declared inside one of the branches but not in the other one, at the end of the &lt;g1&gt;if&lt;/g1&gt; it will also contain the &lt;g2&gt;Nil&lt;/g2&gt; type.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074913Z" creationid="makenowjust" creationdate="20200424T074615Z">
        <seg>もし一方の節である変数が宣言されて、もう一方ではされなかったとき、&lt;g1&gt;if&lt;/g1&gt;の後でその変数は&lt;g2&gt;Nil&lt;/g2&gt;型を持つこととに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if a variable is declared inside one of the branches but not in the other one, at the end of the `if` it will also contain the `Nil` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025759Z" creationid="hirofumiwakasugi" creationdate="20150903T011416Z">
        <seg>もし、変数がある分岐節の中で宣言されて、条件に合致せずその宣言の式が評価されなかった場合も、`if` の後でその変数は `Nil` 型を持っていることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if the return type is not specified, nothing gets returned from the proc call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061941Z" creationid="hirofumiwakasugi" creationdate="20150918T061941Z">
        <seg>戻り値の型が指定されていないとき、proc の呼び出しは何も返さないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that if we had defined `add` without type restrictions, we would also have gotten a compile time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042849Z" creationid="hirofumiwakasugi" creationdate="20150907T042849Z">
        <seg>ただし、`add` に型制約をしていなかった場合でも、このコードはコンパイルエラーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example `T` becomes `Int32` because `Foo.new(1)` makes `U` become `Int32`, which in turn makes `T` become `Int32` via the inclusion of the generic module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061551Z" creationid="hirofumiwakasugi" creationdate="20150924T061551Z">
        <seg>上記で `T` は `Int32` となります。これは、`Foo.new(1)` によって `U` が `Int32` となり、そして、ジェネリックなモジュールをインクルードすることで `T` が `Int32` となるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example trailing and leading spaces, as well as newlines,
end up in the resulting string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194223Z" creationid="hirofumiwakasugi" creationdate="20150901T081345Z">
        <seg>上の例では、先頭と末尾の空白、および改行が結果の文字列にも入っていることに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the above example you can't use `x`'s name, as it doesn't have a default value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113750Z" creationid="hirofumiwakasugi" creationdate="20150906T113435Z">
        <seg>上記において、`x` はデフォルト値を持たないため、その名前を指定することができないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the case of macro defs you need to specify the return type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030524Z" creationid="hirofumiwakasugi" creationdate="20151002T012151Z">
        <seg>マクロメソッド (macro def) では、返り値の型を指定する必要があることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that in the case of the method that yields, the compiler figured this out because there's a `yield` expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072041Z" creationid="hirofumiwakasugi" creationdate="20150906T071909Z">
        <seg>コンパイラは、`yield` が含まれていることを検知して、そのメソッドがブロックをとるメソッドであることを判断します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that literal denoted by &lt;g1&gt;%w&lt;/g1&gt; does not apply interpolation nor escapes expect spaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194010Z" creationid="makenowjust" creationdate="20200419T194010Z">
        <seg>&lt;g1&gt;%w&lt;/g1&gt;で記述されたリテラルはスペースを除くエスケープと文字列の補間を受け付けないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that special characters of the PCRE syntax need to be escaped if they are intended as literal characters.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041251Z" creationid="makenowjust" creationdate="20200421T041251Z">
        <seg>PCRE の構文上意味のある文字を通常の文字として扱いたい場合もエスケープが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the first 2 sends are executed without switching to another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151138Z" creationid="akiji" creationdate="20200429T144125Z">
        <seg>最初の２回のsendが実行された際に、他のファイバに処理が切り替わらなかったことに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the identity expectation uses &lt;g5&gt;.same?&lt;/g5&gt; which tests if &lt;g6&gt;&lt;g7&gt;#object_id&lt;/g7&gt;&lt;/g6&gt; are identical.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T135504Z" creationid="akiji" creationdate="20200505T135504Z">
        <seg>同一性をテストするExpectationは&lt;g6&gt;&lt;g7&gt;#object_id&lt;/g7&gt;&lt;/g6&gt;が同一かどうかをテストする&lt;g5&gt;.same?&lt;/g5&gt;メソッドを使用することに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that the node is pasted as-is.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021107Z" creationid="hirofumiwakasugi" creationdate="20151001T020805Z">
        <seg>ノードは「そのまま」貼り付けされることに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that there are no implicit conversions (except `to_unsafe`, explained later) when invoking a C function: you must pass the exact type that is expected.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041249Z" creationid="hirofumiwakasugi" creationdate="20151005T041031Z">
        <seg>C の関数を実行するときに (後に説明する `to_unsafe` を除いては) 暗黙的な変換が行われないことに注意してください。つまり、期待される型を正確に渡さなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that virtual types only apply to classes, never to structs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034107Z" creationid="hirofumiwakasugi" creationdate="20150910T033939Z">
        <seg>virtual 型が適用されるのはクラスのみで、構造体には適用されないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that we create a `Person` with `new` but we defined the initialization in an `initialize` method, not in a `new` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060003Z" creationid="hirofumiwakasugi" creationdate="20150904T055943Z">
        <seg>ただ、ちょっと不思議に思わないでしょうか？`new` を使って `Person` のインスタンスを生成していますが、先ほど初期化処理を実装したのは `initialize` メソッドで、`new` メソッドではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that when the program executes a &lt;g1&gt;receive&lt;/g1&gt;, that fiber blocks and execution continues with the other fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T104633Z" creationid="akiji" creationdate="20200429T134829Z">
        <seg>プログラムがいつ&lt;g1&gt;receive&lt;/g1&gt;を実行したか、つまりいつそのファイバをブロックして他のファイバに実行が切り替わったかに注目してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you can use any type as an &lt;g1&gt;is_a?&lt;/g1&gt; test, like abstract classes and modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083048Z" creationid="makenowjust" creationdate="20200424T083048Z">
        <seg>&lt;g1&gt;is_a?&lt;/g1&gt;によるチェックは、モジュールや抽象クラスなど、いかなる型でもチェックできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you can use any type as an `is_a?` test, like abstract classes and modules.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022147Z" creationid="hirofumiwakasugi" creationdate="20150903T022147Z">
        <seg>`is_a?` によるチェックはどんな型に対しても行うことができます。例えば抽象クラスやモジュールでも有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note that you still have to initialize the instance variables, either with a catch-all initializer or within an `initialize` method: there are no "default" values for types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T100511Z" creationid="hirofumiwakasugi" creationdate="20150905T100129Z">
        <seg>ただ、型に対する「デフォルト」の値というものは存在しないので、この場合においても、catch-all initializer か `initialize` メソッドでインスタンス変数の初期化を行う必要があることを覚えておいてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that fibers don't get executed right away.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070334Z" creationid="akiji" creationdate="20200428T074612Z">
        <seg>ただし、ファイバが（生成後）即座に実行されるわけではないことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that functions passed to C can't form closures.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024607Z" creationid="hirofumiwakasugi" creationdate="20151008T024607Z">
        <seg>ただ、C に渡される関数はクロージャにはなれません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Note, however, that this is not avaialble for every method out there, as exceptions are still the preferred way because they don't pollute the code with error handling logic.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024637Z" creationid="hirofumiwakasugi" creationdate="20150907T024539Z">
        <seg>ただ、すべてのメソッドにこの方法が用意されているわけではありません。また、エラーハンドリングのロジックが混ざることよってコードが汚れてしまうのを避けるという意味でも、例外処理というのは好ましい方法であるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now `Int32` and `MyInt` are interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023911Z" creationid="hirofumiwakasugi" creationdate="20151008T023911Z">
        <seg>これで、`Int32` と `MyInt` は相互に交換可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now imagine using this string as the banner for our All My CLI application, it's easy if you try:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183922Z" creationid="makenowjust" creationdate="20200413T183804Z">
        <seg>イマジン (想像) してみてください、All My CLI アプリケーションのバナーにこの文字列を使うことを。ほら、簡単でしょう？ (it's easy if you try?)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now it works because we are creating a &lt;g1&gt;Proc&lt;/g1&gt; and we invoke it passing &lt;g2&gt;i&lt;/g2&gt;, so the value gets copied and now the spawned fiber receives a copy.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103403Z" creationid="akiji" creationdate="20200428T080507Z">
        <seg>今度は正しく動作しました。なぜかと言うと、&lt;g1&gt;Proc&lt;/g1&gt;を生成してそれに&lt;g2&gt;i&lt;/g2&gt;を渡しているからです。こうすることで、&lt;g2&gt;i&lt;/g2&gt;の値がコピーされ、生成されたファイバが使用するのはそのコピーになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now the code compiles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035404Z" creationid="hirofumiwakasugi" creationdate="20150910T035315Z">
        <seg>これでコードのコンパイルが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now we can create people like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055717Z" creationid="hirofumiwakasugi" creationdate="20150904T055631Z">
        <seg>これで、以下のようにしてインスタンスを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, let's run our application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174108Z" creationid="makenowjust" creationdate="20200413T174108Z">
        <seg>さて、それではアプリケーションを実際に実行してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, we will focus on the second main topic: our application’s output.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182859Z" creationid="makenowjust" creationdate="20200413T182859Z">
        <seg>ここからは、アプリケーションの出力という、2つ目のトピックに取りかかっていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Null reference checks</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211324Z" creationid="makenowjust" creationdate="20200413T211324Z">
        <seg>Null 参照チェック</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OK
...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164546Z" creationid="makenowjust" creationdate="20200413T164546Z">
        <seg>OK
...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>OPTIMIZE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214457Z" creationid="makenowjust" creationdate="20200412T214457Z">
        <seg>OPTIMIZE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a &lt;g1&gt;0o&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182626Z" creationid="makenowjust" creationdate="20200419T182612Z">
        <seg>先頭に&lt;g1&gt;0o&lt;/g1&gt;をつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a `0o`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025717Z" creationid="hirofumiwakasugi" creationdate="20151009T025717Z">
        <seg>先頭に `0o` をつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Octal numbers start with a zero:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052538Z" creationid="hirofumiwakasugi" creationdate="20150901T052506Z">
        <seg>先頭にゼロをつけると8進数になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course the above program can be written without &lt;g1&gt;spawn&lt;/g1&gt; at all, just with a loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075933Z" creationid="akiji" creationdate="20200428T075933Z">
        <seg>上のプログラムは単純にループを行なっているだけですので、もちろん&lt;g1&gt;spawn&lt;/g1&gt;を使わずに書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, reassigning a variable inside the &lt;g1&gt;then&lt;/g1&gt; branch makes that variable have a new type based on the expression assigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081645Z" creationid="makenowjust" creationdate="20200424T081645Z">
        <seg>もちろん、&lt;g1&gt;then&lt;/g1&gt;節の中で変数へ再代入を行なった場合は、その代入された式に応じて変数の型が変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Of course, reassigning a variable inside the `then` branch makes that variable have a new type based on the expression assigned.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015212Z" creationid="hirofumiwakasugi" creationdate="20150903T015212Z">
        <seg>もちろん、`then` の分岐内で変数へ再代入を行った場合は、その代入された式に応じて変数の型は変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Oh no!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175931Z" creationid="makenowjust" creationdate="20200413T175931Z">
        <seg>なんてことでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Omitting &lt;g2&gt;path&lt;/g2&gt; is equal to
specifying the current working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165942Z" creationid="makenowjust" creationdate="20200419T165942Z">
        <seg>&lt;g2&gt;path&lt;/g2&gt;が指定されなかった場合、現在のデイレクトリを指定したものとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On a 64-bit machine it lets us spawn millions and millions of fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103041Z" creationid="akiji" creationdate="20200428T062651Z">
        <seg>64ビットマシンでは数百万ものファイバを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On some linux 64 bits it will say "Linux x86_64".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045052Z" creationid="hirofumiwakasugi" creationdate="20150909T045052Z">
        <seg>64ビットの Linux であればその結果は "Linux x86_64" となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>On the other hand, we have &lt;g1&gt;NCurses&lt;/g1&gt;(New Curses).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190403Z" creationid="makenowjust" creationdate="20200413T190403Z">
        <seg>続いて、&lt;g1&gt;NCurses&lt;/g1&gt;(New Curses) の紹介です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once &lt;g1&gt;installed&lt;/g1&gt;, the Crystal compiler should be available as &lt;g2&gt;crystal&lt;/g2&gt; command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150151Z" creationid="makenowjust" creationdate="20200419T150151Z">
        <seg>&lt;g1&gt;インストール&lt;/g1&gt;が済んでいれば、&lt;g2&gt;crystal&lt;/g2&gt;というコマンドでコンパイラを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once a file is required, the compiler remembers its absolute path and later &lt;g1&gt;require&lt;/g1&gt;s of that same file will be ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084502Z" creationid="makenowjust" creationdate="20200427T084502Z">
        <seg>ファイルが一度&lt;g1&gt;require&lt;/g1&gt;されると、 コンパイラはその絶対パスを記憶し、以降ではそのファイルは読み込まれなくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once a file is required, the compiler remembers its absolute path and later `require`s of that same file will be ignored.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T144740Z" creationid="hirofumiwakasugi" creationdate="20150905T144641Z">
        <seg>ファイルが `require` されると、コンパイラはその絶対パスを記憶し、以降ではそのファイルに対する `require` は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once macros generate code, they are parsed with a regular Crystal parser where local variables in the context of the macro invocations are assumed to be defined.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015554Z" creationid="hirofumiwakasugi" creationdate="20151002T015339Z">
        <seg>マクロが生成したコードは通常の Crystal パーサーでパースされます。そのとき、マクロ呼び出しのコンテキスト内のローカル変数は定義されているものとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once the refactor is done, we could start testing the logic and including the file with the logic in the testing files we need.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185657Z" creationid="makenowjust" creationdate="20200413T185520Z">
        <seg>このリファクタリングが済めば、あるロジックのテストに必要なコードを含むファイルだけをテストのコードに取り込んで、ロジックのテストをはじめることができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you [install](../installation/README.md) the compiler you will have a `crystal` binary at your disposal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071919Z" creationid="hirofumiwakasugi" creationdate="20150901T071919Z">
        <seg>[インストール](../installation/README.md)が済んでいれば、`crystal` というバイナリを利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you bind it, the function is available inside the `C` type as if it was a class method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143847Z" creationid="hirofumiwakasugi" creationdate="20151003T143811Z">
        <seg>バインディングを設定したら、その関数は `C` 型でクラスメソッドのように利用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you do this the executable will be available in that target system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045739Z" creationid="hirofumiwakasugi" creationdate="20150909T045659Z">
        <seg>そうすると、対象のシステム上に実行ファイルが作られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you install the compiler using one of the following methods, make sure to read [Using the compiler](../using_the_compiler/README.md) to learn how to efficiently use it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T085710Z" creationid="hirofumiwakasugi" creationdate="20150831T053948Z">
        <seg>Crystal のコンパイラは以下のいずれかの方法でインストールすることができます。インストール後は、[「コンパイラを使用する」](../using_the_compiler/README.md)を読んで、コンパイラの活用方法について知りましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>One</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One can assign any meaning to the operators, but the convention is to follow the above ones to avoid cryptic code, or code that behaves in an unexpected way.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031940Z" creationid="hirofumiwakasugi" creationdate="20150909T031255Z">
        <seg>実際には、演算子に対して、どのような内容の処理であっても自由に定義することが可能です。しかし、上記した演算子それぞれの意味にしたがって定義することが慣習となっています。これは、複雑で読みづらいコードや、コードが想定外の動作をしてしまうことを避ける意味で重要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One curly brace can contain multiple unicode characters each separated by a whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192147Z" creationid="makenowjust" creationdate="20200419T192147Z">
        <seg>1つのひげ括弧の中にスペースで区切って複数のユニコード文字が記述できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One way to solve it is to do a &lt;g1&gt;sleep&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075009Z" creationid="akiji" creationdate="20200428T075009Z">
        <seg>この問題を解決留守方法の一つは、&lt;g1&gt;sleep&lt;/g1&gt;を使うことです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only `Exception` instances or subclasses can be raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013043Z" creationid="hirofumiwakasugi" creationdate="20150907T011513Z">
        <seg>そして、`raise` の対象に指定することができるのは `Exception` のインスタンス、もしくはそのサブクラスのみに限られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only integer types are allowed as the underlying type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024654Z" creationid="hirofumiwakasugi" creationdate="20150914T024654Z">
        <seg>ただし、整数型のみしか指定することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only one-line comments are supported for now.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073236Z" creationid="hirofumiwakasugi" creationdate="20150901T050651Z">
        <seg>現在のところ、1行 (one-line) のコメントのみがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Only single letter names are allowed as names of type arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070022Z" creationid="hirofumiwakasugi" creationdate="20150912T065827Z">
        <seg>型引数は1文字の名前のみ設定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Operators like `+` and `-` are regular method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025139Z" creationid="hirofumiwakasugi" creationdate="20150905T052334Z">
        <seg>`+` や `-` などの演算子は、実は普通のメソッド呼び出しとなっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163944Z" creationid="makenowjust" creationdate="20200413T163944Z">
        <seg>オプション</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Options:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>Options:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153043Z" creationid="hirofumiwakasugi" creationdate="20160115T153043Z">
        <seg>または以下のように書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or use &lt;g1&gt;loop&lt;/g1&gt;, found in the standard library:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095208Z" creationid="makenowjust" creationdate="20200424T095208Z">
        <seg>標準ライブラリの&lt;g1&gt;loop&lt;/g1&gt;を利用しても同じことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or use `loop`, found in the standard library:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052206Z" creationid="hirofumiwakasugi" creationdate="20150905T052206Z">
        <seg>標準ライブラリの `loop` を利用しても同じことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or with a proc returned from a method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053740Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>もしくは、メソッドが返す proc の場合は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104703Z" creationid="hirofumiwakasugi" creationdate="20150901T080209Z">
        <seg>波カッコ (ブレース) を使うと、(0 から 10FFFF までの) 16進数を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or, combining the `&amp;` and `-&gt;` syntaxes:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025050Z" creationid="hirofumiwakasugi" creationdate="20150917T025050Z">
        <seg>`&amp;` と `-&gt;` のシンタックスを組み合わせることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013607Z" creationid="hirofumiwakasugi" creationdate="20150907T013436Z">
        <seg>または</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other forms</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090808Z" creationid="makenowjust" creationdate="20200427T090808Z">
        <seg>その他の形式</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other matchers</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T135858Z" creationid="akiji" creationdate="20200505T135858Z">
        <seg>その他の条件</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise a compile-time error is issued.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085242Z" creationid="makenowjust" creationdate="20200427T085242Z">
        <seg>それ以外の場合はコンパイルエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it has the value of the left hand side.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052557Z" creationid="hirofumiwakasugi" creationdate="20150905T052521Z">
        <seg>そうでない場合は、結果は左辺の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it will be a union of all element types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173034Z" creationid="makenowjust" creationdate="20200420T173034Z">
        <seg>そうでなければ、すべての要素の型のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise it will be a union of all key types or value types respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180735Z" creationid="makenowjust" creationdate="20200420T175604Z">
        <seg>そうでなければ、すべてのキーの型のユニオン型ないし値の型のユニオン型となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise the compiler will populate them with default values.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170107Z" creationid="makenowjust" creationdate="20200419T170107Z">
        <seg>指定されていなければ、コンパイラはデフォルト値を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise the example has &lt;g4&gt;failed&lt;/g4&gt; and other code in this block will not be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233143Z" creationid="akiji" creationdate="20200505T133144Z">
        <seg>そうでない場合、その実行例はその時点で&lt;g4&gt;failed&lt;/g4&gt;となり、同じブロックに記述されたそれ以降のコードは実行されません。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, it
evaluates the &lt;g3&gt;else&lt;/g3&gt; branch if present.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074646Z" creationid="makenowjust" creationdate="20200424T074220Z">
        <seg>偽の場合、&lt;g3&gt;else&lt;/g3&gt;節があればそちらを評価します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise, it receives the arguments you pass to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123641Z" creationid="hirofumiwakasugi" creationdate="20150904T123538Z">
        <seg>上記に当てはまらない場合には、指定した引数が渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Otherwise:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024716Z" creationid="hirofumiwakasugi" creationdate="20150917T024643Z">
        <seg>そうしなかった場合は以下のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Output</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182807Z" creationid="makenowjust" creationdate="20200413T182807Z">
        <seg>出力</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Output:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T141904Z" creationid="akiji" creationdate="20200429T141904Z">
        <seg>出力はこうなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Overview</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170040Z" creationid="makenowjust" creationdate="20200413T170040Z">
        <seg>概要</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PCRE::INFO_CAPTURECOUNT #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022115Z" creationid="hirofumiwakasugi" creationdate="20151008T022115Z">
        <seg>PCRE::INFO_CAPTURECOUNT #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>PI #=&gt; 3.14
Earth::RADIUS #=&gt; 6_371_000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055325Z" creationid="hirofumiwakasugi" creationdate="20150913T055325Z">
        <seg>PI #=&gt; 3.14
Earth::RADIUS #=&gt; 6_371_000
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parallelism would be to stir fry onions with one hand while with the other one you chop a tomato.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T053745Z" creationid="akiji" creationdate="20200428T053745Z">
        <seg>並列処理（parallelism）というのは、片手で玉ねぎの入ったフライパンを振りながらもう片方の手でトマトを切るようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameter names should be &lt;g1&gt;italicized&lt;/g1&gt; (surrounded with single asterisks &lt;g2&gt;*&lt;/g2&gt; or underscores &lt;g3&gt;_&lt;/g3&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215002Z" creationid="makenowjust" creationdate="20200412T211936Z">
        <seg>パラメータ名は&lt;g1&gt;イタリック体&lt;/g1&gt;とします。1つのアスタリスク (&lt;g2&gt;*&lt;/g2&gt;) もしくはアンダースコア (&lt;g3&gt;_&lt;/g3&gt;)  で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parameterized options</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175004Z" creationid="makenowjust" creationdate="20200413T175004Z">
        <seg>オプションのパラメーター</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Parentheses in method invocations are optional:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021616Z" creationid="hirofumiwakasugi" creationdate="20150904T021616Z">
        <seg>メソッド実行時のカッコは省略することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent Array Literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173311Z" creationid="makenowjust" creationdate="20200420T173311Z">
        <seg>パーセント配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent regex literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041525Z" creationid="makenowjust" creationdate="20200421T041525Z">
        <seg>パーセント正規表現リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent string array literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193635Z" creationid="makenowjust" creationdate="20200419T193635Z">
        <seg>パーセント文字列配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent string literals</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192901Z" creationid="makenowjust" creationdate="20200419T192901Z">
        <seg>パーセント文字列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Percent symbol array literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171722Z" creationid="makenowjust" creationdate="20200420T171722Z">
        <seg>パーセントシンボル配列リテラル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Person.compare(john, peter) # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025143Z" creationid="hirofumiwakasugi" creationdate="20150908T025143Z">
        <seg>Person.compare(john, peter) # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Person.say "hello" # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040626Z" creationid="hirofumiwakasugi" creationdate="20150909T040626Z">
        <seg>Person.say "hello" # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Point.new 1, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120623Z" creationid="hirofumiwakasugi" creationdate="20150906T120623Z">
        <seg>Point.new 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Prints the version of the shard.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181300Z" creationid="makenowjust" creationdate="20200419T181300Z">
        <seg>shard コマンドのバージョンを表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Private and protected methods are always hidden.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144011Z" creationid="hirofumiwakasugi" creationdate="20151010T143918Z">
        <seg>private や protected のメソッドに関しては、はじめから常に隠されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170959Z" creationid="makenowjust" creationdate="20200422T170959Z">
        <seg>Proc</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171401Z" creationid="makenowjust" creationdate="20200422T171401Z">
        <seg>Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Programming Command Line Interface applications (CLI applications) is one of the most entertaining tasks a developer may do.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163517Z" creationid="makenowjust" creationdate="20200413T163517Z">
        <seg>コマンドラインインターフェースアプリケーション (CLI アプリケーション) の開発は、プログラマのタスクの中で最も愉快なものの1つです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>RADIUS = 6_371_000
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055324Z" creationid="hirofumiwakasugi" creationdate="20150913T055324Z">
        <seg>RADIUS = 6_371_000
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Raising an exception involves allocating memory, and executing an exception handler is generally slow.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023548Z" creationid="hirofumiwakasugi" creationdate="20150907T023519Z">
        <seg>例外を発生させることはメモリの割り当てを伴うので、一般的に例外処理は遅くなる傾向があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Randomizing order of specs</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T065737Z" creationid="akiji" creationdate="20200518T065737Z">
        <seg>ランダムな順序でのspec実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Range</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T033744Z" creationid="makenowjust" creationdate="20200421T033744Z">
        <seg>範囲 (Range)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ranges with &lt;g1&gt;nil&lt;/g1&gt; as begin are called begin-less and &lt;g2&gt;nil&lt;/g2&gt; as end are called end-less ranges.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035630Z" creationid="makenowjust" creationdate="20200421T035630Z">
        <seg>左の値として&lt;g1&gt;nil&lt;/g1&gt;が与えられた範囲を begin-less 範囲、右の値として &lt;g2&gt;nil&lt;/g2&gt; が与えられた範囲を end-less 範囲と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read # 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114623Z" creationid="hirofumiwakasugi" creationdate="20150914T114623Z">
        <seg>Read # 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Crystal's concurrency model</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221405Z" creationid="makenowjust" creationdate="20200413T221405Z">
        <seg>Crystal の並列モデルについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Crystal's type system</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221050Z" creationid="makenowjust" creationdate="20200413T211317Z">
        <seg>Crystal の型システムについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about Shards in the repo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221930Z" creationid="makenowjust" creationdate="20200413T221930Z">
        <seg>Shards のリポジトリはこちら</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Read more about macros</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221044Z" creationid="makenowjust" creationdate="20200413T221044Z">
        <seg>マクロについて、より詳しく知る</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Reads and enforces locked versions and commits if a &lt;g1&gt;shard.lock&lt;/g1&gt; file is present.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180914Z" creationid="makenowjust" creationdate="20200419T180824Z">
        <seg>&lt;g1&gt;shard.lock&lt;/g1&gt;がある場合は、そこからロックされたバージョンとコミットを読み込んで強制します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024115Z" creationid="hirofumiwakasugi" creationdate="20150914T024115Z">
        <seg>Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Red         # 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024409Z" creationid="hirofumiwakasugi" creationdate="20150914T024409Z">
        <seg>Red         # 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [Generics](generics.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T041018Z" creationid="hirofumiwakasugi" creationdate="20150908T041018Z">
        <seg>詳しくは[ジェネリクス](generics.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type gammar](../type_grammar.html) for the notation used in fun types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024329Z" creationid="hirofumiwakasugi" creationdate="20151102T024329Z">
        <seg>fun 型 で利用できる型の指定方法については [型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type gammar](type_grammar.html) for the notation used in fun types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042344Z" creationid="hirofumiwakasugi" creationdate="20151005T042344Z">
        <seg>fun 型 で利用できる型の指定方法については [型文法](type_grammar.html) を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in alias types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024300Z" creationid="hirofumiwakasugi" creationdate="20151102T024300Z">
        <seg>alias の型を設定する際の記載方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in external variables types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024348Z" creationid="hirofumiwakasugi" creationdate="20151102T024348Z">
        <seg>外部の変数に使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in struct field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024336Z" creationid="hirofumiwakasugi" creationdate="20151102T024336Z">
        <seg>構造体のフィールドに使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](../type_grammar.html) for the notation used in union field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024342Z" creationid="hirofumiwakasugi" creationdate="20151102T024342Z">
        <seg>共用体のフィールドに使用可能な型の指定方法については[型文法](../type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in alias types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024102Z" creationid="hirofumiwakasugi" creationdate="20151008T024102Z">
        <seg>alias の型を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in callbacks and procs types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024818Z" creationid="hirofumiwakasugi" creationdate="20151008T024816Z">
        <seg>コールバックと Proc に使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in external variables types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053924Z" creationid="hirofumiwakasugi" creationdate="20151007T053920Z">
        <seg>外部の変数に使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in struct field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052002Z" creationid="hirofumiwakasugi" creationdate="20151007T052002Z">
        <seg>構造体のフィールドに使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022626Z" creationid="hirofumiwakasugi" creationdate="20150908T022338Z">
        <seg>型制約を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in typedef types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023629Z" creationid="hirofumiwakasugi" creationdate="20151008T023629Z">
        <seg>typedef の型を設定する際の記載方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type grammar](type_grammar.html) for the notation used in union field types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052432Z" creationid="hirofumiwakasugi" creationdate="20151007T052432Z">
        <seg>共用体のフィールドに使用可能な型の指定方法については[型文法](type_grammar.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Refer to the [type restrictions](type_restrictions.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011827Z" creationid="hirofumiwakasugi" creationdate="20151009T011827Z">
        <seg>詳しくは[型制約](type_restrictions.html)を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular Expressions</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040354Z" creationid="makenowjust" creationdate="20200421T040354Z">
        <seg>正規表現</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the &lt;g1&gt;Regex&lt;/g1&gt; class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040416Z" creationid="makenowjust" creationdate="20200421T040402Z">
        <seg>正規表現は&lt;g1&gt;Regex&lt;/g1&gt;クラスによって表現されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions are represented by the [Regex](http://crystal-lang.org/api/Regex.html) class, which is usually created with a literal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015736Z" creationid="hirofumiwakasugi" creationdate="20150902T015736Z">
        <seg>正規表現 (Regular Expression) を表すのは [Regex](http://crystal-lang.org/api/Regex.html) クラスです。そして、通常それは以下の正規表現リテラルによって作られます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular expressions support the same &lt;g1&gt;escape sequences as String literals&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T040734Z" creationid="makenowjust" creationdate="20200421T040624Z">
        <seg>正規表現では&lt;g1&gt;文字列リテラルと同様のエスケープシーケンス&lt;/g1&gt;をサポートしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Regular types and generics can be used:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010420Z" creationid="hirofumiwakasugi" creationdate="20151009T010417Z">
        <seg>一般的な型とジェネリクスは以下のように利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Release Notes</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222638Z" creationid="makenowjust" creationdate="20200413T222638Z">
        <seg>リリースノート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Release builds</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150611Z" creationid="makenowjust" creationdate="20200419T150611Z">
        <seg>リリースビルド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Removes unused dependencies from lib folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181102Z" creationid="makenowjust" creationdate="20200419T181102Z">
        <seg>使われていない依存関係をlibフォルダから削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Request for user input</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180643Z" creationid="makenowjust" creationdate="20200413T180643Z">
        <seg>ユーザーへの入力の要求</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Requiring files</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084510Z" creationid="makenowjust" creationdate="20200427T084510Z">
        <seg>ファイルの require</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resolves and installs dependencies into the &lt;g1&gt;lib&lt;/g1&gt; folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180537Z" creationid="makenowjust" creationdate="20200419T180537Z">
        <seg>依存関係を解決して、それらを&lt;g1&gt;lib&lt;/g1&gt;にインストールします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Resolves and updates all dependencies into the lib folder again, whatever the locked versions and commits in the &lt;g1&gt;shard.lock&lt;/g1&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181220Z" creationid="makenowjust" creationdate="20200419T181220Z">
        <seg>&lt;g1&gt;shard.lock&lt;/g1&gt;にロックされたバージョンやコミットがあるかどうかに関わらず、すべての依存関係を解決してlibフォルダの内容を再度更新します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now the code containing the logic of each of the applications always gets executed with the &lt;g1&gt;OptionParser&lt;/g1&gt;, i.e. there is no way to include that file without running the whole application.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185530Z" creationid="makenowjust" creationdate="20200413T185401Z">
        <seg>現時点ではアプリケーションの各ロジックは&lt;g1&gt;OptionParser&lt;/g1&gt;の内で実行されています。つまり、アプリケーション全体を実行することなしに、部分的にファイルを取り込むことができないのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, we can't do much with a person: create it with a name, ask for its name and for its age, which will always be zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122136Z" creationid="hirofumiwakasugi" creationdate="20150904T121927Z">
        <seg>さて、これで person に対して、「名前を付けてインスタンスを生成する」ことと「名前と年齢を尋ねる」ことができるようになりました。しかし、年齢はずっと0歳のままで変更できませんし、まだまだ機能は不十分です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Run &lt;g1&gt;crystal spec --options&lt;/g1&gt; for available options.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164127Z" creationid="makenowjust" creationdate="20200419T164127Z">
        <seg>&lt;g1&gt;crystal spec --options&lt;/g1&gt;で可能なオプションの一覧を見ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running &lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt; resolves and installs the specified dependencies.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173933Z" creationid="makenowjust" creationdate="20200419T173933Z">
        <seg>&lt;g1&gt;&lt;g2&gt;shards install&lt;/g2&gt;&lt;/g1&gt;を実行すると、指定された依存関係の解決とインストールが行なわれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running specs</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T102503Z" creationid="akiji" creationdate="20200516T102503Z">
        <seg>specの実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the above code will produce no output and exit immediately.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074641Z" creationid="akiji" creationdate="20200428T074641Z">
        <seg>上記コードは何も出力せず即座に終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the application with the &lt;g1&gt;-t&lt;/g1&gt; option will output:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174950Z" creationid="makenowjust" creationdate="20200413T174950Z">
        <seg>&lt;g1&gt;-t&lt;/g1&gt;をつけてこのアプリケーションを実行すると、次のように表示されるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Running the previous file:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211711Z" creationid="makenowjust" creationdate="20200413T211711Z">
        <seg>このファイルを実行すると、こんな結果になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SOME</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034041Z" creationid="makenowjust" creationdate="20200420T034041Z">
        <seg>SOME</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts ""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180426Z" creationid="makenowjust" creationdate="20200413T180426Z">
        <seg>STDERR.puts ""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts "ERROR: #{option_flag} is missing something."</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180425Z" creationid="makenowjust" creationdate="20200413T180425Z">
        <seg>STDERR.puts "ERROR: #{option_flag} is missing something."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts "ERROR: #{option_flag} is not a valid option."</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180432Z" creationid="makenowjust" creationdate="20200413T180432Z">
        <seg>STDERR.puts "ERROR: #{option_flag} is not a valid option."</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STDERR.puts parser</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180428Z" creationid="makenowjust" creationdate="20200413T180428Z">
        <seg>STDERR.puts parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063558Z" creationid="hirofumiwakasugi" creationdate="20160204T062354Z">
        <seg>STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING

&lt;&lt;-STRING # =&gt; "  Hello\n    world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033933Z" creationid="makenowjust" creationdate="20200420T033933Z">
        <seg>STRING

&lt;&lt;-STRING # =&gt; "  Hello\n    world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>STRING
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063603Z" creationid="hirofumiwakasugi" creationdate="20160204T062415Z">
        <seg>STRING
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sample code</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064125Z" creationid="akiji" creationdate="20200428T064125Z">
        <seg>サンプルコード</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sample values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000414Z" creationid="makenowjust" creationdate="20200414T000414Z">
        <seg>値のサンプル</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Second, `allocate` is a low-level class method that creates an uninitialized object of the given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033526Z" creationid="hirofumiwakasugi" creationdate="20150904T060528Z">
        <seg>次に `allocate` というメソッドについてです。これはローレベルなクラスメソッドで、与えられた型のオブジェクトを初期化されていない状態で作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Security concerns</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173004Z" creationid="makenowjust" creationdate="20200422T173004Z">
        <seg>セキュリティ上の懸念</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Serving book on http://localhost:4000</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164552Z" creationid="makenowjust" creationdate="20200413T164552Z">
        <seg>Serving book on http://localhost:4000</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Set(Int32){1, 2, 3}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174453Z" creationid="makenowjust" creationdate="20200420T174453Z">
        <seg>Set(Int32){1, 2, 3}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Several literals are available for creating many basic types in the language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080459Z" creationid="hirofumiwakasugi" creationdate="20150901T050812Z">
        <seg>Crystal には、数多くの基本的な型に対応したリテラルが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards commands</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174621Z" creationid="makenowjust" creationdate="20200419T174621Z">
        <seg>shards コマンド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Shards is usually distributed with Crystal itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173324Z" creationid="makenowjust" creationdate="20200419T173320Z">
        <seg>Shards 通常であれば Crystal 自身と共に配布されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Show all</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222912Z" creationid="makenowjust" creationdate="20200413T222912Z">
        <seg>すべて表示</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to &lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt;, &lt;g3&gt;next&lt;/g3&gt; can also take a parameter which will then be returned by &lt;g4&gt;yield&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100848Z" creationid="makenowjust" creationdate="20200424T100343Z">
        <seg>&lt;g1&gt;&lt;g2&gt;break&lt;/g2&gt;&lt;/g1&gt;同様、&lt;g3&gt;next&lt;/g3&gt;は引数を受けとることも可能で、その場合には&lt;g4&gt;yield&lt;/g4&gt;の戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to an &lt;g1&gt;if&lt;/g1&gt;, if a &lt;g2&gt;while&lt;/g2&gt;'s condition is a variable, the variable is guaranteed to not be &lt;g3&gt;nil&lt;/g3&gt; inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094859Z" creationid="makenowjust" creationdate="20200424T094859Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;のように、&lt;g2&gt;while&lt;/g2&gt;の条件式が変数であった場合、本体ではその変数は&lt;g3&gt;nil&lt;/g3&gt;ではないことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to an `if`, if a `while`'s condition is a variable, the variable is guaranteed to not be `nil` inside the body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052118Z" creationid="hirofumiwakasugi" creationdate="20150905T052118Z">
        <seg>`if` の場合と同様に、`while` の条件に変数が与えられている場合は、本体の中ではその変数が `nil` ではないことが保証されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to percent string literals, valid delimiters for &lt;g1&gt;%x&lt;/g1&gt; are parentheses &lt;g2&gt;()&lt;/g2&gt;, square brackets &lt;g3&gt;[]&lt;/g3&gt;, curly braces &lt;g4&gt;{}&lt;/g4&gt;, angles &lt;g5&gt;&lt;&gt;&lt;/g5&gt; and pipes &lt;g6&gt;||&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172733Z" creationid="makenowjust" creationdate="20200422T172733Z">
        <seg>パーセントリテラルの形式の場合、他のパーセントリテラルと同様に&lt;g1&gt;%x&lt;/g1&gt;では、括弧&lt;g2&gt;()&lt;/g2&gt;、角括弧&lt;g3&gt;[]&lt;/g3&gt;、ひげ括弧&lt;g4&gt;{}&lt;/g4&gt;、三角括弧&lt;g5&gt;&lt;&gt;&lt;/g5&gt;そしてパイプ&lt;g6&gt;||&lt;/g6&gt;といった区切り文字が有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Similar to regular code, `Nop`, `NilLiteral` and a false `BoolLiteral` are considered *falsey*, while everything else is considered truthy.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040130Z" creationid="hirofumiwakasugi" creationdate="20151001T040008Z">
        <seg>通常のコードと同様に、`Nop` と `NilLiteral` 、そして「偽」の `BoolLiteral` は「偽」で、それ以外はすべて「真」と判断されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since `typeof` doesn't actually evaluate the expression, it can be
used on methods at compile time, such as in this example, which
recursively forms a union type out of nested type paramters:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010313Z" creationid="hirofumiwakasugi" creationdate="20150930T062833Z">
        <seg>`typeof` は実際には式を評価せず、利用されるのはコンパイルのときです。例えば以下の例では、ネストされた型から、再帰的に型の組み合わせ (ユニオン型) を構築しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since strings are separated by a single space character (&lt;g2&gt; &lt;/g2&gt;) which must be escaped to use it as a part of a string.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194133Z" creationid="makenowjust" creationdate="20200419T194133Z">
        <seg>もちろん、エスケープされた1つのスペース (&lt;g2&gt; &lt;/g2&gt;) では文字列は区切られません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since we invoked `Person.new` with a `String` argument, the compiler makes `@name` be a `String` too.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134342Z" creationid="hirofumiwakasugi" creationdate="20150904T131934Z">
        <seg>ここで、`Person.new` を実行するときにその引数に `String` 型を与えています。そうすると、コンパイラが `@name` も 同様に`String` 型にしてくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SizeT = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024033Z" creationid="hirofumiwakasugi" creationdate="20151008T024033Z">
        <seg>SizeT = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SizeT = Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024032Z" creationid="hirofumiwakasugi" creationdate="20151008T024032Z">
        <seg>SizeT = Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Slashes must be escaped:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020149Z" creationid="hirofumiwakasugi" creationdate="20150902T020149Z">
        <seg>スラッシュはエスケープする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So first we would need to refactor the code, separating the code necessary for parsing options from the logic.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185447Z" creationid="makenowjust" creationdate="20200413T185447Z">
        <seg>よって、まずはじめにオプションの解析部分と実際のロジックを分離するリファクタリングを行う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So here a is Int32.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014510Z" creationid="hirofumiwakasugi" creationdate="20150903T014429Z">
        <seg>ここでは必ず Int32 である</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So how do you choose between a struct and a class? The rule of thumb is that if no instance variable is ever reassigned, i.e. your type is immutable, you can use a struct, otherwise use a class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055119Z" creationid="hirofumiwakasugi" creationdate="20150913T054534Z">
        <seg>ただ、具体的にクラスと構造体をどのように使い分ければよいのでしょうか？これまでの経験から言うと、もしインスタンス変数への再代入が全く発生しない場合 (例えばその型がイミュータブルな場合など) には構造体を使い、それ以外の場合はクラスを使うのが良いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So lets add a method that makes a person become older:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122227Z" creationid="hirofumiwakasugi" creationdate="20150904T121928Z">
        <seg>それでは、person が年をとることができるようにしてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So let’s have some fun building our first CLI application in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163621Z" creationid="makenowjust" creationdate="20200413T163621Z">
        <seg>それでは、Crystal での最初の CLI の開発を楽しみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So now the question would be: &lt;g1&gt;do we need to implement an options parser?&lt;/g1&gt; No need to, Crystal got us covered with the class &lt;g2&gt;OptionParser&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172302Z" creationid="makenowjust" creationdate="20200413T172302Z">
        <seg>ここで「&lt;g1&gt;オプションの解析部分を実装する必要がある？&lt;/g1&gt;」と疑問を持つことでしょう。その必要はありません。Crystal では&lt;g2&gt;OptionParser&lt;/g2&gt;がその機能を提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So replace the last line with:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055359Z" creationid="hirofumiwakasugi" creationdate="20150831T055353Z">
        <seg>その場合、最後の行を以下の通りに変更してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So you first need to use one of the previous described methods to have a running compiler.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060302Z" creationid="hirofumiwakasugi" creationdate="20150831T060302Z">
        <seg>したがって、まずはこれまでに紹介した方法のいずれかを使ってコンパイラをインストールする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, a program will spawn multiple fibers and Crystal will make sure to execute them when the time is right.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064903Z" creationid="akiji" creationdate="20200428T054325Z">
        <seg>そして、プログラムは複数のファイバを生成することができ、Crystalは適切なタイミングでそれらを実行してくれます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, how does all this work?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174126Z" creationid="makenowjust" creationdate="20200413T172722Z">
        <seg>さて、これがどうやって動作するというのでしょうか？　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, in general, it's preferable not to specify type restrictions and almost only use them to define different method overloads.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013634Z" creationid="hirofumiwakasugi" creationdate="20150908T013205Z">
        <seg>したがって、通常は型制約を使わず、メソッドをオーバーロードするときにのみ使用するくらいが好ましいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, let's add this option handlers and merge all this CLI applications into one fabulous CLI application!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180225Z" creationid="makenowjust" creationdate="20200413T180147Z">
        <seg>それでは、これらのオプションハンドラーを追加して、さらにこれまでに作った2つのCLI アプリケーションをまとめて、1つのファビュラスな CLI アプリケーションにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, the main fiber, the one that spawns the above fiber, finishes its execution and the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070515Z" creationid="akiji" creationdate="20200428T074948Z">
        <seg>そのため、上の例でファイバを生成したメインファイバはそのまま終わりに達してプログラムも終了してしまいました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>So, we have to test for &lt;g3&gt;Nil&lt;/g3&gt; and for &lt;g4&gt;empty&lt;/g4&gt; and act naturally for each case:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183058Z" creationid="makenowjust" creationdate="20200413T182754Z">
        <seg>というわけで、&lt;g3&gt;Nil&lt;/g3&gt;もしくは&lt;g4&gt;""&lt;/g4&gt; (空文字列) かをチェックして、自然に動作するようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some documentation common to every *id*.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214141Z" creationid="makenowjust" creationdate="20200412T214141Z">
        <seg>Some documentation common to every *id*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214140Z" creationid="makenowjust" creationdate="20200412T214140Z">
        <seg>Some documentation specific to *id*'s usage within `Child`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some low-level primitives are provided.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033744Z" creationid="hirofumiwakasugi" creationdate="20150906T033557Z">
        <seg>いくつかのローレベルプリミティブが提供されており、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some syntax sugar that contains the &lt;g1&gt;=&lt;/g1&gt; character is available:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174317Z" creationid="makenowjust" creationdate="20200422T174317Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt; を使った代入のためのシンタックスシュガーがいくつか用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some syntax sugar that contains the `=` character is available:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054415Z" creationid="hirofumiwakasugi" creationdate="20150902T054404Z">
        <seg>`=` を使った代入のためのシンタックスシュガーがいくつか用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some time-consuming operations are delegated to it, and while the event loop waits for that operation to finish the program can continue executing other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102638Z" creationid="akiji" creationdate="20200428T055014Z">
        <seg>おかげで、たとえ時間のかかる処理がI/Oに対して行われていてイベントループがその終了を待っている状態でも、プログラムは別のファイバを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Some types and methods can be annotated with attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072033Z" creationid="hirofumiwakasugi" creationdate="20150919T071807Z">
        <seg>いくつかの型やメソッドには、属性を付加することでアノテーションを与えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142557Z" creationid="hirofumiwakasugi" creationdate="20150911T142557Z">
        <seg>SomeType.new # OK, same as SomeModule::SomeType
some_method  # OK, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes the compiler can't infer the type of a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061819Z" creationid="hirofumiwakasugi" creationdate="20150930T061819Z">
        <seg>コンパイラがブロックの型を推論できない場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sometimes, we may need the user to input a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180724Z" creationid="makenowjust" creationdate="20200413T180724Z">
        <seg>しばしばユーザーに値を入力してもらいたい場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a call</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080021Z" creationid="akiji" creationdate="20200428T080021Z">
        <seg>メソッド呼び出しをファイバとして生成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a fiber</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064131Z" creationid="akiji" creationdate="20200428T064131Z">
        <seg>ファイバの生成</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spawning a fiber and waiting for it to complete</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080900Z" creationid="akiji" creationdate="20200428T080900Z">
        <seg>ファイバを生成してその終了を待つ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spec files must end with &lt;g2&gt;_spec.cr&lt;/g2&gt; to be recognizable as such by the compiler command.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T065018Z" creationid="akiji" creationdate="20200518T065018Z">
        <seg>コンパイラコマンドが認識できるように、spec ファイルのファイル名は末尾が&lt;g2&gt;_spec.cr&lt;/g2&gt;でなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Spec helper</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T070921Z" creationid="akiji" creationdate="20200518T070921Z">
        <seg>specヘルパ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Special macros exist that are invoked in some situations, as hooks:
`inherited`, `included` and `method_missing`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012437Z" creationid="hirofumiwakasugi" creationdate="20151002T012437Z">
        <seg>ある状況において実行される特別なマクロがフックとして存在します。それらは、`inherited`、`included` そして `method_missing` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specs run in random order will display a seed value upon completion.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T070101Z" creationid="akiji" creationdate="20200518T070101Z">
        <seg>ランダムな順番でspecが実行された場合、終了時にseed値が表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Specs, by default, run in the order defined, but can be run in a random order by passing &lt;g1&gt;--order random&lt;/g1&gt; to &lt;g2&gt;crystal spec&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T235235Z" creationid="akiji" creationdate="20200518T065834Z">
        <seg>&lt;g2&gt;crystal spec&lt;/g2&gt;に&lt;g1&gt;--order random&lt;/g1&gt;を指定すると、通常は定義され手順で実行されるspecを、ランダムな順序で実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Start learning Crystal with the Language Reference</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210829Z" creationid="makenowjust" creationdate="20200413T210829Z">
        <seg>言語リファレンスで Crystal の学習をはじめましょう</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Starting server ...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164550Z" creationid="makenowjust" creationdate="20200413T164550Z">
        <seg>Starting server ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>State a method's purpose or functionality in the first line.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140007Z" creationid="hirofumiwakasugi" creationdate="20151010T140007Z">
        <seg>最初の行にメソッドの目的と機能を記載する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T191350Z" creationid="makenowjust" creationdate="20200419T191350Z">
        <seg>文字列 (String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String interpolation is also possible with &lt;g1&gt;String#%&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192404Z" creationid="makenowjust" creationdate="20200419T192357Z">
        <seg>文字列の補間は&lt;g1&gt;String#%&lt;/g1&gt;メソッドでも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071434Z" creationid="hirofumiwakasugi" creationdate="20150919T071434Z">
        <seg>String |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>String.build do |io|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192845Z" creationid="makenowjust" creationdate="20200419T192845Z">
        <seg>String.build do |io|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Structs and modules can be generic too.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T060955Z" creationid="hirofumiwakasugi" creationdate="20150924T060938Z">
        <seg>構造体とモジュールをジェネリックにすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Summary</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170944Z" creationid="makenowjust" creationdate="20200413T170944Z">
        <seg>Summary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Supplement it with details and usages after that.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140120Z" creationid="hirofumiwakasugi" creationdate="20151010T140120Z">
        <seg>その後で、詳細と使用方法をその後に記載する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Symbol</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170733Z" creationid="makenowjust" creationdate="20200420T170733Z">
        <seg>シンボル (Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Symbols are interpreted at compile time and cannot be created dynamically.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T170934Z" creationid="makenowjust" creationdate="20200420T170934Z">
        <seg>シンボルはコンパイル時に解釈されるもので、動的に生成することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210402Z" creationid="makenowjust" creationdate="20200413T210402Z">
        <seg>構文</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Syntax and Semantics</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T235852Z" creationid="makenowjust" creationdate="20200413T235852Z">
        <seg>構文とその意味</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061138Z" creationid="hirofumiwakasugi" creationdate="20150924T061138Z">
        <seg>T</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>T
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030349Z" creationid="hirofumiwakasugi" creationdate="20150908T030349Z">
        <seg>T
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TEN #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055815Z" creationid="hirofumiwakasugi" creationdate="20150913T055815Z">
        <seg>TEN #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TODO</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214458Z" creationid="makenowjust" creationdate="20200412T214458Z">
        <seg>TODO</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tagging an example group (&lt;g1&gt;describe&lt;/g1&gt; or &lt;g2&gt;context&lt;/g2&gt;) extends to all of the contained examples.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T102203Z" creationid="akiji" creationdate="20200516T102203Z">
        <seg>実行例のグループ（&lt;g1&gt;describe&lt;/g1&gt;や&lt;g2&gt;context&lt;/g2&gt;）に対して指定されたタグは、その内部の実行例全てに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tagging specs</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101634Z" creationid="akiji" creationdate="20200516T101634Z">
        <seg>specのタグ付け</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tags can be used to group specs, allowing to only run a subset of specs when providing a &lt;g1&gt;--tag&lt;/g1&gt; argument to the spec runner (see &lt;g2&gt;Using the compiler&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234912Z" creationid="akiji" creationdate="20200516T101907Z">
        <seg>タグはspecをグループ付けするのに使用され、specを実行する際（&lt;g2&gt;Using the compiler&lt;/g2&gt;を参照）に&lt;g1&gt;--tag&lt;/g1&gt;引数を指定することで、specの一部のみを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells the compiler how to link a C library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072342Z" creationid="hirofumiwakasugi" creationdate="20150919T072342Z">
        <seg>C ライブラリのリンクをコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tells the compiler to never inline a method call.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073205Z" creationid="hirofumiwakasugi" creationdate="20150919T073205Z">
        <seg>メソッドを呼び出しをインラインにしないようにコンパイラに指示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ten = 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052947Z" creationid="hirofumiwakasugi" creationdate="20151007T052947Z">
        <seg>Ten = 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Ternary if</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080846Z" creationid="makenowjust" creationdate="20200424T080846Z">
        <seg>3項演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Test cases that have been defined or outlined but are not yet expected to work can be defined using &lt;g1&gt;pending&lt;/g1&gt; instead of &lt;g2&gt;it&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T232833Z" creationid="akiji" creationdate="20200505T132115Z">
        <seg>&lt;g2&gt;it&lt;/g2&gt;の代わりに&lt;g1&gt;pending&lt;/g1&gt;を使用することで、概要だけを記載して実行はしないテストケースを定義することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184716Z" creationid="makenowjust" creationdate="20200413T184716Z">
        <seg>テスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Testing Crystal Code</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T123744Z" creationid="akiji" creationdate="20200505T123744Z">
        <seg>Crystalコードのテスト</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Text blocks, for example to show program output, must be surrounded with triple backticks followed by the "text" keyword.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212107Z" creationid="makenowjust" creationdate="20200412T212107Z">
        <seg>例えばプログラムの出力を示すためのテキストのブロックは、「text」というキーワードをつけた3つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thank you very much!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164534Z" creationid="makenowjust" creationdate="20200413T164534Z">
        <seg>貢献よろしくお願いします!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, `T` becomes the type that was effectively used to instantiate the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035919Z" creationid="hirofumiwakasugi" creationdate="20150908T034753Z">
        <seg>つまり、`T` が型を示すため、メソッドを初期化する際に効果的に利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, a variable’s type is the type of the last expression(s) assigned to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012353Z" creationid="hirofumiwakasugi" creationdate="20150903T012212Z">
        <seg>つまり、変数の型は最後に代入された式によって決定されるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, inside "lib/{project}" each project's directory exists (&lt;g1&gt;src&lt;/g1&gt;, &lt;g2&gt;spec&lt;/g2&gt;, &lt;g3&gt;README.md&lt;/g3&gt; and so on)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090926Z" creationid="makenowjust" creationdate="20200427T090255Z">
        <seg>つまり、各 "lib/{project}" が &lt;g1&gt;src&lt;/g1&gt; や &lt;g2&gt;spec&lt;/g2&gt;、&lt;g3&gt;README.md&lt;/g3&gt; があるようなプロジェクトのディレクトリ構造になっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, it behaves in the opposite way of an &lt;g4&gt;if&lt;/g4&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090500Z" creationid="makenowjust" creationdate="20200424T090500Z">
        <seg>要するに、&lt;g4&gt;if&lt;/g4&gt;と反対の動きをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, it behaves in the opposite way of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022839Z" creationid="hirofumiwakasugi" creationdate="20150903T022839Z">
        <seg>つまり、`if` と反対の働きをします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the body might never be executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052105Z" creationid="hirofumiwakasugi" creationdate="20150905T052105Z">
        <seg>これはつまり、本体が1度も実行されない場合もあるということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, the compiler does global type inference and tells you whenever you make a mistake in the usage of a class or method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T044152Z" creationid="hirofumiwakasugi" creationdate="20150905T043752Z">
        <seg>つまり、コンパイラの型推論はグローバルに働き、クラスやメソッドの誤った使用を常に検知できるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That is, you can have different methods with the same name and different number of arguments and they will be considered as separate methods.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071013Z" creationid="hirofumiwakasugi" creationdate="20150906T070908Z">
        <seg>上記からわかるように、同じ名前で引数の数が異なるメソッドを定義することが可能で、それぞれが別のメソッドとして扱われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That logic also doesn't work with proc and method calls, including getters and properties, because nilable (or, more generally, union-typed) procs and methods aren't guaranteed to return the same more-specific type on two successive calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010159Z" creationid="hirofumiwakasugi" creationdate="20150903T020527Z">
        <seg>Proc やメソッドの呼び出し (ゲッターやプロパティも含む) の場合にも当てはまりません。なぜなら、Nil を許容する (もしくは、複数の型の組み合わせとなるユニオン型の場合がより一般的でしょう) Proc やメソッドの呼び出しの場合、連続した呼び出しであっても、それらが常に同じ型を返すとは限らないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That was easy!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183334Z" creationid="makenowjust" creationdate="20200413T183334Z">
        <seg>簡単でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That will add the signing key and the repository configuration.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053547Z" creationid="hirofumiwakasugi" creationdate="20150831T052935Z">
        <seg>これで、署名用のキーとリポジトリの設定が追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's why the instance size ends up being 12 and not 8.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T121039Z" creationid="hirofumiwakasugi" creationdate="20150906T120906Z">
        <seg>したがって、最終的にこのインスタンスのサイズは 8 ではなく 12 となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's why the recommended mechanism to communicate data is using channels and sending messages between them.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103136Z" creationid="akiji" creationdate="20200428T064012Z">
        <seg>このことが、データのやりとりにチャネルを使い、メッセージをチャネル経由で送受信することが推奨される理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The "heredoc" finishes in the line that starts with `IDENT`, ignoring leading whitespace.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062152Z" creationid="hirofumiwakasugi" creationdate="20160204T062108Z">
        <seg>ヒアドキュメントは `IDENT` から始まる行で終わります。このとき、先頭の空白は無視されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;!&lt;/g1&gt; operator returns a &lt;g2&gt;Bool&lt;/g2&gt; that results from negating the &lt;g3&gt;truthyness&lt;/g3&gt; of a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085543Z" creationid="makenowjust" creationdate="20200424T085543Z">
        <seg>否定 (&lt;g1&gt;!&lt;/g1&gt;) 演算子は&lt;g3&gt;真かどうか&lt;/g3&gt;を反転させた&lt;g2&gt;Bool&lt;/g2&gt;型の値を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;--release&lt;/g1&gt; flag can be used to enable optimizations.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150702Z" creationid="makenowjust" creationdate="20200419T150702Z">
        <seg>&lt;g1&gt;--release&lt;/g1&gt;というフラグを付けることで最適化を有効にできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;--static&lt;/g1&gt; flag can be used to build a statically-linked executable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152727Z" creationid="makenowjust" creationdate="20200419T152556Z">
        <seg>&lt;g1&gt;--static&lt;/g1&gt;フラグは、静的リンクした実行可能ファイルの生成に用います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt; command builds a binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150522Z" creationid="makenowjust" creationdate="20200419T150522Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal build&lt;/g2&gt;&lt;/g1&gt;コマンドで実行可能バイナリがビルドされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt; command helps to initialize a Crystal project folder, setting
up a basic project structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153501Z" creationid="makenowjust" creationdate="20200419T153501Z">
        <seg>&lt;g1&gt;&lt;g2&gt;crystal init&lt;/g2&gt;&lt;/g1&gt; コマンドは基本的なディレクトリ構成を持った Crystal プロジェクトの初期化をするのに役に立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;=&lt;/g1&gt; operator syntax sugar is also available to setters and indexers.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174726Z" creationid="makenowjust" creationdate="20200422T174726Z">
        <seg>&lt;g1&gt;=&lt;/g1&gt; のシンタックスシュガーはセッターやインデックス代入に対しても有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;Nil&lt;/g1&gt; type is used to represent the absence of a value, similar to &lt;g2&gt;null&lt;/g2&gt; in other languages.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000904Z" creationid="makenowjust" creationdate="20200414T000713Z">
        <seg>&lt;g1&gt;Nil&lt;/g1&gt; 型は値が存在しないことを表す、他の言語にある&lt;g2&gt;null&lt;/g2&gt;のようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal build&lt;/g1&gt; command builds a dynamically-linked binary executable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155040Z" creationid="makenowjust" creationdate="20200419T155040Z">
        <seg>&lt;g1&gt;crystal build&lt;/g1&gt;コマンドは動的リンクした実行可能バイナリをビルドします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal docs&lt;/g1&gt; command generates API documentation from inline docstrings in Crystal files (see &lt;g2&gt;documenting code&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161638Z" creationid="makenowjust" creationdate="20200419T161638Z">
        <seg>&lt;g1&gt;crystal docs&lt;/g1&gt;コマンドは Crystal のソースコード中のコメントから API ドキュメントを生成します。 (詳しくは&lt;g2&gt;コードのドキュメント化&lt;/g2&gt;を参照).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal env&lt;/g1&gt; command prints environment variables used by Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163204Z" creationid="makenowjust" creationdate="20200419T163204Z">
        <seg>&lt;g1&gt;crystal env&lt;/g1&gt; コマンドは Crystal が使う環境変数を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal eval&lt;/g1&gt; command reads Crystal source code from command line or stdin, compiles it to a binary executable and immediately runs it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155922Z" creationid="makenowjust" creationdate="20200419T155922Z">
        <seg>&lt;g1&gt;crystal eval&lt;/g1&gt;コマンドは Crystal のソースコードをコマンドラインか標準入力から読み込んで、それを実行可能ファイルにコンパイルして即時に実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal init&lt;/g1&gt; command initializes a Crystal project folder.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161040Z" creationid="makenowjust" creationdate="20200419T161040Z">
        <seg>&lt;g1&gt;crystal init&lt;/g1&gt;コマンドは Crystal プロジェクトに使うフォルダを初期化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal play&lt;/g1&gt; command starts a webserver serving an interactive Crystal playground.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165321Z" creationid="makenowjust" creationdate="20200419T165321Z">
        <seg>&lt;g1&gt;crystal play&lt;/g1&gt; コマンドは対話的な Crystal のプレイグラウンドを提供する Web サーバーを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal spec&lt;/g1&gt; command compiles and runs a Crystal spec suite.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163508Z" creationid="makenowjust" creationdate="20200419T163508Z">
        <seg>&lt;g1&gt;crystal spec&lt;/g1&gt; コマンドは Crystal の spec のコンパイルと実行を一度に行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal tool format&lt;/g1&gt; command applies default format to Crystal source files.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165806Z" creationid="makenowjust" creationdate="20200419T165806Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt; コマンドは Crystal のソースコードに標準的なフォーマットを適用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;crystal version&lt;/g1&gt; command prints the Crystal version, LLVM version and default target triple.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160737Z" creationid="makenowjust" creationdate="20200419T160737Z">
        <seg>&lt;g1&gt;crystal version&lt;/g1&gt;コマンドは Crystal のバージョンや LLVM のバージョン、そしてデフォルトで使うターゲットトリプルを出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;gets&lt;/g1&gt; calls will block the fibers and tell the Event Loop to continue from there if data comes.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T071442Z" creationid="akiji" creationdate="20200429T134238Z">
        <seg>&lt;g1&gt;gets&lt;/g1&gt; の呼び出しは、そのファイバをブロックして、イベントループに読み出す値が到着したら再開してくれるように伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;run&lt;/g1&gt; command compiles a source file to a binary executable and immediately runs it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154454Z" creationid="makenowjust" creationdate="20200419T154454Z">
        <seg>&lt;g1&gt;run&lt;/g1&gt;コマンドはソースコードを実行可能バイナリにコンパイルして、即時にそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The &lt;g1&gt;run&lt;/g1&gt; command compiles the source file &lt;g2&gt;hello_world.cr&lt;/g2&gt; to a binary executable in a temporary location
and immediately executes it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150428Z" creationid="makenowjust" creationdate="20200419T150428Z">
        <seg>&lt;g1&gt;run&lt;/g1&gt;コマンドは&lt;g2&gt;hello_world.cr&lt;/g2&gt;というソースコードをその場限りの実行可能バイナリにコンパイルして、即時にそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The C `setjmp` is an example of such a function.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073440Z" creationid="hirofumiwakasugi" creationdate="20150919T073440Z">
        <seg>こういった関数の例としては C の `setjmp` があげられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Crystal compiler has a &lt;g1&gt;spec&lt;/g1&gt; command with tools to constrain which examples get run and tailor the output.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T102723Z" creationid="akiji" creationdate="20200516T102723Z">
        <seg>Crystalコンパイラには&lt;g1&gt;spec&lt;/g1&gt;コマンドがあり、どの実行例が実行されるかを指定したり出力を調整したりできるツールが用意され居ます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Event Loop, which is just another fiber, being in charge of async tasks, like for example files, sockets, pipes, signals and timers (like doing a &lt;g1&gt;sleep&lt;/g1&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T065624Z" creationid="akiji" creationdate="20200428T055714Z">
        <seg>ファイルやソケット、パイプ、シグナル、タイマ（&lt;g1&gt;sleep&lt;/g1&gt;したときなど）による非同期タスクを扱うための「イベントループ」（これもファイバの1種）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Proc type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171411Z" creationid="makenowjust" creationdate="20200422T171411Z">
        <seg>Proc の型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062903Z" creationid="akiji" creationdate="20200428T062903Z">
        <seg>ランタイムスケジューラ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler will coordinate fibers and channels for their communication.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103706Z" creationid="akiji" creationdate="20200428T055740Z">
        <seg>ラインタイムスケジューラはデータをやりとるするためにファイバとチャネルの間を調整します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The Runtime Scheduler, in charge of executing all fibers when the time is right.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055641Z" creationid="akiji" creationdate="20200428T055641Z">
        <seg>すべてのファイバを適切なタイミングで起動するための「ランタイムスケジューラ」</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The String version just creates a new [Exception](http://crystal-lang.org/api/Exception.html) instance with that message.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011436Z" creationid="hirofumiwakasugi" creationdate="20150907T011436Z">
        <seg>String の場合は、単純にそのメッセージを含んだ [Exception](http://crystal-lang.org/api/Exception.html) のインスタンスを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The [Nil](http://crystal-lang.org/api/Nil.html) type has only one possible value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050944Z" creationid="hirofumiwakasugi" creationdate="20150901T050932Z">
        <seg>[Nil](http://crystal-lang.org/api/Nil.html) 型にはたった1つの値しか存在しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `+` means it's a virtual type: because a `Dog` and a `Cat` were assigned to `@pet`, instead of having the type be `Dog | Cat` the compiler simplified it to `Animal+`, meaning "any class that inherits from `Animal`, including `Animal`".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140035Z" creationid="hirofumiwakasugi" creationdate="20151009T140035Z">
        <seg>この `+` は  virtual 型であることを示しています。`@pet` には `Dog` と `Cat` が代入されていますが、このときコンパイラはその型を `Dog | Cat` ではなく `Animal+` と単純化します。これは、`Animal` を継承したすべてのクラス (`Animal` 自身も含む) を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `+` means it's a virtual type: because a `Dog` and a `Cat` were assigned to `@pet`, instead of having the type be `Dog | Cat` the compiler simplified it to `Animal+`, meaning "any class that inhertis from `Animal`, including `Animal`".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032803Z" creationid="hirofumiwakasugi" creationdate="20150910T032331Z">
        <seg>この `+` は  virtual 型であることを示しています。`@pet` には `Dog` と `Cat` が代入されていますが、このときコンパイラはその型を `Dog | Cat` ではなく `Animal+` と単純化します。これは、`Animal` を継承したすべてのクラス (`Animal` 自身も含む) を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `=` operator syntax sugar is also available to setters and indexers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054952Z" creationid="hirofumiwakasugi" creationdate="20150902T054952Z">
        <seg>セッターやインデックス指定代入の場合にも、`=` 演算子のシンタックスシュガーを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `@[Flags]` attribute makes the first constant's value be `1`, and successive constants are multiplied by `2`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T045327Z" creationid="hirofumiwakasugi" creationdate="20150914T114732Z">
        <seg>`@[Flags]` 属性を指定すると、最初の定数の値が `1` になり、以降はそれぞれ前の値を2倍したものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `@[ThreadLocal]` attribute can be applied to global variables and class variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072437Z" creationid="hirofumiwakasugi" creationdate="20150919T072437Z">
        <seg>`@[ThreadLocal]` 属性はグローバル変数とクラス変数に対して適用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `Array#map` method uses the block's type as the generic type for the Array.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061539Z" creationid="hirofumiwakasugi" creationdate="20150930T061414Z">
        <seg>`Array#map` メソッドはブロック内の型を配列のジェネリック型とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `Char` type in Crystal is a unicode codepoint so it is represented by four bytes, making it similar to an `Int32`, not to an `UInt8`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042934Z" creationid="hirofumiwakasugi" creationdate="20151005T042619Z">
        <seg>Crystal  の `Char` 型は Unicode のコードポイントであるため、4バイトで表現されます。つまり、`UInt8` ではなく `Int32` に近いです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression also allows to cast between pointer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015732Z" creationid="hirofumiwakasugi" creationdate="20150930T015530Z">
        <seg>`as` 式はポインタ型同士のキャストも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression can be used to cast an expression to a "bigger" type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061300Z" creationid="hirofumiwakasugi" creationdate="20150930T061006Z">
        <seg>`as` 式は、ある式をより「大きな」型へキャストするために使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression performs a runtime check: if `a` wasn't an `Int32`, an [exception](exception_handling.html) is raised.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015301Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>`as` 式はランタイムにチェックを行うため、もし `a` が `Int32` ではないときには[例外](exception_handling.html)が発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `as` expression restricts the types of an expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014200Z" creationid="hirofumiwakasugi" creationdate="20150930T014200Z">
        <seg>`as` 式はある式の型に対して制約を与えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `index` variable in the above example is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040412Z" creationid="hirofumiwakasugi" creationdate="20151001T040412Z">
        <seg>上記の `index` 変数はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `instance_sizeof` expression returns an `Int32` with the instance size of a given class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120605Z" creationid="hirofumiwakasugi" creationdate="20150906T120605Z">
        <seg>`instance_sizeof` は与えられたクラスのインスタンスのサイズを `Int32` で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `next` expression accepts arguments, and these give the value of the `yield` expression that invoked the block:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030048Z" creationid="hirofumiwakasugi" creationdate="20150916T030048Z">
        <seg>`next` 式は引数を受け取ることが可能です。そのとき、受け取った値はそのブロックを実行した `yield` 式の値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `next` expression inside a block exits early from the block (not the method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025657Z" creationid="hirofumiwakasugi" creationdate="20150916T025559Z">
        <seg>ブロックの中に `next` 式があるとそこで (メソッドではなく) ブロックを抜けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `pointerof` expression returns a [Pointer](http://crystal-lang.org/api/Pointer.html) that points to the contents of a variable or instance variable.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035631Z" creationid="hirofumiwakasugi" creationdate="20150906T035018Z">
        <seg>`pointerof` は、変数やインスタンス変数の格納場所を指す[ポインタ](http://crystal-lang.org/api/Pointer.html)を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `sizeof` expression returns an `Int32` with the size in bytes of a given type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035345Z" creationid="hirofumiwakasugi" creationdate="20150906T035227Z">
        <seg>`sizeof` は与えられた型のバイト数を `Int32` で返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `thrice` method didn't execute the `puts "Before 3"` expression because of the `break`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024524Z" creationid="hirofumiwakasugi" creationdate="20150916T024447Z">
        <seg>`break` があるため、`thrice` メソッドが `puts "Before 3"` を実行することはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `typeof` expression returns the type of an expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062507Z" creationid="hirofumiwakasugi" creationdate="20150930T062507Z">
        <seg>`typeof` 式は、ある式の型を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `yield` expression is similar to a call and can receive arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015722Z" creationid="hirofumiwakasugi" creationdate="20150916T015722Z">
        <seg>`yield` 式はメソッド呼び出しと似ていて、引数を受け取ることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `yield` expression itself has a value: the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023452Z" creationid="hirofumiwakasugi" creationdate="20150916T023452Z">
        <seg>`yield` 式自体も値を持っていて、それはブロックの最後の式となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above **doesn’t** work with instance variables, class variables or global variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022348Z" creationid="hirofumiwakasugi" creationdate="20150903T022348Z">
        <seg>ただ、インスタンス変数、クラス変数、そしてグローバル変数の場合には、上記が **当てはまらない** ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above &lt;g1&gt;doesn’t&lt;/g1&gt; work with instance variables or class variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083204Z" creationid="makenowjust" creationdate="20200424T083204Z">
        <seg>そしてこれはインスタンス変数やクラス変数では&lt;g1&gt;機能しません&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above also works if there are ands (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083611Z" creationid="makenowjust" creationdate="20200424T083119Z">
        <seg>これは、条件でかつ (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) が使われた場合も同様に機能します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above also works if there are ands (`&amp;&amp;`) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022315Z" creationid="hirofumiwakasugi" creationdate="20150903T022220Z">
        <seg>上記は、条件で「かつ (`&amp;&amp;`)」が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code captures the block of code passed to `int_to_int` in the `block` variable, and returns it from the method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040547Z" creationid="hirofumiwakasugi" creationdate="20150916T040132Z">
        <seg>上記のコードでは、`int_to_int` に渡されたコードブロックを `block` 変数の中に捕捉し、それをメソッドの戻り値として返しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code gives this compile error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042919Z" creationid="hirofumiwakasugi" creationdate="20150907T042907Z">
        <seg>このとき以下のコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code will make sense once you read the whole documentation, but we can already learn some things.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072553Z" creationid="hirofumiwakasugi" creationdate="20150901T072553Z">
        <seg>上記のコードをすべて理解するためにはこのドキュメント全体を読む必要がありますが、ここでいくつかの点について説明しておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above code will make sense once you read the whole language reference, but we can already learn some things.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161846Z" creationid="makenowjust" creationdate="20200413T161846Z">
        <seg>上記のコードをすべて理解するためにはこの言語リファレンス全体を読む必要がありますが、ここでいくつかの点について説明しておきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above could also be implemented with a Symbol:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012132Z" creationid="hirofumiwakasugi" creationdate="20150916T012129Z">
        <seg>上記と同等のコードを、シンボルを使って実装することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above examples use unbuffered channels: when sending a value, if a fiber is waiting on that channel then execution continues on that fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103750Z" creationid="akiji" creationdate="20200429T143759Z">
        <seg>上の例ではバッファのないチャネル、つまり値を送信した際にそのチャネルの値を待っているファイバがあればそちらに処理が移るもの、を使用しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above happens even if `something_dangerous_that_returns_Int32` never raises, or if `a` was assigned a value and then a method that potentially raises is executed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022454Z" creationid="hirofumiwakasugi" creationdate="20150907T020303Z">
        <seg>このとき、もし `something_dangerous_that_returns_Int32`が例外を発生させない場合であってもエラーが発生します。さらに、`a` に先に値が代入されて、それから例外を発生させる可能性があるメソッドが実行された場合であったとしてもエラーとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173732Z" creationid="makenowjust" creationdate="20200420T173732Z">
        <seg>よって、上の例は以下と等しいものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is just syntax sugar and doesn't have any performance penalty.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153119Z" creationid="hirofumiwakasugi" creationdate="20160115T153049Z">
        <seg>これは単なるシンタックスシュガーであり、パフォーマンス上の欠点はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is perfectly valid, because there's no type restriction in the `value=` method, and so we have just "broken" our class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065549Z" creationid="hirofumiwakasugi" creationdate="20150912T065136Z">
        <seg>`value=` メソッドに型制約が設定されていないため、このコードは完全に正当なコードです。ただ、クラスとしては「壊れ」てしまっていると言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is simpy rewritten to:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025014Z" creationid="hirofumiwakasugi" creationdate="20150917T025014Z">
        <seg>上記は単純に以下に書き換えることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above is useful for providing overloads based on types, not instances:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025809Z" creationid="hirofumiwakasugi" creationdate="20150908T025809Z">
        <seg>これは、インスタンスではなく型によってメソッドをオーバーロードしたい場合に便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above logic **doesn’t** work with instance variables, class variables or global variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015431Z" creationid="hirofumiwakasugi" creationdate="20150903T015309Z">
        <seg>ただ、インスタンス変数、クラス変数、そしてグローバル変数の場合には、上記が **当てはまらない** ことに注意してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above logic works &lt;g1&gt;only for local variables&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081723Z" creationid="makenowjust" creationdate="20200424T081723Z">
        <seg>これまで書いてきたことは&lt;g1&gt;ローカル変数に対してのみ機能します&lt;/g1&gt;。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above makes it impossible to deal with a single box of a fixed type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060953Z" creationid="hirofumiwakasugi" creationdate="20150912T060523Z">
        <seg>こうなると、この箱を1つの決まった型として扱うことが不可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above might not seem to be useful, but it is when, for example, mapping an array of elements:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061344Z" creationid="hirofumiwakasugi" creationdate="20150930T061303Z">
        <seg>上記では一体何が嬉しいのかわからないかもしれません。では、以下のように配列の要素を map する場合ではどうでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above now works, because `MyBox` is now not a single type, but a family of types identified with a `T` type: `MyBox(Int32)` is a different type than `MyBox(String)`, and their `@value` variable is not shared.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063000Z" creationid="hirofumiwakasugi" creationdate="20150912T062410Z">
        <seg>これで動くようになりました。理由は、この場合 `MyBox` はもはや単一の型ではなく、複数の同じ種類の型の中である1つの型を示すものとなっているからです。そして、それぞれの型は `T` の型によって識別されます。つまり、`MyBox(Int32)` と `MyBox(String)` は同じ種類ですが別の型として扱われます。そして、それぞれの `@value` が共有されることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above outputs "nil" twice.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022615Z" creationid="hirofumiwakasugi" creationdate="20150916T022615Z">
        <seg>上記では「nil」が2回出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "2" and "3".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023552Z" creationid="hirofumiwakasugi" creationdate="20150916T023552Z">
        <seg>上記では「2」と「3」が出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "Before 1" and "Before 2".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024405Z" creationid="hirofumiwakasugi" creationdate="20150916T024405Z">
        <seg>上記は「Before 1」そして「Before 2」を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above prints "Got 1" and "Got 2".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015755Z" creationid="hirofumiwakasugi" creationdate="20150916T015755Z">
        <seg>上記を実行すると「Got 1」そして「Got 2」と出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program prints "10" ten times.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080154Z" creationid="akiji" creationdate="20200428T080154Z">
        <seg>上のプログラムは "10" を10回出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program prints "Hello!" twice, once for each `yield`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013638Z" creationid="hirofumiwakasugi" creationdate="20150916T013623Z">
        <seg>上記のプログラムでは、`yield` ごとに「Hello!」が出力されるので、「Hello!」が計2回出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above program spawns two fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T141659Z" creationid="akiji" creationdate="20200429T132703Z">
        <seg>このプログラムは2つのファイバを生成しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The above works because when we do `MyBox(Int32)`, `T` becomes `Int32`, and when we invoke the constructor, the value passed to it must match `T`, which is `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064851Z" creationid="hirofumiwakasugi" creationdate="20150912T063956Z">
        <seg>これで欠点が解消しました。`MyBox(Int32)` としたとき、`T` の型は `Int32` になります。そして、コンストラクタを呼び出した際に、渡される値は `T` の型、つまり `Int32` に合致している必要があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The advantage of being cooperative is that a lot of the overhead of doing a context switch (switching between threads) is gone.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150639Z" creationid="akiji" creationdate="20200428T062422Z">
        <seg>こうした協調動作の利点は、コンテキスト切り替え（スレッド間の切り替え）によるオーバーヘッドの大部分をなくすことができることです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The answer is that when we defined an `initialize` method Crystal defined a `new` method for us, like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060124Z" creationid="hirofumiwakasugi" creationdate="20150904T060013Z">
        <seg>実は、`initialize` メソッドを定義したとき、Crystal は同時に `new` メソッドも定義しているのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to sizeof is a [type](type_grammar.html) and is often combined with [typeof](typeof.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040057Z" creationid="hirofumiwakasugi" creationdate="20150906T040057Z">
        <seg>sizeof の引数は [type](type_grammar.html) なので、[typeof](typeof.html) とあわせて使うことが多いでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The argument to the expression is a [type](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015334Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>式に与える引数は[型](type_grammar.html)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The arguments are packed into an `ArrayLiteral` and passed to the macro.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040803Z" creationid="hirofumiwakasugi" creationdate="20151001T040740Z">
        <seg>引数は `ArrayLiteral` に変換されてマクロに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The array's generic type argument &lt;g1&gt;T&lt;/g1&gt; is inferred from the types of the elements inside the literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172952Z" creationid="makenowjust" creationdate="20200420T172952Z">
        <seg>配列のジェネリック型引数&lt;g1&gt;T&lt;/g1&gt;はリテラルの要素の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The attribute list is fixed, but eventually (maybe) there will be user-defined attributes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072305Z" creationid="hirofumiwakasugi" creationdate="20150919T071911Z">
        <seg>付加することのできる属性は決まっていますが、将来的には (おそらく) ユーザーが独自の属性を定義できるようになる予定です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The begin and end values do not necessarily need to be of the same type: &lt;g1&gt;true..1&lt;/g1&gt; is a valid range, although pretty useless &lt;g2&gt;Enumerable&lt;/g2&gt; methods won't work with incompatible types.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035445Z" creationid="makenowjust" creationdate="20200421T035445Z">
        <seg>右と左の値は必ずしも同じ型である必要はありません。例えば &lt;g1&gt;true..1&lt;/g1&gt; は有効な範囲です。しかしこの場合2つの型は比較不能のため、 &lt;g2&gt;Enumerable&lt;/g2&gt; のメソッド群がほとんど使えず、あまり便利な場面はありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The best examples of this are [Enumerable#map](http://crystal-lang.org/api/Enumerable.html#map%28%26block%20%3A%20T%20-%3E%20U%29-instance-method) and [Enumerable#select](http://crystal-lang.org/api/Enumerable.html#select%28%26block%20%3A%20T%20-%3E%20%29-instance-method):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023811Z" creationid="hirofumiwakasugi" creationdate="20150916T023734Z">
        <seg>その最もわかりやすい例は [Enumerable#map](http://crystal-lang.org/api/Enumerable.html#map%28%26block%20%3A%20T%20-%3E%20U%29-instance-method) と [Enumerable#select](http://crystal-lang.org/api/Enumerable.html#select%28%26block%20%3A%20T%20-%3E%20%29-instance-method) でしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The binary executable is stored in a temporary location between compiling and running.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160050Z" creationid="makenowjust" creationdate="20200419T160050Z">
        <seg>コンパイルと実行の間、生成された実行可能ファイルは一時的な場所に保存されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The block variable `second` also includes the `Nil` type because the last `yield` expression didn't include a second argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023329Z" creationid="hirofumiwakasugi" creationdate="20150916T023208Z">
        <seg>ブロック変数 `second` は `Nil` 型を含んでいます。これは、最後の `yield` 式に2番目の引数が指定されていないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The buffer is allocated on the stack, avoiding a heap allocation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115943Z" creationid="hirofumiwakasugi" creationdate="20150906T115731Z">
        <seg>このとき、バッファはヒープではなくスタックに割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The chained assignment is not only available to &lt;g1&gt;local variables&lt;/g1&gt; but also to &lt;g2&gt;instance variables&lt;/g2&gt;, &lt;g3&gt;class variables&lt;/g3&gt; and setter methods (methods that end with &lt;g4&gt;=&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175303Z" creationid="makenowjust" creationdate="20200422T175154Z">
        <seg>連続した代入は&lt;g1&gt;ローカル変数&lt;/g1&gt;に限らず&lt;g2&gt;インスタンス変数&lt;/g2&gt;や&lt;g3&gt;クラス変数&lt;/g3&gt;、セッターメソッド (名前が &lt;g4&gt;=&lt;/g4&gt; で終わるメソッド) に対して利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The child method can use &lt;g1&gt;:inherit:&lt;/g1&gt; to explicitly copy the parent's documentation, without the &lt;g2&gt;Description copied from ...&lt;/g2&gt; text.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215133Z" creationid="makenowjust" creationdate="20200412T213657Z">
        <seg>子クラスのメソッドで親クラスからドキュメントをコピーすることを明示するために&lt;g1&gt;:inherit:&lt;/g1&gt;が利用できます。この場合 &lt;g2&gt;Description copied from ...&lt;/g2&gt;というメッセージは生成されません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The classic "hello world" program looks like this in Crystal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072503Z" creationid="hirofumiwakasugi" creationdate="20150901T072444Z">
        <seg>伝統的な「hello world」プログラムを Crystal で書くと次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The closing delimiter may be followed by a number of optional modifiers to adjust the matching behaviour of the regular expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041719Z" creationid="makenowjust" creationdate="20200421T041613Z">
        <seg>区切り文字を閉じたあとに、いくつかの修飾子を続けることで、正規表現のマッチの挙動を変更できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The command creates a static website in &lt;g1&gt;output_dir&lt;/g1&gt; (default &lt;g2&gt;./docs&lt;/g2&gt;), consisting of HTML files for each Crystal type,
in a folder structure mirroring the Crystal namespaces.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161832Z" creationid="makenowjust" creationdate="20200419T161832Z">
        <seg>このコマンドは&lt;g1&gt;output_dir&lt;/g1&gt; (デフォルトでは &lt;g2&gt;./docs&lt;/g2&gt;) に、 Crystal での名前を反映したディレクトリ構造で、各 HTML ファイルが1つ1つの型に対応するような、静的な Web サイトを生成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiled binary is in &lt;g3&gt;bin/shards&lt;/g3&gt; and should be added to &lt;g4&gt;PATH&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173527Z" creationid="makenowjust" creationdate="20200419T173527Z">
        <seg>コンパイルされたバイナリは&lt;g3&gt;bin/shards&lt;/g3&gt;にあるので、&lt;g4&gt;PATH&lt;/g4&gt;にそれを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler doesn't do an exahustive analysis of this: it just assumes that if a variable is captured by a proc, the time of that proc invocation is unknown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060231Z" creationid="hirofumiwakasugi" creationdate="20150918T055821Z">
        <seg>このことに対して、コンパイラが綿密な分析をすることはありません。コンパイラはただ、proc に変数が捕捉されていたら、その proc がいつどこで実行されるかは未知である、として扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler doesn't do an exhaustive analysis of this: it just assumes that if a variable is captured by a proc, the time of that proc invocation is unknown.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023752Z" creationid="hirofumiwakasugi" creationdate="20151009T023752Z">
        <seg>このことに対して、コンパイラが綿密な分析をすることはありません。コンパイラはただ、proc に変数が捕捉されていたら、その proc がいつどこで実行されるかは未知である、として扱います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler infers this attribute for a method if it invokes a method that is marked as `@[Raises]` or raises (recursively).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053313Z" creationid="hirofumiwakasugi" creationdate="20151008T051453Z">
        <seg>コンパイラは、`@[Raises]` が指定されたメソッドを実行するメソッドや、例外を発生させるメソッドに対しても (再帰的に) この属性が指定されているものと推論します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler is usually moderately smart about the type of local variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054336Z" creationid="hirofumiwakasugi" creationdate="20150918T054303Z">
        <seg>ローカル変数の型に対して、コンパイラは「それなりに」賢く解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler knows that after the block, `x` can be Int32 or String (it could know that it will always be String because the method always yields, this will maybe improve in the future).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054917Z" creationid="hirofumiwakasugi" creationdate="20150918T054652Z">
        <seg>コンパイラは、ブロックの後に `x` が Int32 か String であることを判断できます (ただ、この場合だとメソッドは必ず yield するので、常に String であることは明白です。将来的にはそこまで判断できるように改善するつもりです) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler made `@name` have all types assigned to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T042832Z" creationid="hirofumiwakasugi" creationdate="20150904T140006Z">
        <seg>このように、コンパイラは `@name` が与えられたすべての型を持つようにしています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler needs the block's type for the generic type of the Array created by `Array#map`, but since `Person` was never instantiated, the compiler doesn't know the type of `@name`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062133Z" creationid="hirofumiwakasugi" creationdate="20150930T062111Z">
        <seg>コンパイラは、`Array#map` によって作られる配列のジェネリック型として、ブロックの型を必要としています。しかし、`Person` が1度もインスタンス化されていないため、コンパイラは `@name` の型を知ることができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler neither sets nor reads it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170838Z" creationid="makenowjust" creationdate="20200419T170838Z">
        <seg>これを明示的にセットすることもできず、コンパイラはこの変数を実際には利用しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler uses the &lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt; environment variable as a first lookup destination for static and dynamic libraries that are to be linked.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153208Z" creationid="makenowjust" creationdate="20200419T153037Z">
        <seg>コンパイラは&lt;g1&gt;CRYSTAL_LIBRARY_PATH&lt;/g1&gt;という環境変数を、静的もしくは動的にリンクするライブラリを最初に探索する場所とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will always do this for classes under the same hierarchy: it will find the first superclass that's not `Reference` from which all types inherit from.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033013Z" creationid="hirofumiwakasugi" creationdate="20150910T032332Z">
        <seg>コンパイラは、すべての型の継承元である `Reference` を例外として、同一階層下のクラスであれば常にこのように解釈します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will automatically declare a `status_ptr` variable of type `Int32`, because the argument is an `Int32*`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044028Z" creationid="hirofumiwakasugi" creationdate="20151005T044005Z">
        <seg>このとき、引数が `Int32*` であるため、コンパイラは自動的に `Int32` 型の `status_ptr` 変数を宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The compiler will even give an error if you first use a variable assuming it has a type and later you change that type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043743Z" creationid="hirofumiwakasugi" creationdate="20150905T043651Z">
        <seg>さらに、後から変数の型を変更されるときには、変更する前の時点でも同様のエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The components of a program are:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055543Z" creationid="akiji" creationdate="20200428T055543Z">
        <seg>プログラムを構成するコンポーネントは以下の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition is first tested and, if *truthy*, the body is executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052059Z" creationid="hirofumiwakasugi" creationdate="20150905T052059Z">
        <seg>まず条件に対して判定が行われ、もし「真」であれば本体が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The condition is first tested and, if &lt;g1&gt;truthy&lt;/g1&gt;, the body is executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094757Z" creationid="makenowjust" creationdate="20200424T094757Z">
        <seg>まず条件式に対して判定が行なわれて、&lt;g1&gt;真であった&lt;/g1&gt;ときに本体が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default formatter outputs the file and line style command for failing specs which makes it easy to rerun just this individual spec.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T235201Z" creationid="akiji" creationdate="20200518T065607Z">
        <seg>デフォルトのフォーマッタは、失敗したspecについて、後でそのsepcだけを再テストしやすいように、ファイル名と行数を含んだ形式のコマンド例を出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default receiver within a captured block can't be changed by using `with ... yield`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062029Z" creationid="hirofumiwakasugi" creationdate="20150918T062028Z">
        <seg>捕捉されたブロック内のデフォルトのレシーバは、`with ... yield` を使用して変更することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value can be overwritten:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024400Z" creationid="hirofumiwakasugi" creationdate="20150914T024252Z">
        <seg>それらのデフォルト値を上書きすることも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is extracted from &lt;g2&gt;shard.yml&lt;/g2&gt; if available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162642Z" creationid="makenowjust" creationdate="20200419T162547Z">
        <seg>可能な場合&lt;g2&gt;shard.yml&lt;/g2&gt;にある名前をデフォルト値として利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The default value is extracted from current git commit or &lt;g2&gt;shard.yml&lt;/g2&gt; if available.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162753Z" creationid="makenowjust" creationdate="20200419T162753Z">
        <seg>可能な場合&lt;g2&gt;shard.yml&lt;/g2&gt;に指定されたものかgitのコミットからバージョンを取り出します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definition of an object boils down to these points:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T012919Z" creationid="hirofumiwakasugi" creationdate="20150904T012820Z">
        <seg>オブジェクトの定義は、突き詰めると以下に要約することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The definitions of "concurrency" and "parallelism" sometimes get mixed up, but they are not the same.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T145820Z" creationid="akiji" creationdate="20200428T053338Z">
        <seg>しばしば混同されますが、「並行処理（concurrency）」と「並列処理（parallelism）」という言葉の定義は同じではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The delimiter character &lt;g1&gt;/&lt;/g1&gt; must be escaped inside slash-delimited regular expression literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T041224Z" creationid="makenowjust" creationdate="20200421T041137Z">
        <seg>区切り文字である &lt;g1&gt;/&lt;/g1&gt; は正規表現中ではエスケープされる必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The differences between a struct and a class are:
* Invoking `new` on a struct allocates it on the stack instead of the heap
* A struct is [passed by value](http://crystal-lang.org/api/Value.html) while a class is passed by reference
* A struct implicitly inherits from [Struct](http://crystal-lang.org/api/Struct.html), which inherits from [Value](http://crystal-lang.org/api/Value.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T054126Z" creationid="hirofumiwakasugi" creationdate="20150913T053835Z">
        <seg>構造体とクラスには以下の違いがあります。
* 構造体に対して `new` を実行するとヒープではなくスタック領域が割り当てられる
* クラスが参照渡しであるのに対して、構造体は[値渡し](http://crystal-lang.org/api/Value.html)である
* 構造体は暗黙的に [Struct](http://crystal-lang.org/api/Struct.html) を継承し、Struct は [Value](http://crystal-lang.org/api/Value.html) を継承している。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation for &lt;g1&gt;Child#id&lt;/g1&gt; would be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214138Z" creationid="makenowjust" creationdate="20200412T214138Z">
        <seg>&lt;g1&gt;Child#id&lt;/g1&gt;のドキュメントは次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation for &lt;g1&gt;Unicorn#name&lt;/g1&gt; would be:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213941Z" creationid="makenowjust" creationdate="20200412T213315Z">
        <seg>&lt;g1&gt;Unicorn#name&lt;/g1&gt;のドキュメントは次のようになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation of a method is included into the method summary and the method details.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211714Z" creationid="makenowjust" creationdate="20200412T211714Z">
        <seg>メソッドのドキュメントは、メソッドの概要、およびメソッドの詳細の内容となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The documentation of the function says:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043407Z" creationid="hirofumiwakasugi" creationdate="20151005T043407Z">
        <seg>この関数のドキュメントは以下の内容です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The entire API docs are also stored as a JSON document in &lt;g4&gt;$output_dir/index.json&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162112Z" creationid="makenowjust" creationdate="20200419T162107Z">
        <seg>API ドキュメント全体は JSON として &lt;g4&gt;$output_dir/index.json&lt;/g4&gt; に保存されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The entrypoint &lt;g3&gt;docs/index.html&lt;/g3&gt; can be opened by any web browser.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162021Z" creationid="makenowjust" creationdate="20200419T162021Z">
        <seg>Web ブラウザで見る際のエントリーポイントは &lt;g3&gt;docs/index.html&lt;/g3&gt; になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The enum's body contains the values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024231Z" creationid="hirofumiwakasugi" creationdate="20150914T024231Z">
        <seg>Enum はその本体に値を持ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event loop is currently implemented with &lt;g1&gt;libevent&lt;/g1&gt;, which is an abstraction of other event mechanisms like &lt;g2&gt;epoll&lt;/g2&gt; and &lt;g3&gt;kqueue&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063308Z" creationid="akiji" creationdate="20200428T063308Z">
        <seg>現時点では、イベントループは&lt;g2&gt;epoll&lt;/g2&gt;や&lt;g3&gt;kqueue&lt;/g3&gt;と言ったイベント方式を抽象化した&lt;g1&gt;libevent&lt;/g1&gt;を使用して実装されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The event loop: which is another fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T063024Z" creationid="akiji" creationdate="20200428T063024Z">
        <seg>イベントループ（別のファイバ）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The expression &lt;g4&gt;"sum: #{a} + #{b} = #{a + b}"&lt;/g4&gt; is equivalent to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192844Z" creationid="makenowjust" creationdate="20200419T192844Z">
        <seg>式&lt;g4&gt;"sum: #{a} + #{b} = #{a + b}"&lt;/g4&gt;は次に等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The file's contents are explained in the &lt;g5&gt;&lt;g6&gt;Writing a Shard&lt;/g6&gt; guide&lt;/g5&gt; and a detailed description of the file format is provided by the &lt;g7&gt;shard.yml specification&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173857Z" creationid="makenowjust" creationdate="20200419T173814Z">
        <seg>そのファイル内容は&lt;g5&gt;&lt;g6&gt;Shardの書き方&lt;/g6&gt;というガイド&lt;/g5&gt;で説明されていて、詳細な説明は&lt;g7&gt;shard.yml の仕様 (英語)&lt;/g7&gt;にあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first alternative is long and cumbersome, while the second one is much easier.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050605Z" creationid="hirofumiwakasugi" creationdate="20150909T050605Z">
        <seg>最初の方法は非常に時間がかかり面倒ですが、それに比べて2番目の方法ずっとは簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first argument is either &lt;g1&gt;lib&lt;/g1&gt; or &lt;g2&gt;app&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161107Z" creationid="makenowjust" creationdate="20200419T161107Z">
        <seg>最初の引数は&lt;g1&gt;lib&lt;/g1&gt;か&lt;g2&gt;app&lt;/g2&gt;のいずれかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first call's value is 3 because the last expression of the `twice` method is `yield`, which gets the value of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024826Z" creationid="hirofumiwakasugi" creationdate="20150916T024826Z">
        <seg>最初の呼び出しのときの値は、`twice` メソッドが `yield` されているため、ブロックの値である3になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first one creates a TCPServer, accepts one connection and reads lines from it, sending them to the channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103723Z" creationid="akiji" creationdate="20200429T132835Z">
        <seg>1つ目のファイバはTCPサーバを立ててコネクションを1つ受け入れ、そこから行を読み込んでチャネルに渡すもの。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fix is easy, we can use a [type restriction](type_restrictions.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063731Z" creationid="hirofumiwakasugi" creationdate="20150912T063517Z">
        <seg>これは簡単に修正できます。[型制約](type_restrictions.html)を利用すればいいのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following environment variables are used by the Crystal compiler if set in the environment.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170016Z" creationid="makenowjust" creationdate="20200419T170016Z">
        <seg>これらの環境変数は、もしセットされていれば Crystal のコンパイラによって利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following options can be combined to filter the list of specs to run.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164935Z" creationid="makenowjust" creationdate="20200419T164539Z">
        <seg>次のオプションは実行する spec の一覧をフィルターするために組み合わせられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The following works just fine:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122930Z" creationid="hirofumiwakasugi" creationdate="20150904T122836Z">
        <seg>つまり、以下の場合でも問題なく動作します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The formatter is also fast, so very little time is lost if you format the
entire project instead of a single file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220434Z" creationid="makenowjust" creationdate="20200412T220434Z">
        <seg>フォーマッタは十分に早く、もし単一のファイルでなくプロジェクト全体のフォーマットをしたとしても、損う時間はほとんどありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The former includes only the first line, the latter includes the entire documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144131Z" creationid="hirofumiwakasugi" creationdate="20151010T135852Z">
        <seg>前者が含むのは最初の1行のみで、後者はドキュメント全体を含みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The fourth rule is the second rule applied to the third rule.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090441Z" creationid="makenowjust" creationdate="20200427T090429Z">
        <seg>4番目の規則は2番目の規則に3番目の規則を適用したものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The generated code must
be valid Crystal code, meaning that you can't for example generate
a `def` without a matching `end`, or a single `when` expression of a
`case`, since both of them are not complete valid expressions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015414Z" creationid="hirofumiwakasugi" creationdate="20151001T014916Z">
        <seg>生成されたコードは正しい Crystal コードでなくてはいけません。例えば、対応する `end` のない `def` や、`case` の `when` 式単体のものなどは、完全な式として正しいものではないので生成することができません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The generic type arguments for keys &lt;g1&gt;K&lt;/g1&gt; and values &lt;g2&gt;V&lt;/g2&gt; are inferred from the types of the keys or values inside the literal, respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175514Z" creationid="makenowjust" creationdate="20200420T175514Z">
        <seg>キーの型の &lt;g1&gt;K&lt;/g1&gt; と値の型の &lt;g2&gt;V&lt;/g2&gt; というジェネリック型引数は、それぞれリテラル中のキーと値の型から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The heredoc starts in the following line and ends with the next line that starts with the heredoc identifier (ignoring leading whitespace) and is either followed by a newline or a non-alphanumeric character.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T033757Z" creationid="makenowjust" creationdate="20200420T033551Z">
        <seg>ヒアドキュメントは続く行から開始して、最初に指定した識別子のみを含む行 (先頭の空白は無視されます) で終了します。また、ヒアドキュメントのあとには改行の他にアルファベットと数字の文字以外の文字が続く場合があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The hierarchy graph now shows:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054227Z" creationid="hirofumiwakasugi" creationdate="20150905T054227Z">
        <seg>このプログラムの階層グラフは以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The identifier may optionally be enclosed in double quotes (&lt;g2&gt;"&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171049Z" creationid="makenowjust" creationdate="20200420T171049Z">
        <seg>識別子の部分はダブルクォート (&lt;g2&gt;"&lt;/g2&gt;) で囲むこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The install command may fail if a locked version doesn't match a requirement, but may succeed if a new dependency was added, as long as it doesn't generate a conflict, thus generating a new &lt;g2&gt;shard.lock&lt;/g2&gt; file.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181020Z" creationid="makenowjust" creationdate="20200419T180911Z">
        <seg>ロックされたバージョンが要求に一致しない場合、コマンドは失敗することがあります。しかし、衝突することなく新しい依存関係を追加できれば、新たな&lt;g2&gt;shard.lock&lt;/g2&gt;ファイルを生成してコマンドは成功します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The installed versions are written into a &lt;g3&gt;shard.lock&lt;/g3&gt; file for using the exact same dependency versions when running &lt;g4&gt;shards install&lt;/g4&gt; again.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174033Z" creationid="makenowjust" creationdate="20200419T174033Z">
        <seg>&lt;g4&gt;shards install&lt;/g4&gt;がもう一度実行されたときに同じバージョンがインストールされるために、インストールしたバージョンは&lt;g3&gt;shard.lock&lt;/g3&gt;に書き出されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language comes with other &lt;g1&gt;syntax&lt;/g1&gt; as well to create arrays, hashes, ranges, tuples and more:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170236Z" creationid="makenowjust" creationdate="20200413T162646Z">
        <seg>Crystalはその他にも多くの&lt;g1&gt;シンタックス&lt;/g1&gt;があります。例えば配列やハッシュ、そして範囲やタプルなどです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The language comes with other [syntax](../syntax_and_semantics/literals.html) as well to create arrays, hashes, ranges, tuples and more:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072711Z" creationid="hirofumiwakasugi" creationdate="20150901T072711Z">
        <seg>Crystal にはその他にも多くの[シンタックス](../syntax_and_semantics/literals.html)があります。例えば、array や hash、そして range や tuple などです</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The latest files can be found on the Releases page at GitHub: https://github.com/manastech/crystal/releases</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055658Z" creationid="hirofumiwakasugi" creationdate="20150831T055658Z">
        <seg>最新のファイルは [GitHub のリリースページ](https://github.com/manastech/crystal/releases)から入手することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The list of valid call conventions is:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074512Z" creationid="hirofumiwakasugi" creationdate="20150919T074401Z">
        <seg>有効な呼出規約は以下のとおりです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The literal &lt;g1&gt;x..y&lt;/g1&gt; is semantically equivalent to the explicit constructor &lt;g2&gt;Range.new(x, y)&lt;/g2&gt; and &lt;g3&gt;x...y&lt;/g3&gt; to &lt;g4&gt;Range.new(x, y, true)&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035300Z" creationid="makenowjust" creationdate="20200421T035300Z">
        <seg>明示的にコンストラクタを呼ぶ場合、&lt;g1&gt;x..y&lt;/g1&gt; は &lt;g2&gt;Range.new(x, y)&lt;/g2&gt; と等しく、 &lt;g3&gt;x...y&lt;/g3&gt; は&lt;g4&gt;Range.new(x, y, true)&lt;/g4&gt; と等しいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The lookup goes like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145808Z" creationid="hirofumiwakasugi" creationdate="20150905T145642Z">
        <seg>ファイルの探索は以下の流れで処理されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main fiber reads the first 3 messages sent to the channel, either from the socket or stdin, then the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103726Z" creationid="akiji" creationdate="20200429T133441Z">
        <seg>メインファイバは、ソケットから読み込まれたのか標準入力から読み込まれたのかにかかわらず、チャネルに渡されたメッセージを3回読み込んだら終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The main trick is to use a generic type to avoid runtime method dispatch.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T073247Z" creationid="hirofumiwakasugi" creationdate="20150912T073219Z">
        <seg>これは、ジェネリック型を利用することで、実行時にメソッドのディスパッチが発生しないようにするということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The method &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt; will &lt;g3&gt;pause&lt;/g3&gt; the execution of the application, until the user finishes entering the input (pressing the &lt;g4&gt;Enter&lt;/g4&gt; key).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182042Z" creationid="makenowjust" creationdate="20200413T182025Z">
        <seg> &lt;g1&gt;&lt;g2&gt;gets&lt;/g2&gt;&lt;/g1&gt;メソッドはアプリケーションの実行を、ユーザーの入力が終了する (&lt;g4&gt;Enter&lt;/g4&gt;が押される) まで&lt;g3&gt;停止&lt;/g3&gt;させます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The need for this cast is even more rare than the previous one, but allows to implement some core types (like String) in Crystal itself, and it also allows passing a Reference type to C functions by casting it to a void pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T022518Z" creationid="hirofumiwakasugi" creationdate="20150930T022200Z">
        <seg>このキャストが必要になるケースは前述のものよりも稀です。ただ、これによって (String などの) コアとなる型を Crystal 自身で実装することが可能になっており、また、Reference 型を void ポインタにキャストすることで C の関数に渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The new compiler will be placed at `.build/crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060627Z" creationid="hirofumiwakasugi" creationdate="20150831T060619Z">
        <seg>ビルドされたコンパイラは `.build/crystal` に格納されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next section talks about the `.class` suffix in type restrictions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025355Z" creationid="hirofumiwakasugi" creationdate="20150908T025355Z">
        <seg>次のセクションで型制約における `.class` サフィックスについて記載します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The next sections will assume you know what [object oriented programming](http://en.wikipedia.org/wiki/Object-oriented_programming) is, as well as the concepts of [classes](http://en.wikipedia.org/wiki/Class_%28computer_programming%29) and [methods](http://en.wikipedia.org/wiki/Method_%28computer_programming%29).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T024543Z" creationid="hirofumiwakasugi" creationdate="20150904T012446Z">
        <seg>この章では、[クラス](http://en.wikipedia.org/wiki/Class_%28computer_programming%29)や[メソッド](http://en.wikipedia.org/wiki/Method_%28computer_programming%29)といった[オブジェクト指向プログラミング](http://en.wikipedia.org/wiki/Object-oriented_programming)についての基本的な知識を持っていることを前提としています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The number of arguments must match the proc's type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172007Z" creationid="hirofumiwakasugi" creationdate="20150902T021953Z">
        <seg>そのとき引数の型は Proc の型と一致している必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only difference is that the first error message is a little more clear, but both definitions are safe in that you will get a compile time error anyway.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013509Z" creationid="hirofumiwakasugi" creationdate="20150908T013300Z">
        <seg>前者のエラーメッセージの方がより明快であるという少しの違いはあるものの、コンパイル時にエラーが発生するという点では、これらはどちらも安全な定義のしかたであると言えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only falsey values are &lt;g1&gt;nil&lt;/g1&gt;, &lt;g2&gt;false&lt;/g2&gt; and null pointers (pointers whose memory address is zero).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060546Z" creationid="makenowjust" creationdate="20200424T060546Z">
        <seg>&lt;g1&gt;nil&lt;/g1&gt;と&lt;g2&gt;false&lt;/g2&gt;そしてヌルポインタ (メモリのアドレスが0のポインタ) のみが偽の値となり、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only falsey values are `nil`, `false` and null pointers (pointers whose memory address is zero).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T005747Z" creationid="hirofumiwakasugi" creationdate="20150903T005731Z">
        <seg>`nil` と `false`、そしてヌルポインタ (メモリのアドレスが0のポインタ) のみが偽の値となり、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The only way to create a Symbol is by using a symbol literal, denoted by a colon (&lt;g1&gt;:&lt;/g1&gt;) followed by an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T171027Z" creationid="makenowjust" creationdate="20200420T171027Z">
        <seg>シンボルを生成する唯一の方法はシンボルリテラルを使うことです。それは、コロン (&lt;g1&gt;:&lt;/g1&gt;) のあとに識別子を続けて記述します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The output file has the same name as the source file minus the extension &lt;g3&gt;.cr&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150601Z" creationid="makenowjust" creationdate="20200419T150601Z">
        <seg>出力されるファイルのファイル名はソースコードのファイル名から&lt;g3&gt;.cr&lt;/g3&gt;という拡張子を除いたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The passed arguments become a [Tuple](http://crystal-lang.org/api/Tuple.html) in the method's body:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042155Z" creationid="hirofumiwakasugi" creationdate="20150907T042150Z">
        <seg>渡された引数はメソッドの中で[タプル (Tuple)](http://crystal-lang.org/api/Tuple.html) として扱うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pipe (`|`) in types creates a union type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010514Z" creationid="hirofumiwakasugi" creationdate="20151009T010514Z">
        <seg>型でパイプ (`|`) を使うと、型の組み合わせ (ユニオン型) となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The port of the HTTP server is set by using the method bind_tcp on the object HTTP::Server (the port set to 8080).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162432Z" creationid="makenowjust" creationdate="20200413T162059Z">
        <seg>HTTP サーバーのポート番号は HTTP::Server オブジェクトの bind_tcp メソッドによってセットされます (ポート番号を 8080 にセット)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The problem is that there's only one variable &lt;g1&gt;i&lt;/g1&gt; that all spawned fibers refer to, and when &lt;g2&gt;Fiber.yield&lt;/g2&gt; is executed its value is 10.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103356Z" creationid="akiji" creationdate="20200428T080252Z">
        <seg>ここでの問題は、1つの変数 &lt;g1&gt;i&lt;/g1&gt; を全てのファイバが参照していて、&lt;g2&gt;Fiber.yield&lt;/g2&gt; が実行された頃にはその値が10になってしまっている点です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program is a global object in which you can define types, methods and file-local variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015126Z" creationid="hirofumiwakasugi" creationdate="20150904T015126Z">
        <seg>プログラムはそれ自体がグローバルオブジェクトです。その中で、型やメソッド、そしてファイルローカルな変数の定義を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The program’s source code must be encoded in UTF-8.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050358Z" creationid="hirofumiwakasugi" creationdate="20150901T050314Z">
        <seg>プログラムのソースコードは UTF-8 でエンコードされている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method &lt;g1&gt;nil?&lt;/g1&gt; determines whether an expression's runtime type is &lt;g2&gt;Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="tobias" changedate="20200501T143151Z" creationid="tobias" creationdate="20200501T143151Z">
        <seg>&lt;g1&gt;nil?&lt;/g1&gt;という疑似メソッドを使うと、ある式の実行時の型が&lt;g2&gt;Nil&lt;/g2&gt;かどうかを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method `is_a?` determines whether a type inherits or includes another type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013807Z" creationid="hirofumiwakasugi" creationdate="20150930T005326Z">
        <seg>`is_a?` という擬似メソッドを使うと、ある他の型を継承、もしくはインクルードしていることを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The pseudo-method `responds_to?` determines whether a type has a method with the given name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013857Z" creationid="hirofumiwakasugi" creationdate="20150930T013756Z">
        <seg>`responds_to?` という擬似メソッドを使うと、ある名前のメソッドを持っているかどうかを判定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The real reason the compiler does this is to be able to compile programs faster by not creating all kinds of different similar unions, also making the generated code smaller in size.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010333Z" creationid="hirofumiwakasugi" creationdate="20150910T033359Z">
        <seg>コンパイラがこの仕様となっている本当の理由は、同じ種類の型の組み合わせ (ユニオン型) をいくつも作らないことでプログラムのコンパイルを高速化し、生成されたコードのサイズを小さくするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for this is that a fiber is not executed as soon as it is spawned.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T074717Z" creationid="akiji" creationdate="20200428T074717Z">
        <seg>その理由は、ファイバーが生成された時点で即座に実行されるわけではないためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason for this is that performance without full optimizations is still pretty good and provides fast compile times, so you can use the `crystal` command almost as if it were an interpreter.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072131Z" creationid="hirofumiwakasugi" creationdate="20150901T072131Z">
        <seg>このような動作となっている理由は、完全最適化をしない場合にも、ある程度十分なパフォーマンスを維持したままで高速なコンパイルが可能であるため、まるでインタープリタのように `crystal` コマンドを使用することができるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The reason why &lt;g1&gt;socket.gets&lt;/g1&gt; and &lt;g2&gt;sleep&lt;/g2&gt; behave like this is because their implementations talk directly with the Runtime Scheduler and the Event Loop, there's nothing magical about it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T071126Z" creationid="akiji" creationdate="20200428T071126Z">
        <seg>&lt;g1&gt;socket.gets&lt;/g1&gt;や&lt;g2&gt;sleep&lt;/g2&gt;がこのように動作する理由は、それらがラインタイムスケジューラやイベントループと直接会話できるように実装されているからで、魔法でもなんでもありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The recommended thing to do is to use enums whenever possible, only use symbols for the internal implementation of an API, and avoid symbols for public APIs.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012608Z" creationid="hirofumiwakasugi" creationdate="20150916T012326Z">
        <seg>したがって、Enum を利用できるときには常に Enum を利用することを推奨します。シンボルを使うのは API の内部的な実装に留めて、公開する API ではシンボルを使わないようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The result of the last expression is `2` because the last expression of the `transform` method is `yield`, whose value is the last expression of the block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024256Z" creationid="hirofumiwakasugi" creationdate="20150916T024256Z">
        <seg>この最後の式の実行結果は `2` になります。`transform` メソッドの最後の式は `yield` であり、そしてその値はブロックの最後の式の値になるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024720Z" creationid="hirofumiwakasugi" creationdate="20150909T024710Z">
        <seg>戻り値の型は[型文法](type_grammar.html)の記法にしたがいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The return type is inferred from the proc's body.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171338Z" creationid="hirofumiwakasugi" creationdate="20150902T021428Z">
        <seg>戻り値の型は Proc の内容から推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The same &lt;g1&gt;escaping&lt;/g1&gt; and &lt;g2&gt;interpolation rules&lt;/g2&gt; apply as for regular strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172608Z" creationid="makenowjust" creationdate="20200422T172608Z">
        <seg>&lt;g1&gt;エスケープシーケンス&lt;/g1&gt;と&lt;g2&gt;補間&lt;/g2&gt;は通常の文字列と同様に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The scheduler has a queue of:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062922Z" creationid="akiji" creationdate="20200428T062922Z">
        <seg>ランタイムスケジューラは以下のキューを持っています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second call's value is "hello" because a `break` was performed.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024925Z" creationid="hirofumiwakasugi" creationdate="20150916T024913Z">
        <seg>一方で2番目の呼び出しでは、`break` が実行されているために値が "hello" となっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second fiber is executed, there's a value on the channel, it's obtained, and execution continues, first with the first fiber, then with the main fiber, because &lt;g2&gt;Fiber.yield&lt;/g2&gt; puts a fiber at the end of the execution queue.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103732Z" creationid="akiji" creationdate="20200429T142452Z">
        <seg>2つ目のファイバが実行されると、チャネルにすでに値があるのでそれを受け取って実行を続け、その後まず1つ目のファイバが実行され、最後にメインファイバが実行されます。こうした順序になる理由は、&lt;g2&gt;Fiber.yield&lt;/g2&gt;がそのファイバを実行キューの最後に置くためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second rule is very convenient because of the typical directory structure of a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155844Z" creationid="hirofumiwakasugi" creationdate="20150905T155824Z">
        <seg>特に2番目のルールは、プロジェクトの典型的なデイレクトリ構造にマッチしているためとても便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second rule means that in addition to having this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085850Z" creationid="makenowjust" creationdate="20200427T085319Z">
        <seg>2番目の規則は、次のようになっているときに、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The semantic for `next` and `return` inside captured blocks [might swap in the future](https://github.com/manastech/crystal/issues/420).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062022Z" creationid="hirofumiwakasugi" creationdate="20150918T062022Z">
        <seg>捕捉されたブロックにおける `next` と `return` の動作は[将来的に入れ替わるかもしれません](https://github.com/manastech/crystal/issues/420)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The shards command</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T172801Z" creationid="makenowjust" creationdate="20200419T172801Z">
        <seg>shards コマンド</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The special variable &lt;g1&gt;$?&lt;/g1&gt; holds the exit status of the command as a &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172819Z" creationid="makenowjust" creationdate="20200422T172742Z">
        <seg>特殊変数 &lt;g1&gt;$?&lt;/g1&gt; はコマンドの実行結果の &lt;g2&gt;&lt;g3&gt;Process::Status&lt;/g3&gt;&lt;/g2&gt; オブジェクトになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library defines the [LibC](https://github.com/manastech/crystal/blob/master/src/libc.cr) lib with aliases for common C types, like `int`, `short`, `size_t`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042542Z" creationid="hirofumiwakasugi" creationdate="20151005T042542Z">
        <seg>標準ライブラリには [LibC](https://github.com/manastech/crystal/blob/master/src/libc.cr) ライブラリが定義されており、`int`/`short`/`size_t` といった一般的な C の型のエイリアスを提供しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library usually doesn't have a namespace as its types and methods are very common, to avoid writing long names.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T132615Z" creationid="hirofumiwakasugi" creationdate="20150911T131641Z">
        <seg>ただし、標準ライブラリには基本的に名前空間が設定されていません。これは、標準ライブラリの型やメソッドはごく一般的に利用されるものなので、そのたびに長い名前を書かずに済むようにするためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The standard library usually provides a couple of methods to accomplish something: one raises, one returns `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023812Z" creationid="hirofumiwakasugi" creationdate="20150907T023528Z">
        <seg>そこで、標準ライブラリでは、例外を発生する方法に加えて、`nil` を返す方法も用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The supported flag keywords are:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214450Z" creationid="makenowjust" creationdate="20200412T214450Z">
        <seg>次のキーワードがサポートされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The techniques described above for instance variables will also work for proc and method calls.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021445Z" creationid="hirofumiwakasugi" creationdate="20150903T021336Z">
        <seg>こういった Proc やメソッド呼び出しの場合にも、上記でインスタンス変数に関して記載したテクニックが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ternary &lt;g1&gt;if&lt;/g1&gt; allows writing an &lt;g2&gt;if&lt;/g2&gt; in a shorter way:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080927Z" creationid="makenowjust" creationdate="20200424T080927Z">
        <seg>&lt;g2&gt;if&lt;/g2&gt;をより簡潔に書く方法として、3項演算子という構文があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The ternary `if` allows writing an `if` in a shorter way:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013720Z" creationid="hirofumiwakasugi" creationdate="20150903T013720Z">
        <seg>3項演算子を使うことで、`if` 文をより簡潔に書くことが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The third rule is very convenient because of the typical directory structure of a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090051Z" creationid="makenowjust" creationdate="20200427T090051Z">
        <seg>3番目の規則はプロジェクトの典型的なディレクトリ構造にマッチしているためとても便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The time is #{Time.local}"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162735Z" creationid="makenowjust" creationdate="20200413T162735Z">
        <seg>The time is #{Time.local}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The time is #{Time.local}"
end

address = server.bind_tcp 8080
puts "Listening on http://#{address}"
server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161816Z" creationid="makenowjust" creationdate="20200413T161816Z">
        <seg>The time is #{Time.local}"
end

address = server.bind_tcp 8080
puts "Listening on http://#{address}"
server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type after the `uninitialized` keyword follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061700Z" creationid="hirofumiwakasugi" creationdate="20160204T061700Z">
        <seg>`uninitialized` キーワードに続く型は[型文法](type_grammar.html)にしたがって書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type after the two colons (`::`) follows the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120341Z" creationid="hirofumiwakasugi" creationdate="20150906T115851Z">
        <seg>2つのコロン (`::`) に続く型は[型文法](type_grammar.html)にしたがって書きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type arguments can be explicitly specified as part of the type name:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173756Z" creationid="makenowjust" creationdate="20200420T173756Z">
        <seg>型引数は型名の部分で明示的に指定することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of `proc` is [Proc(Int32, Int32)](http://crystal-lang.org/api/Proc.html), a function that accepts a single `Int32` argument and returns an `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061901Z" creationid="hirofumiwakasugi" creationdate="20150916T040308Z">
        <seg>このとき、`proc` の型は [Proc(Int32, Int32)](http://crystal-lang.org/api/Proc.html) で、単一の `Int32` の引数を受け取り、`Int32` の戻り値を返す関数となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of a variable after a &lt;g1&gt;while&lt;/g1&gt; depends on the type it had before the &lt;g2&gt;while&lt;/g2&gt; and the type it had before leaving the &lt;g3&gt;while&lt;/g3&gt;'s body:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095118Z" creationid="makenowjust" creationdate="20200424T095118Z">
        <seg>&lt;g1&gt;while&lt;/g1&gt;を実行したあとの変数の型は、&lt;g2&gt;while&lt;/g2&gt;以前の型と、&lt;g3&gt;while&lt;/g3&gt;を抜ける直前の型によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of a variable after a `while` depends on the type it had before the `while` and the type it had before leaving the `while`'s body:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052141Z" creationid="hirofumiwakasugi" creationdate="20150905T052141Z">
        <seg>`while` の後である変数の型が何であるかは、`while` 以前の型と、そして `while` の本体を抜ける前の型によって決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of an enum member is `Int32` by default, even if you specify a different type in a constant value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053220Z" creationid="hirofumiwakasugi" creationdate="20151007T053220Z">
        <seg>enum の要素の型はデフォルトで `Int32` です。これは、定数の値に別の型を指定した場合であっても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of the value is `Int32` by default but can be changed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024636Z" creationid="hirofumiwakasugi" creationdate="20150914T024636Z">
        <seg>デフォルトでは値は `Int32` 型ですが、変更することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The type of this variable is `TypeNode`, which gives you access to type information at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041330Z" creationid="hirofumiwakasugi" creationdate="20151001T041330Z">
        <seg>この変数の型は `TypeNode` で、コンパイル時の型情報にアクセスすることを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the arguments are mandatory, except when directly sending a proc literal to a lib &lt;g1&gt;fun&lt;/g1&gt; in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171259Z" creationid="makenowjust" creationdate="20200422T171259Z">
        <seg>引数の型指定は必須です。ただし、C原語バインディングの &lt;g1&gt;fun&lt;/g1&gt; に対して直接 Proc リテラルを渡すときだけは例外です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The types of the arguments are mandatory, except when directly sending a proc literal to a lib `fun` in C bindings.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021347Z" creationid="hirofumiwakasugi" creationdate="20150902T021123Z">
        <seg>引数の型指定は必須です。ただし、C バインディングでライブラリの `fun` に直接 Proc リテラルを渡すときだけは例外です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore &lt;g1&gt;_&lt;/g1&gt; before the suffix is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182543Z" creationid="makenowjust" creationdate="20200419T182543Z">
        <seg>サフィックスの前のアンダースコア (&lt;g1&gt;_&lt;/g1&gt;) はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The underscore `_` before the suffix is optional.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052345Z" creationid="hirofumiwakasugi" creationdate="20150901T052342Z">
        <seg>サフィックスの前のアンダースコア (`_`) はオプションです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The usual convention is to provide an alternative "question" method to signal that this variant of the method returns `nil` instead of raising.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024200Z" creationid="hirofumiwakasugi" creationdate="20150907T024044Z">
        <seg>慣習として、メソッドが例外を発生させる代わりに `nil` を返すことができる場合は、それを’示すために「? (クエスチョン)」メソッドとして提供することになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The valid types to use in C bindings are:
* Primitive types (`Int8`, ..., `Int64`, `UInt8`, ..., `UInt64`, `Float32`, `Float64`)
* Pointer types (`Pointer(Int32)`, which can also be written as `Int32*`)
* Static arrays (`StaticArray(Int32, 8)`, which can also be written as `Int32[8]`)
* Function types (`Function(Int32, Int32)`, which can also be written as `Int32 -&gt; Int32`)
* Other `struct`, `union`, `enum`, `type` or `alias` declared previously.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042120Z" creationid="hirofumiwakasugi" creationdate="20151005T041850Z">
        <seg>C バインディングで利用できる型は以下の通りです。
* プリミティブ型 (`Int8`, ..., `Int64`, `UInt8`, ..., `UInt64`, `Float32`, `Float64`)
* ポインタ型 (`Pointer(Int32)`, which can also be written as `Int32*`)
* 静的配列 (`StaticArray(Int32, 8)`, which can also be written as `Int32[8]`)
* 関数型 (`Function(Int32, Int32)`, which can also be written as `Int32 -&gt; Int32`)
* その他、事前に宣言されている `struct`/`union`/`enum`/`type`/`alias`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of an &lt;g1&gt;if&lt;/g1&gt; is the value of the last expression found in each of its branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080439Z" creationid="makenowjust" creationdate="20200424T080439Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;は式としても利用できて、その値は評価された分岐節の最後の式の値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of an `if` is the value of the last expression found in each of its branches:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T025825Z" creationid="hirofumiwakasugi" creationdate="20150903T013128Z">
        <seg>`if` は式としても機能し、その値は、該当する分岐節の最後の式の値になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The value of these kinds of variables could potentially be affected by another fiber after the condition was checked, rendering it &lt;g2&gt;nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081847Z" creationid="makenowjust" creationdate="20200424T081847Z">
        <seg>なぜならこれらの変数の値は別のファイバーによって&lt;g2&gt;nil&lt;/g2&gt;に変更される可能性があるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The way this really works is by making each type have a list of ancestors, or parents.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140039Z" creationid="hirofumiwakasugi" creationdate="20150911T134914Z">
        <seg>この仕組みは、それぞれの型に対して、その親や先祖のリストを持たせることで機能しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The whole type definition must be defined separately.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043730Z" creationid="hirofumiwakasugi" creationdate="20150909T043730Z">
        <seg>そのため、その全体を定義するためにはそれぞれ個別に定義する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their type is inferred from their usage, not only from their initializer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060632Z" creationid="hirofumiwakasugi" creationdate="20150902T051932Z">
        <seg>ローカル変数の型は、初期化されるときだけではなく、その用途にしたがって推論されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their type is the combined type of all expressions that were assigned to them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053719Z" creationid="hirofumiwakasugi" creationdate="20150902T053719Z">
        <seg>型は代入された式の型を組み合わせたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Their values can be inspected using &lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170120Z" creationid="makenowjust" creationdate="20200419T170120Z">
        <seg>これらの値は&lt;g1&gt;&lt;g2&gt;crystal env&lt;/g2&gt;&lt;/g1&gt;を使うことで確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then &lt;g2&gt;channel.send(nil)&lt;/g2&gt; is invoked, and so execution continues at &lt;g3&gt;channel.receive&lt;/g3&gt;, which was waiting for a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081343Z" creationid="akiji" creationdate="20200428T081343Z">
        <seg>そして、&lt;g2&gt;channel.send(nil)&lt;/g2&gt; が実行されると、値が渡されるのを待っていた&lt;g3&gt;channel.receive&lt;/g3&gt;が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then `initialize` is invoked on it and then you get the instance.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060852Z" creationid="hirofumiwakasugi" creationdate="20150904T060852Z">
        <seg>そのオブジェクトに対して `initialize` が実行され、初期化されたインスタンスを得ることができる、という流れになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then clone the repository:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060509Z" creationid="hirofumiwakasugi" creationdate="20150831T060509Z">
        <seg>それから、リポジトリをクローンします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then it can be get and set:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053825Z" creationid="hirofumiwakasugi" creationdate="20151007T053825Z">
        <seg>そして、以下のように参照と設定ができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then the main fiber continues executing and finishes, so the program exits without giving the other fiber a chance to print "After send".</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T132442Z" creationid="akiji" creationdate="20200429T132442Z">
        <seg>その後、メインファイバは実行を続けて終了してしまうため、プログラムは "After send" を出力する機会のないまま終了してしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can invoke the compiler by just typing `crystal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060004Z" creationid="hirofumiwakasugi" creationdate="20150831T060004Z">
        <seg>こうしておけば、`crystal` と入力するだけでコンパイラを起動することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you can pass a function (a [Proc](http://crystal-lang.org/api/Proc.html)) like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024247Z" creationid="hirofumiwakasugi" creationdate="20151008T024247Z">
        <seg>それから、以下のように関数 ([Proc](http://crystal-lang.org/api/Proc.html)) を渡すことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then you instantiate it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062105Z" creationid="hirofumiwakasugi" creationdate="20150912T062020Z">
        <seg>これは以下のようにしてインスタンス化します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, add a link in the &lt;g2&gt;SUMMARY.md&lt;/g2&gt; file which acts as the navigation for the language reference.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164919Z" creationid="makenowjust" creationdate="20200413T164919Z">
        <seg>そして、言語リファレンスのナビゲーションである&lt;g2&gt;SUMMARY.md&lt;/g2&gt;にリンクを追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four signed integer types, and four unsigned integer types:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182014Z" creationid="makenowjust" creationdate="20200419T182014Z">
        <seg>4つ符号付き整数型と、4つの符号無し整数型が存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four signed integer types: [Int8](http://crystal-lang.org/api/Int8.html), [Int16](http://crystal-lang.org/api/Int16.html), [Int32](http://crystal-lang.org/api/Int32.html) and [Int64](http://crystal-lang.org/api/Int64.html), being able to represent numbers of 8, 16, 32 and 64 bits respectively.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073354Z" creationid="hirofumiwakasugi" creationdate="20150901T051549Z">
        <seg>符号付き整数 (Integer) 型には4種類のものがあります。それは、[Int8](http://crystal-lang.org/api/Int8.html)、[Int16](http://crystal-lang.org/api/Int16.html)、[Int32](http://crystal-lang.org/api/Int32.html) そして [Int64](http://crystal-lang.org/api/Int64.html)で、それぞれ 8/16/32/64 ビットの数値を表現することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are four unsigned integer types: [UInt8](http://crystal-lang.org/api/UInt8.html), [UInt16](http://crystal-lang.org/api/UInt16.html), [UInt32](http://crystal-lang.org/api/UInt32.html) and [UInt64](http://crystal-lang.org/api/UInt64.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051737Z" creationid="hirofumiwakasugi" creationdate="20150901T051628Z">
        <seg>符号なし整数型にも、[UInt8](http://crystal-lang.org/api/UInt8.html)、[UInt16](http://crystal-lang.org/api/UInt16.html)、[UInt32](http://crystal-lang.org/api/UInt32.html) そして [UInt64](http://crystal-lang.org/api/UInt64.html) の4種類が存在します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are methods to create expectations which test for equivalence (&lt;g1&gt;eq&lt;/g1&gt;), identity (&lt;g2&gt;be&lt;/g2&gt;), type (&lt;g3&gt;be_a&lt;/g3&gt;), and nil (&lt;g4&gt;be_nil&lt;/g4&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234353Z" creationid="akiji" creationdate="20200505T135148Z">
        <seg>等価性(&lt;g1&gt;eq&lt;/g1&gt;)、同一性 (&lt;g2&gt;be&lt;/g2&gt;)、型 (&lt;g3&gt;be_a&lt;/g3&gt;)と nil (&lt;g4&gt;be_nil&lt;/g4&gt;)をテストするためのExpectationを生成するメソッドが用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, &lt;g1&gt;Float32&lt;/g1&gt; and &lt;g2&gt;Float64&lt;/g2&gt;,
which correspond to the &lt;g3&gt;binary32&lt;/g3&gt;
and &lt;g4&gt;binary64&lt;/g4&gt;
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182924Z" creationid="makenowjust" creationdate="20200419T182924Z">
        <seg>浮動小数点数には&lt;g1&gt;Float32&lt;/g1&gt;と&lt;g2&gt;Float64&lt;/g2&gt;という2つ型があり、
それぞれIEEEで定義されている&lt;g3&gt;binary32&lt;/g3&gt;と&lt;g4&gt;binary64&lt;/g4&gt;に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two floating point types, [Float32](http://crystal-lang.org/api/Float32.html) and [Float64](http://crystal-lang.org/api/Float64.html),
which correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)
and [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)
types defined by IEEE.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T073612Z" creationid="hirofumiwakasugi" creationdate="20150901T073309Z">
        <seg>浮動小数点数 (Float) には2つの種類があります。それは、[Float32](http://crystal-lang.org/api/Float32.html) と [Float64](http://crystal-lang.org/api/Float64.html) で、それぞれ IEEE によって定義されている [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format) と [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format) に対応しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are two main topics when building a CLI application:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T163850Z" creationid="makenowjust" creationdate="20200413T163645Z">
        <seg>CLI アプリケーションの開発には、主なトピックが2つあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is also a docker environment to avoid installing dependencies globally:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164714Z" creationid="makenowjust" creationdate="20200413T164714Z">
        <seg>依存関係をシステム全体にインストールしないで、Docker 環境を利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a second fiber reading lines from standard input.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T141816Z" creationid="akiji" creationdate="20200429T133004Z">
        <seg>2つ目のファイバは標準入力から行を読み込むものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's a simpler way to write the above by using an `out` parameter:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043924Z" creationid="hirofumiwakasugi" creationdate="20151005T043854Z">
        <seg>上記は、`out` パラメータを使うことでよりシンプルに書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the alias `LibC::Char` if in doubt.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043234Z" creationid="hirofumiwakasugi" creationdate="20151005T042734Z">
        <seg>もし気になるのであれば、`LibC::Char` というエイリアスが定義されていることを確認してみてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's also the issue that `break` and `next` are not allowed inside captured blocks, so the following won't work when using `&amp;block` forwarding:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032352Z" creationid="hirofumiwakasugi" creationdate="20150917T032352Z">
        <seg>加えて、捕捉されたブロックでは `break` と `next` を使用することができないという問題もあります。例えば、以下は `&amp;block` でフォワーディングした場合には動作しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There, one can spawn many other fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T072617Z" creationid="akiji" creationdate="20200428T055527Z">
        <seg>そして、そのメインファイバは、さらに多くの他のファイバを生成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These applications look awesome!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175416Z" creationid="makenowjust" creationdate="20200413T175416Z">
        <seg>アプリケーションが段々といい感じになってきました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are defined without arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025724Z" creationid="hirofumiwakasugi" creationdate="20150909T025724Z">
        <seg>これらは引数を持たないものとして定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are especially useful when writing [C bindings](c_bindings/index.html), but can be used in any of the above locations.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005940Z" creationid="hirofumiwakasugi" creationdate="20151009T005833Z">
        <seg>これらは特に [C バインディング](c_bindings/index.html)を書くときに有効ですが、上記した箇所であればどこでも利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are handy to write regular expressions that include slashes which would have to be escaped in slash-delimited literals.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042412Z" creationid="makenowjust" creationdate="20200421T042412Z">
        <seg>スラッシュを含むような正規表現を書くのにこれらのリテラルは便利です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are handy to write strings that include double quotes which would have to be escaped in double-quoted strings.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193500Z" creationid="makenowjust" creationdate="20200419T193500Z">
        <seg>ダブルクォートを含むような文字列を書くのにこれらのリテラルはお手軽です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are the only places that are looked up.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T145628Z" creationid="hirofumiwakasugi" creationdate="20150905T145532Z">
        <seg>探索の対象となるディレクトリはこれらのみです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are by default the result of executing `uname -m -s`, split by whitespace and lowercased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T042959Z" creationid="hirofumiwakasugi" creationdate="20150908T042946Z">
        <seg>デフォルトでは、`uname -m -s` を実行した結果を空白で分割し、すべてを小文字にしたものがフラグとなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These flags are generally used in C bindings to conditionally define types and functions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043645Z" creationid="hirofumiwakasugi" creationdate="20150908T043540Z">
        <seg>これらのフラグは、一般的に C 言語のバインディングにおいて、型や関数を条件に応じて定義するときに利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These matchers run a block and pass if it raises a certain exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T141732Z" creationid="akiji" creationdate="20200505T141732Z">
        <seg>以下の例は、ブロックの実行時に特定の例外が発生した場合に合格になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are documented in a ficticious [Macros](http://crystal-lang.org/api/Macros.html) module.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035716Z" creationid="hirofumiwakasugi" creationdate="20151001T035654Z">
        <seg>これらのメソッドは [Macros](http://crystal-lang.org/api/Macros.html) という「フェイクの」モジュールでドキュメント化されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These methods are invoked on the value being tested with an expectation as argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233111Z" creationid="akiji" creationdate="20200505T132731Z">
        <seg>これらのメソッドは、テスト対象となる値に対して、想定される結果を引数として実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These parts of the language are considered unsafe:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012609Z" creationid="hirofumiwakasugi" creationdate="20151009T012440Z">
        <seg>本言語において、以下は安全でない (unsafe) とされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They allow communicating data between fibers without sharing memory and without having to worry about locks, semaphores or other special structures.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T102708Z" creationid="akiji" creationdate="20200428T055322Z">
        <seg>チャネルによって、メモリの共有やロックやセマフォなどといった特別な機構を気にかけることなく、異なるファイバ間でのデータのやりとりが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are constructed using the following literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001142Z" creationid="makenowjust" creationdate="20200414T001142Z">
        <seg>次のようなリテラルで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are constructed using these literals:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051223Z" creationid="hirofumiwakasugi" creationdate="20150901T051038Z">
        <seg>以下のようなリテラルで利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are declared when you first assign them a value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053532Z" creationid="hirofumiwakasugi" creationdate="20150902T051744Z">
        <seg>その宣言は、はじめて値が代入されたときに行われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are explained [here](http://llvm.org/docs/LangRef.html#calling-conventions).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074727Z" creationid="hirofumiwakasugi" creationdate="20150919T074727Z">
        <seg>詳しい説明は[こちら](http://llvm.org/docs/LangRef.html#calling-conventions)の参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are mostly useful for interfacing with C libraries and for low-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T033908Z" creationid="hirofumiwakasugi" creationdate="20150906T033606Z">
        <seg>C 言語ライブラリとのインターフェースや、ローレベルのコードを書くときに役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They are prefixed with two "at" signs (`@@`).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040744Z" creationid="hirofumiwakasugi" creationdate="20150910T040511Z">
        <seg>先頭に2つのアットマーク (`@@`) が付きます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They can also be defined in classes and modules, and are only visible in those scopes.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T015710Z" creationid="hirofumiwakasugi" creationdate="20151001T015616Z">
        <seg>クラスやモジュール内で定義することも可能で、その場合はそれらのスコープ内でのみアクセスできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They must start with a capital letter:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055321Z" creationid="hirofumiwakasugi" creationdate="20150913T055321Z">
        <seg>定数の先頭は大文字である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They need at least to be comparable.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035513Z" creationid="makenowjust" creationdate="20200421T035508Z">
        <seg>2つの型は少なくとも比較可能である方が好ましいです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They return the rescued exception so it can be used for further expectations, for example to verify specific properties of the exception.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200516T101356Z" creationid="akiji" creationdate="20200516T101356Z">
        <seg>これらは発生した例外を返すので、その例外の特定のプロパティをチェックするといった別のテストに使用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They should be separated from
the other arguments by a double dash (&lt;g2&gt;--&lt;/g2&gt;).</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T164331Z" creationid="makenowjust" creationdate="20200419T164236Z">
        <seg>これらは他の引数とは &lt;g2&gt;--&lt;/g2&gt; で区切る必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>They will not be run but show up in the spec report as pending.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T232902Z" creationid="akiji" creationdate="20200505T132204Z">
        <seg>それらは実行されず、spec レポートには pending とだけ記載されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ThirtyTwo = 1 &lt;&lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052948Z" creationid="hirofumiwakasugi" creationdate="20151007T052948Z">
        <seg>ThirtyTwo = 1 &lt;&lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allocates the struct on the stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050014Z" creationid="hirofumiwakasugi" creationdate="20151007T050014Z">
        <seg>これによって、スタックに構造体が割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allocates the union on the stack.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052244Z" creationid="hirofumiwakasugi" creationdate="20151007T052244Z">
        <seg>これによって、スタックに共用体が割り当てられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This allows you to define helper methods in a file that will only be known in that file.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040907Z" creationid="hirofumiwakasugi" creationdate="20150909T040840Z">
        <seg>このことで、あるファイルの中でのみ利用できるヘルパーメソッドを定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also applies when a variable is assigned in an &lt;g1&gt;if&lt;/g1&gt;'s condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081423Z" creationid="makenowjust" creationdate="20200424T081410Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式中で変数への代入が行われた場合にも、この判断がなされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also applies when a variable is assigned in an `if`'s condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014720Z" creationid="hirofumiwakasugi" creationdate="20150903T014453Z">
        <seg>このことは、`if` の条件で変数への代入が行われた場合にも当てはまります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This also happens with regular proc literals, even if it's evident that the proc wasn't invoked or stored:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060135Z" creationid="hirofumiwakasugi" creationdate="20150918T060005Z">
        <seg>これは通常の proc リテラルにも当てはまります。そして、その proc が実行も保持もされないことが明白であっても同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This applies to every class except for `Reference`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031448Z" creationid="hirofumiwakasugi" creationdate="20150910T031441Z">
        <seg>この仕組みは `Reference` を除くすべてのクラスに適用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can also be used to give shorter, nicer names to C functions, as these tend to be long and usually be prefixed with the library name.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041847Z" creationid="hirofumiwakasugi" creationdate="20151005T041831Z">
        <seg>C の関数名は長い傾向があり、ライブラリ名で修飾されている場合が多いため、それらにより短くてわかりやすい名前をつけることにもこれを利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be circumvented by assigning the value to a new local variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082054Z" creationid="makenowjust" creationdate="20200424T082032Z">
        <seg>この制約は値をローカル変数に代入することで回避できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can be used to provide static versions of libraries that are also available as dynamic libraries.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153315Z" creationid="makenowjust" creationdate="20200419T153315Z">
        <seg>これは動的ライブラリとしても有効な、静的なバージョンのライブラリを提供することに使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This can sometimes be useful to avoid repetitive code by actually accessing and reading/writing local variables, but can also overwrite local variables by mistake.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015932Z" creationid="hirofumiwakasugi" creationdate="20151002T015912Z">
        <seg>これは、ローカル変数にアクセスし読み書きする際にコードを繰り返し書くのを避けることに有効ですが、一方で誤ってローカル変数を上書きしてしまう可能性もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This changes the default values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114622Z" creationid="hirofumiwakasugi" creationdate="20150914T114443Z">
        <seg>これを指定するとデフォルトの値が変わります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This command ensures all dependencies are installed, so it is not necessary to run &lt;g2&gt;shards install&lt;/g2&gt; before.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180304Z" creationid="makenowjust" creationdate="20200419T180243Z">
        <seg>このコマンドはビルド前に依存関係をインストールするので、&lt;g2&gt;shards install&lt;/g2&gt;を事前に実行することは必要ではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This command will write &lt;g1&gt;hello&lt;/g1&gt; and subsequently delete all files and folders in the current working directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173213Z" creationid="makenowjust" creationdate="20200422T173213Z">
        <seg>このコマンドは &lt;g1&gt;hello&lt;/g1&gt; と出力したあとに現在のディレクトリのファイルとフォルダを全て削除します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This doesn't happen with block arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080820Z" creationid="akiji" creationdate="20200428T080820Z">
        <seg>こうした問題はブロック引数では発生しません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105524Z" creationid="hirofumiwakasugi" creationdate="20150901T105524Z">
        <seg>このとき、`#{...}` で囲まれた式に対して、`Object#to_s(IO)` が実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This error isn't very frequent, and is usually gone if a `Person` is instantiated before the map call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062320Z" creationid="hirofumiwakasugi" creationdate="20150930T062320Z">
        <seg>このエラーに出会うことはあまりないでしょう。もし `Person` が map の呼び出し前にインスタンス化されていればエラーにはなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This expression is also available in the [type grammar](type_grammar.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063302Z" creationid="hirofumiwakasugi" creationdate="20150930T063230Z">
        <seg>この式は[型文法](type_grammar.html)で利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This fiber wants to sleep for 5 seconds, so the Event Loop is told to continue with this fiber in 5 seconds.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T070307Z" creationid="akiji" creationdate="20200428T070307Z">
        <seg>こちらのファイバは5秒間スリープし、イベントループに5秒経ったらこちらのファイバを再開するよう伝えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file describes the project and lists dependencies that are required to build it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173704Z" creationid="makenowjust" creationdate="20200419T173704Z">
        <seg>このファイルはプロジェクトの説明と、ビルドに必要な依存関係のリストを含んでいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file is used to require &lt;g1&gt;spec&lt;/g1&gt; and other includes like code from the project needed for every spec file.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T072315Z" creationid="akiji" creationdate="20200518T072315Z">
        <seg>このファイルは、&lt;g1&gt;spec&lt;/g1&gt;を require したり、個々のspecファイルが使用するコードをプロジェクト内から取り込むのに使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This form allows you to specify the return type and to check it against the proc's body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021835Z" creationid="hirofumiwakasugi" creationdate="20150902T021555Z">
        <seg>この形式の場合、戻り値の型を指定することができるため、Proc の本体の戻り値が正しい型であるかをチェックすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This has no effect if the method yields.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073222Z" creationid="hirofumiwakasugi" creationdate="20150919T073222Z">
        <seg>メソッドが yield する場合には効果がありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is [unsafe](unsafe.html) code and is almost always used in low-level code for declaring uninitialized [StaticArray](http://crystal-lang.org/api/StaticArray.html) buffers without a peformance penalty:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120114Z" creationid="hirofumiwakasugi" creationdate="20150906T115142Z">
        <seg>これは「安全でない ([unsafe](unsafe.html))」なコードで、特にローレベルなコードにおいて、未初期化の [StaticArray](http://crystal-lang.org/api/StaticArray.html)  バッファをパフォーマンスの劣化なく定義するために使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is `Int#times` definition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032021Z" creationid="hirofumiwakasugi" creationdate="20150916T032021Z">
        <seg>`Int#times` は以下のように定義されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is allowed:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063345Z" creationid="hirofumiwakasugi" creationdate="20150912T063138Z">
        <seg>それは、以下が許されてしまうということです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is also a good place to define global helper methods that make writing specs easier and avoid code duplication.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200521T001103Z" creationid="akiji" creationdate="20200518T072515Z">
        <seg>ここは、コードの重複を排除してspecの記述を容易にするために、テスト全体で利用するヘルパメソッドを置くのにも良い場所です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because a Reference's memory is allocated on the heap and a pointer to it is passed around.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115910Z" creationid="hirofumiwakasugi" creationdate="20150906T035842Z">
        <seg>この理由は、Reference のメモリはヒープに割り当てられ、渡されるのはそこを指すポインタになるためです。
</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because any method call could potentially affect that instance variable, rendering it `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015713Z" creationid="hirofumiwakasugi" creationdate="20150903T015334Z">
        <seg>これは、インスタンス変数はどんなメソッドの実行によっても影響を受ける可能性があるため、それが `nil` になる場合もあるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the &lt;g1&gt;sleep&lt;/g1&gt; call will schedule the main fiber to be executed in a second, and then executes another "ready to execute" fiber, which in this case is the one above.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070530Z" creationid="akiji" creationdate="20200428T075237Z">
        <seg>これは &lt;g1&gt;sleep&lt;/g1&gt;によってメインファイバが1秒後に再開するようスケジューリングされ、その間に他の "実行可能な" （この場合はすぐ上で生成されていた）ファイバが実行されるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because the captured block could have been potentially stored in a global, class or instance variable and invoked in a separate thread in between the instructions.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055727Z" creationid="hirofumiwakasugi" creationdate="20150918T055727Z">
        <seg>この理由は、捕捉されたブロックはグローバル変数やクラス変数、そしてインスタンス変数に保持されることもあり、そして別々のスレッドで実行される可能性もあるためです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because there's nothing relating the `T` in the type with the instance variable `@value`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063635Z" creationid="hirofumiwakasugi" creationdate="20150912T063326Z">
        <seg>これは、`T` の型とインスタンス変数 `@value` の型に関連性がないことが原因です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is because when you invoke `add`, it is instantiated with the types of the arguments: every method invocation with a different type combination results in a different method instantiation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T043530Z" creationid="hirofumiwakasugi" creationdate="20150907T043119Z">
        <seg>この理由は、`add` を実行するとき、そのメソッドは引数の型にしたがって初期化される、ということによります。つまり、異なる型を与えてメソッドを実行すると、メソッドを初期化した結果もそれぞれ異なるものとなるからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is better understood with an example:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061531Z" creationid="hirofumiwakasugi" creationdate="20150918T053648Z">
        <seg>例を見てみるとわかりやすいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called *method overloading*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071037Z" creationid="hirofumiwakasugi" creationdate="20150906T071037Z">
        <seg>これを「メソッドのオーバーロード」と呼びます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is different than the above tuple **type**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011306Z" creationid="hirofumiwakasugi" creationdate="20151009T011306Z">
        <seg>これは上記のタプル**型**とは異なります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is done automatically when &lt;g1&gt;crystal tool format&lt;/g1&gt; is invoked, which
will automatically format all &lt;g2&gt;.cr&lt;/g2&gt; files in current directory.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215625Z" creationid="makenowjust" creationdate="20200412T215625Z">
        <seg>&lt;g1&gt;crystal tool format&lt;/g1&gt;すれば、現在のディレクトリのすべての&lt;g2&gt;.cr&lt;/g2&gt;のドキュメンテーションコメントもフォーマットされます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is everything you can know about an object: its type and whether it responds to some method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T013044Z" creationid="hirofumiwakasugi" creationdate="20150904T012907Z">
        <seg>「型を持っていて、メソッドに応答する」もの。これがオブジェクトです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the [callbacks](c_bindings/callbacks.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073558Z" creationid="hirofumiwakasugi" creationdate="20150919T073555Z">
        <seg>詳細は[コールバック](c_bindings/callbacks.html)のセクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is explained in the [lib](c_bindings/lib.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072357Z" creationid="hirofumiwakasugi" creationdate="20150919T072357Z">
        <seg>詳細は [lib](c_bindings/lib.html) セクションを参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is in general necessary when dealing with a collection of objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T061129Z" creationid="hirofumiwakasugi" creationdate="20150912T060711Z">
        <seg>これは特にオブジェクトのコレクションを扱う場合に必要になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is mostly useful with local variables that change at iterations.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070910Z" creationid="akiji" creationdate="20200428T080804Z">
        <seg>この方法は、繰り返し処理の中でローカル変数の値が変化するような場合には便利な方法です。。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is only possible for reference types and won't work for value types like structs or numbers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234425Z" creationid="akiji" creationdate="20200505T135819Z">
        <seg>これは参照型でのみ利用可能で、structや数値といった値型に対しては使えません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is only true if the expected value points to &lt;g8&gt;the same object&lt;/g8&gt; instead of &lt;g9&gt;an equivalent one&lt;/g9&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T075326Z" creationid="akiji" creationdate="20200505T135706Z">
        <seg>このメソッドは、実際の実行結果が想定した値と&lt;g9&gt;等価な値&lt;/g9&gt;であるだけでなく、&lt;g8&gt;同じオブジェクト&lt;/g8&gt;を指す場合のみ true を返します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the documentation for the Crystal programming language.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T083707Z" creationid="hirofumiwakasugi" creationdate="20150831T050600Z">
        <seg>本ドキュメントは「Crystal」というプログラミング言語について記載するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the language reference for the Crystal programming language.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T221000Z" creationid="makenowjust" creationdate="20200412T221000Z">
        <seg>本ドキュメントは「Crystal」というプログラミング言語について記載するものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is useful to avoid duplication, but also to avoid the `Nil` type when reopening a class and adding instance variables to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T093208Z" creationid="hirofumiwakasugi" creationdate="20150905T055242Z">
        <seg>これは、重複を避けることができるだけではなく、クラスを再オープンしてインスタンス変数を追加する際に`Nil` 型になるのを防ぐことにも役立ちます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is very useful for defining wrappers of C types without having to explicitly transform them to their wrapped values.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045041Z" creationid="hirofumiwakasugi" creationdate="20151005T044954Z">
        <seg>これは、C の型のラッパーを定義する際に、明示的にそれらをラップされる型に変換する必要がないために便利に利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is why we can do `Person.new`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060415Z" creationid="hirofumiwakasugi" creationdate="20150904T060228Z">
        <seg>このことによって、`Person.new` としてメソッドを実行することができるのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This lets the user choose whether she wants to deal with exceptions or with `nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T024302Z" creationid="hirofumiwakasugi" creationdate="20150907T024302Z">
        <seg>こうすることで、ユーザーが例外を利用するか `nil` を利用するかを選択することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This library allows developers to create &lt;g2&gt;graphical&lt;/g2&gt; user interfaces in the terminal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T190433Z" creationid="makenowjust" creationdate="20200413T190433Z">
        <seg>このライブラリは端末で&lt;g2&gt;グラフィカルな&lt;/g2&gt;ユーザーインターフェースを開発することを可能にします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This literal can be used with any type as long as it has an argless constructor and responds to &lt;g1&gt;&lt;&lt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180221Z" creationid="makenowjust" creationdate="20200420T173552Z">
        <seg>引数を持たないコンストラクタと&lt;g1&gt;&lt;&lt;&lt;/g1&gt;メソッドを持つ任意の型に対して、この構文は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This literal can be used with any type as long as it has an argless constructor and responds to &lt;g1&gt;[]=&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180154Z" creationid="makenowjust" creationdate="20200420T180154Z">
        <seg>引数を持たないコンストラクタと&lt;g1&gt;[]=&lt;/g1&gt;メソッドを持つ任意の型に対して、この構文は利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This logic also applies if there are ands (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T081513Z" creationid="makenowjust" creationdate="20200424T081513Z">
        <seg>条件式でかつ (&lt;g1&gt;&amp;&amp;&lt;/g1&gt;) が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This logic also applies if there are ands (`&amp;&amp;`) in the condition:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014801Z" creationid="hirofumiwakasugi" creationdate="20150903T014801Z">
        <seg>条件で「かつ (`&amp;&amp;`)」が使われた場合にも同様です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks up "filename" in the require path.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091101Z" creationid="hirofumiwakasugi" creationdate="20150905T144805Z">
        <seg>このように記述した場合、require パスの中で "filename" に対応するファイルを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks up "filename" relative to the file containing the require expression.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091047Z" creationid="hirofumiwakasugi" creationdate="20150905T155934Z">
        <seg>このように記述した場合、require を実行したファイルから相対的に "filename" に対応するファイルを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This looks very fancy, but is it as fast as a C for loop? The answer is: yes!</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031954Z" creationid="hirofumiwakasugi" creationdate="20150916T031954Z">
        <seg>とても読みやすいと思いませんか？でも、これは C のループのように高速に動くのでしょうか？その答えは「yes」です！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the following gives a compile time error:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155223Z" creationid="hirofumiwakasugi" creationdate="20150905T054412Z">
        <seg>このとき、以下はコンパイルエラーが発生します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that the method belongs to the **class** `Person`, not to particular instances of that class.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060336Z" creationid="hirofumiwakasugi" creationdate="20150904T060226Z">
        <seg>これは、このメソッドが `Person` という**クラス**自体に属していることを意味します。クラスの特定のインスタンスに対してではありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This means that this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031407Z" creationid="hirofumiwakasugi" creationdate="20150916T031407Z">
        <seg>これは次のことを意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This method is mainly intended to convert integers from C to enums in Crystal.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011303Z" creationid="hirofumiwakasugi" creationdate="20150916T011206Z">
        <seg>これは主に C の整数を Crystal の Enum に変換する用途で利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This overwrites the inferred type and can be used for example to create an array that holds only some types initially but can accept other types later.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174023Z" creationid="makenowjust" creationdate="20200420T173237Z">
        <seg>これは推論された型を置き換えるので、生成時には同じ型しか入っていないけれど、あとで別の型が入ってくるような場合に対応できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This overwrites the inferred types and can be used for example to create a hash that holds only some types initially but can accept other types as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175810Z" creationid="makenowjust" creationdate="20200420T175810Z">
        <seg>これは推論された型を置き換えるので、初期化時には同じ型のみを持っているが、他の型も受け入れる必要があるようなハッシュを生成したい場合に対応できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This path is also used to temporarily store executables when Crystal programs are run with &lt;g2&gt;&lt;g3&gt;crystal run&lt;/g3&gt;&lt;/g2&gt; rather than &lt;g4&gt;&lt;g5&gt;crystal build&lt;/g5&gt;&lt;/g4&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T170456Z" creationid="makenowjust" creationdate="20200419T170456Z">
        <seg>このパスは&lt;g2&gt;&lt;g3&gt;crystal run&lt;/g3&gt;&lt;/g2&gt;で一時的に保存される実行可能ファイルを保存する先としても利用されます (&lt;g4&gt;&lt;g5&gt;crystal build&lt;/g5&gt;&lt;/g4&gt; では利用しません)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This prints:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081008Z" creationid="akiji" creationdate="20200428T080953Z">
        <seg>このコードの出力は以下の通りです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This procedure is usually done with the compiler itself to port it to new platforms where a compiler is not yet available.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T050134Z" creationid="hirofumiwakasugi" creationdate="20150909T045815Z">
        <seg>通常、まだコンパイラを入手できない新しいプラットフォームにコンパイラ自体を移植する際にこの手順を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This program will now print "Hello!" for one second and then exit.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075302Z" creationid="akiji" creationdate="20200428T075053Z">
        <seg>今回のプログラムは1秒間 "Hello!" と出力し続けてから終了します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This relative is mostly used inside a project to refer to other files inside it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T160344Z" creationid="hirofumiwakasugi" creationdate="20150905T160229Z">
        <seg>この相対パス参照はプロジェクトの中で他のファイルを参照するときによく使われます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This removes debug symbols reducing file size, but obviously making debugging more difficult.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154021Z" creationid="makenowjust" creationdate="20200419T152527Z">
        <seg>これはファイルサイズを減らすためにデバッグシンボルをファイルから削除しますが、一方、当然にデバッグは困難になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This restriction might be lifted in the future.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043813Z" creationid="hirofumiwakasugi" creationdate="20150909T043813Z">
        <seg>ただし、将来はこの制限が撤廃される可能性もあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This results in more generic, reusable code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T013654Z" creationid="hirofumiwakasugi" creationdate="20150908T013654Z">
        <seg>その方がより汎用的で、再利用しやすいコードになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This script will execute the global installed compiler or the one that you just compiled (if present).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061628Z" creationid="hirofumiwakasugi" creationdate="20150831T060757Z">
        <seg>このスクリプトは、グローバルにインストールされたコンパイラ、もしくは自分でビルドしたコンパイラがあればそれを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This seed value can be used to rerun the specs in that same order by passing the seed value to &lt;g1&gt;--order&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T235258Z" creationid="akiji" creationdate="20200518T070356Z">
        <seg>このシード値を&lt;g1&gt;--order&lt;/g1&gt; で指定することで、もう一度同じ順番でspecを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This sometimes leads to code that is more natural to read.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013000Z" creationid="hirofumiwakasugi" creationdate="20150903T013000Z">
        <seg>この方がコードが読みやすくなる場合もあるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This style is used in the standard library.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010055Z" creationid="hirofumiwakasugi" creationdate="20151010T010055Z">
        <seg>このコーディングスタイルは標準ライブラリで使われているものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This time &lt;g1&gt;Fiber.yield&lt;/g1&gt; will tell the scheduler to execute the other fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T070615Z" creationid="akiji" creationdate="20200428T075336Z">
        <seg>今度は &lt;g1&gt;Fiber.yield&lt;/g1&gt; がスケジューラに対して他のファイバを実行して良いと伝えています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This topic covers all things related to:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181130Z" creationid="makenowjust" creationdate="20200413T163844Z">
        <seg>このトピックでは、次の話題に関連することを扱っていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will create a `doc` directory, with a `doc/index.html` entry point.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144445Z" creationid="hirofumiwakasugi" creationdate="20151010T144315Z">
        <seg>これで、`doc` ディレクトリが作られ、そのエントリポイントは `doc/index.html` となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will create a `some_program` file that you can execute:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072037Z" creationid="hirofumiwakasugi" creationdate="20150901T072037Z">
        <seg>上記では、`some_program` という実行ファイルが作成され、以下のようにして実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will generate a `.o` ([Object file](http://en.wikipedia.org/wiki/Object_file)) and will print a line with a command to execute on the system we are trying to cross-compile to.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045601Z" creationid="hirofumiwakasugi" creationdate="20150909T045431Z">
        <seg>これで、`.o` ([オブジェクトファイル](http://en.wikipedia.org/wiki/Object_file)) が生成され、クロスコンパイルの対象システム上で実行すべきコマンドが表示されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will initialize `@age` to zero in every constructor.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T092918Z" creationid="hirofumiwakasugi" creationdate="20150905T055147Z">
        <seg>上記の例では、`@age` はすべてのコンストラクタで0に初期化されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will print "Hello!" until the standard output blocks (the system call will tell us we have to wait until the output is ready), and then execution continues with the main fiber and the program exits.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T075600Z" creationid="akiji" creationdate="20200428T075437Z">
        <seg>その結果、標準出力がブロックされる（システムコールが標準出力の準備ができるまで待つよう伝えてくる）まで "Hello!" と出力し続けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This will work for any type, as long as the argument is a pointer of that type (and, of course, as long as the function does fill the value the pointer is pointing to).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044201Z" creationid="hirofumiwakasugi" creationdate="20151005T044201Z">
        <seg>これは、引数がその型のポインタである場合には、どのような型に対しても有効です (もちろん、ポインタが指す値が関数によって設定されることが前提です) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153019Z" creationid="hirofumiwakasugi" creationdate="20160115T153019Z">
        <seg>例えば、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Threads are pre-emptive: the operating system might interrupt a thread at any time and start executing another one.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T062215Z" creationid="akiji" creationdate="20200428T062215Z">
        <seg>スレッドはプリエンプティブ（非同期マルチタスク）なので，OSはいつでもスレッドに割り込んで別のスレッドを実行することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Three</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Three</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Thus, a `type` declaration is useful for opaque types that are created by the C library you are wrapping.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023545Z" creationid="hirofumiwakasugi" creationdate="20151008T023545Z">
        <seg>したがって、ラップしようとしている C ライブラリによって生成された不透明な型 (opaque type) に対して、`type` 宣言を有効に利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Time.local
...
address = server.bind_tcp 8080
...
puts "Listening on http://#{address}"
...
server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162447Z" creationid="makenowjust" creationdate="20200413T162447Z">
        <seg>Time.local
...
address = server.bind_tcp 8080
...
puts "Listening on http://#{address}"
...
server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Time.now</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072631Z" creationid="hirofumiwakasugi" creationdate="20150901T072631Z">
        <seg>Time.now</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To access the rescued exception you can specify a variable in the `rescue` clause:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013116Z" creationid="hirofumiwakasugi" creationdate="20150907T012004Z">
        <seg>捕捉された例外にアクセスしたいときは、`rescue` 節に変数を指定することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To achieve concurrency, Crystal has fibers.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150107Z" creationid="akiji" creationdate="20200428T054055Z">
        <seg>並行処理を行うために、Crystal はファイバを利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To add a page, create a markdown file in the desired location.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T164817Z" creationid="makenowjust" creationdate="20200413T164817Z">
        <seg>ページを追加する場合、Markdown ファイルを希望の場所に配置してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to methods in other types, do &lt;g1&gt;OtherType#method(arg1, arg2)&lt;/g1&gt; or just &lt;g2&gt;OtherType#method&lt;/g2&gt;, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212554Z" creationid="makenowjust" creationdate="20200412T212510Z">
        <seg>他の型のメソッドに対して自動的にリンクさせたい場合は、&lt;g1&gt;OtherType#method(arg1, arg2)&lt;/g1&gt;のようにするかa、または単純に&lt;g2&gt;OtherType#method&lt;/g2&gt;として、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to methods of the currently documented type, use a hash like &lt;g1&gt;#horns&lt;/g1&gt; or &lt;g2&gt;#index(char)&lt;/g2&gt;, and enclose it with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212307Z" creationid="makenowjust" creationdate="20200412T212307Z">
        <seg>現在の型のメソッドに対して自動的にリンクさせたい場合は、&lt;g1&gt;#horns&lt;/g1&gt;や&lt;g2&gt;#index(char)&lt;/g2&gt;のようにハッシュ記号をつけて、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To automatically link to other types, enclose them with single backticks.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212123Z" creationid="makenowjust" creationdate="20200412T212123Z">
        <seg>自動的に他の型にリンクさせたい場合は、1つのバックティック (バッククォート) で囲みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid all this boilerplate, the standard library provides a &lt;g1&gt;spawn&lt;/g1&gt; macro that accepts a call expression and basically rewrites it to do the above.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080704Z" creationid="akiji" creationdate="20200428T080704Z">
        <seg>上記のようなボイラープレートコードを回避するために、標準ライブラリは式の呼び出しを受け取って上記コードに展開する&lt;g1&gt;spawn&lt;/g1&gt; マクロを用意しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this a string can be split into multiple lines
by joining multiple literals with a backslash:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194654Z" creationid="makenowjust" creationdate="20200419T194654Z">
        <seg>これを防ぐために、文字列リテラルを行毎に分割して、バックスラッシュで結合するという手段を取ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this initialization you can use `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050313Z" creationid="hirofumiwakasugi" creationdate="20151007T050218Z">
        <seg>このように初期化されることを避けたい場合は、`::` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this initialization you can use `uninitialized`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061506Z" creationid="hirofumiwakasugi" creationdate="20160204T061457Z">
        <seg>このように初期化されることを避けたい場合は、`uninitialized` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, command literals should generally not be used with interpolated user input.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173241Z" creationid="makenowjust" creationdate="20200422T173241Z">
        <seg>これを避けるには、コマンドリテラルの補間にユーザーの入力した値を用いないようにする必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To avoid this, you can split a string into multiple lines
by joining multiple literals with a backslash:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104022Z" creationid="hirofumiwakasugi" creationdate="20150901T104022Z">
        <seg>これを避けたければ、複数行の文字列リテラルをバックスラッシュで結合することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To build your own version of the compiler, run `make`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060550Z" creationid="hirofumiwakasugi" creationdate="20150831T060550Z">
        <seg>コンパイラをビルドするときは、`make` を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To capture a block you must specify it as a method's block argument, give it a name and specify the input and output types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040352Z" creationid="hirofumiwakasugi" creationdate="20150916T035838Z">
        <seg>ブロックを捕捉するには、メソッドにブロック引数を設定し、その名前とインプット/アウトプットの型を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run a program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071951Z" creationid="hirofumiwakasugi" creationdate="20150901T071951Z">
        <seg>ファイル名を1つ指定して `crystal` コマンドを実行することで、プログラムのコンパイルと実行を一発で行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run a program in a single shot, invoke &lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt; with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150246Z" creationid="makenowjust" creationdate="20200419T150246Z">
        <seg>ファイル名を1つ指定して&lt;g1&gt;&lt;g2&gt;crystal run&lt;/g2&gt;&lt;/g1&gt;コマンドを実行することで、プログラムのコンパイルと実行を一発で行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To compile and run the program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T130436Z" creationid="hirofumiwakasugi" creationdate="20150901T130436Z">
        <seg>To compile and run the program in a single shot you can invoke `crystal` with a single filename:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a String with embedded expressions, you can use string interpolation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105432Z" creationid="hirofumiwakasugi" creationdate="20150901T105432Z">
        <seg>文字列の中には式を埋め込むことが可能です。これを文字列埋め込み (文字列補完/String Interpolation
) といいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create a method that accepts a type name, rather than an instance of a type, append `.class` to a free variable in the type restriction:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040533Z" creationid="hirofumiwakasugi" creationdate="20150908T040233Z">
        <seg>型のインスタンスではなく、型自体の名前を利用したい場合は、型制約の自由変数に `.class` を追加してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use &lt;g1&gt;Tuple.new&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164934Z" creationid="makenowjust" creationdate="20200422T164934Z">
        <seg>空のタプルを作るには&lt;g1&gt;Tuple.new&lt;/g1&gt;を使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an empty tuple use [Tuple.new](http://crystal-lang.org/api/Tuple.html#new%28%2Aargs%29-class-method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020813Z" creationid="hirofumiwakasugi" creationdate="20150902T020813Z">
        <seg>空のタプルを作りたい場合は、[Tuple.new](http://crystal-lang.org/api/Tuple.html#new%28%2Aargs%29-class-method) を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an executable use the `build` command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072028Z" creationid="hirofumiwakasugi" creationdate="20150901T072028Z">
        <seg>実行ファイルを作成するには `build` コマンドを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a struct use `new`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045950Z" creationid="hirofumiwakasugi" creationdate="20151007T045941Z">
        <seg>構造体のインスタンスを生成するには `new` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To create an instance of a union use `new`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052231Z" creationid="hirofumiwakasugi" creationdate="20151007T052231Z">
        <seg>共用体のインスタンスを生成するには `new` を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To deal with `Nil`, and generally with union types, you have several options: use an [if var](if_var.html), [if var.is_a?](if_varis_a.html), [case](case.html) and [is_a?](is_a.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010229Z" creationid="hirofumiwakasugi" creationdate="20150905T054635Z">
        <seg>`Nil` や型の組み合わせ (ユニオン型) を扱うときには、[if var](if_var.html)/[if var.is_a?](if_varis_a.html)/[case](case.html)/[is_a?](is_a.html) を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To declare recursive structs you can forward-declare them:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045902Z" creationid="hirofumiwakasugi" creationdate="20151007T045902Z">
        <seg>再帰的な構造体は、宣言フォワーディング (forward-declare) によって宣言します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a custom exception type, just subclass from [Exception](http://crystal-lang.org/api/Exception.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011644Z" creationid="hirofumiwakasugi" creationdate="20150907T011610Z">
        <seg>独自の例外型を定義したい場合には、[Exception](http://crystal-lang.org/api/Exception.html) からサブクラスを作成します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To define a method that receives a block, simply use `yield` inside it and the compiler will know.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014400Z" creationid="hirofumiwakasugi" creationdate="20150916T014258Z">
        <seg>ブロックを受け取るメソッドを定義するには、単純に `yield` をメソッド内で使います。そうするとコンパイラはブロックを受け取るメソッドであることを理解します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a Proc type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171424Z" creationid="makenowjust" creationdate="20200422T171424Z">
        <seg>Proc の型は次のようにして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a heredoc without interpolation or escapes, the opening heredoc identifier is enclosed in single quotes:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034422Z" creationid="makenowjust" creationdate="20200420T034147Z">
        <seg>ヒアドキュメントの中で補間やエスケープを禁止したい場合、ヒアドキュメント冒頭の識別子をシングルクォートで囲ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a named tuple type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165946Z" creationid="makenowjust" creationdate="20200422T165946Z">
        <seg>名前付きタプルの型は次のようにして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To denote a tuple type you can write:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164944Z" creationid="makenowjust" creationdate="20200422T164944Z">
        <seg>タプルの型は次のようして書けます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To do something with `@a` only when it is not `nil` you have two options:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020031Z" creationid="hirofumiwakasugi" creationdate="20150903T015913Z">
        <seg>`@a` が `nil` ではない場合のみにある処理を実行したい場合、方法は2つあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystal on Mac you can use [Homebrew](http://brew.sh/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002417Z" creationid="hirofumiwakasugi" creationdate="20151220T002417Z">
        <seg>[Homebrew](http://brew.sh/) を利用すると、簡単に Mac に Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use [Homebrew](http://brew.sh/).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T025728Z" creationid="hirofumiwakasugi" creationdate="20151102T024211Z">
        <seg>[Homebrew](http://brew.sh/) を利用すると、簡単に Mac に Crystal をインストールすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use our [Homebrew](http://brew.sh/) [tap](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021631Z" creationid="hirofumiwakasugi" creationdate="20151009T021631Z">
        <seg>Mac に Crystal をインストールする場合、[Homebrew](http://brew.sh/) の [tap](https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/brew-tap.md) を用意しているので、それを利用すると簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To easily install Crystall on Mac you can use our [Homebrew](http://brew.sh/) [tap](https://github.com/Homebrew/homebrew/wiki/brew-tap)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055250Z" creationid="hirofumiwakasugi" creationdate="20150831T055250Z">
        <seg>Mac に Crystal をインストールする場合、[Homebrew](http://brew.sh/) の [tap](https://github.com/Homebrew/homebrew/wiki/brew-tap) を用意しているので、それを利用すると簡単です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To establish certain contexts - think &lt;g1&gt;empty array&lt;/g1&gt; versus &lt;g2&gt;array with elements&lt;/g2&gt; - the &lt;g3&gt;context&lt;/g3&gt; method may be used to communicate this to the reader.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T134225Z" creationid="akiji" creationdate="20200505T134225Z">
        <seg>&lt;g1&gt;空の配列&lt;/g1&gt;と&lt;g2&gt;要素を含む配列&lt;/g2&gt;といったコンテキストの違いを明確に読み手に伝えるために、&lt;g3&gt;context&lt;/g3&gt;メソッドを使用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To format a single file:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215749Z" creationid="makenowjust" creationdate="20200412T215749Z">
        <seg>単一のファイルをフォーマットするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To format all &lt;g1&gt;.cr&lt;/g1&gt; files within a directory:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215822Z" creationid="makenowjust" creationdate="20200412T215822Z">
        <seg>ディレクトリに含まれる&lt;g1&gt;.cr&lt;/g1&gt;ファイルをすべてフォーマットするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward captured blocks, you use a block argument, prefixing an expression with `&amp;`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025314Z" creationid="hirofumiwakasugi" creationdate="20150917T023916Z">
        <seg>捕捉したブロックをフォワーディングするには、先頭文字が `&amp;` のブロック引数を利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To forward non-captured blocks, you must use `yield`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025906Z" creationid="hirofumiwakasugi" creationdate="20150917T025542Z">
        <seg>捕捉されないブロックをフォワーディングするには `yield` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To generate documentation for a project, invoke &lt;g1&gt;crystal docs&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211324Z" creationid="makenowjust" creationdate="20200412T211324Z">
        <seg>プロジェクトのドキュメントを生成するには&lt;g1&gt;crystal docs&lt;/g1&gt;を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To generate documentation for a project, invoke `crystal doc`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144313Z" creationid="hirofumiwakasugi" creationdate="20151010T144310Z">
        <seg>プロジェクトのドキュメントを生成するには、`crystal doc` を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the `--cross-compile` flags you can execute `uname -m -s` on a unix system.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T044941Z" creationid="hirofumiwakasugi" creationdate="20150909T044804Z">
        <seg>`--cross-compile` フラグは、UNIX システムでは `uname -m -s` を実行した結果から知ることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the `--target` flags you can execute `llvm-config --host-target` using an installed LLVM 3.5.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045218Z" creationid="hirofumiwakasugi" creationdate="20150909T045218Z">
        <seg>一方、`--target` フラグを得るには、LLVM 3.5 を使って `llvm-config --host-target` を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the effective size of a class, use [instance_sizeof](instance_sizeof.html).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040002Z" creationid="hirofumiwakasugi" creationdate="20150906T040002Z">
        <seg>実際のクラスのサイズを得るには [instance_sizeof](instance_sizeof.html) を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To get the underlying value you invoke `value` on it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024558Z" creationid="hirofumiwakasugi" creationdate="20150914T024558Z">
        <seg>その値を参照するには `value` を実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To have something returned, either specify the return type or use an underscore to allow any return type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061950Z" creationid="hirofumiwakasugi" creationdate="20150918T061950Z">
        <seg>何か返して欲しい場合には、戻り値の型を指定するか、もしくはすべての型を許容したいときはアンダースコアを使ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To illustrate the problem let’s try the following: we want the input entered by the user to be sang loudly:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182406Z" creationid="makenowjust" creationdate="20200413T182406Z">
        <seg>これがどういう問題なのか説明するために、入力された値を叫ばせて (大文字にして表示して) みましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To install from source, download or clone &lt;g1&gt;the repository&lt;/g1&gt; and run &lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173505Z" creationid="makenowjust" creationdate="20200419T173505Z">
        <seg>ソースコードからインストールするには、&lt;g1&gt;リポジトリ&lt;/g1&gt;からソースコードをダウンロードかクローンしてきて、&lt;g2&gt;make CRFLAGS=--release&lt;/g2&gt;を実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a Proc, you invoke the &lt;g1&gt;call&lt;/g1&gt; method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T171948Z" creationid="makenowjust" creationdate="20200422T171948Z">
        <seg>Proc を呼び出す (実行する) ためには、&lt;g1&gt;call&lt;/g1&gt; メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a Proc, you invoke the `call` method on it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021926Z" creationid="hirofumiwakasugi" creationdate="20150902T021916Z">
        <seg>Proc を実行するときは `call` メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To invoke a method and pass a block, you use `do ... end` or `{ ... }`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014747Z" creationid="hirofumiwakasugi" creationdate="20150916T014747Z">
        <seg>ブロックを渡してメソッドを実行するには、`do ... end` もしくは `{ ... }` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To iterate a `HashLiteral`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040427Z" creationid="hirofumiwakasugi" creationdate="20151001T040427Z">
        <seg>`HashLiteral` をイテレートするには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it appear in documentation comments</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024637Z" creationid="hirofumiwakasugi" creationdate="20150909T024613Z">
        <seg>ドキュメンテーションコメントに表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it more explicit that an `Animal` must define a `talk` method, we can add it to `Animal` as an abstract method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040124Z" creationid="hirofumiwakasugi" creationdate="20150910T040116Z">
        <seg>これをより明確に示すために `Animal` に abstract メソッドとして `talk` メソッドを定義することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make it simpler to use, you can create a symbolic link available in the path:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055933Z" creationid="hirofumiwakasugi" creationdate="20150831T055850Z">
        <seg>実行ファイルに対して、パスの通った場所のシンボリックを貼っておけば、より簡単に利用することができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make sure that the method returns the type that you want
2.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024533Z" creationid="hirofumiwakasugi" creationdate="20150909T024523Z">
        <seg>メソッドが返す戻り値の型を明確にする
2.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make the compiler process other files you use &lt;g1&gt;require "..."&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084358Z" creationid="makenowjust" creationdate="20200427T084358Z">
        <seg>コンパイラに別のファイルを処理させたいときは&lt;g1&gt;require "..."&lt;/g1&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make the compiler process other files you use `require "..."`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T143946Z" creationid="hirofumiwakasugi" creationdate="20150905T143819Z">
        <seg>コンパイラに別のファイルを処理させたいときは `require "..."` を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To make this more explicit, you can add a dummy `&amp;block` argument at the end:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072147Z" creationid="hirofumiwakasugi" creationdate="20150906T072122Z">
        <seg>より明示的にそのことを示したい場合は、`&amp;block` という引数をダミーとして引数の最後に指定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To reduce the binary size for distributable files, the &lt;g1&gt;--no-debug&lt;/g1&gt; flag can be used.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T152346Z" creationid="makenowjust" creationdate="20200419T152346Z">
        <seg>配布するファイルのサイズを減らすには、&lt;g1&gt;--no-debug&lt;/g1&gt;フラグを用いることが有効です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rescue any exception use a `begin ... rescue ... end` expression:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013109Z" creationid="hirofumiwakasugi" creationdate="20150907T011929Z">
        <seg>例外を捕捉するには、`begin ... rescue ... end` の構文を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To rescue just one type of exception (or any of its subclasses):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013123Z" creationid="hirofumiwakasugi" creationdate="20150907T012241Z">
        <seg>ある型の例外 (そのサブクラスも含む) のみ捕捉したい場合には以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particuar command, use `--help` after a command:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072224Z" creationid="hirofumiwakasugi" creationdate="20150901T072224Z">
        <seg>あるコマンドに対して有効なオプションを確認するには、コマンドに続けて `--help` を入力してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particular command, use &lt;g1&gt;--help&lt;/g1&gt; after a command.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T175541Z" creationid="makenowjust" creationdate="20200419T175541Z">
        <seg>特定のコマンドの有効なオプションを確認したい場合は、コマンド名のあとに&lt;g1&gt;--help&lt;/g1&gt;を付けて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the available options for a particular command, use &lt;g1&gt;--help&lt;/g1&gt; after a command:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154425Z" creationid="makenowjust" creationdate="20200419T154425Z">
        <seg>特定のコマンドの有効なオプションを確認したい場合は、コマンド名のあとに&lt;g1&gt;--help&lt;/g1&gt;を付けて実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To see the full set of commands, invoke `crystal` without arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072209Z" creationid="hirofumiwakasugi" creationdate="20150901T072209Z">
        <seg>すべてのコマンドを確認するには、`crystal` コマンドを引数なしで実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To show the value of an expression inside code blocks, use &lt;g1&gt;# =&gt;&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215049Z" creationid="makenowjust" creationdate="20200412T212606Z">
        <seg>コードブロックの中で式の値を示したい場合は、&lt;g1&gt;# =&gt;&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To solve this, we can do this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080313Z" creationid="akiji" creationdate="20200428T080313Z">
        <seg>これを解決するにはこのようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To spawn a fiber you use &lt;g1&gt;spawn&lt;/g1&gt; with a block:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T064249Z" creationid="akiji" creationdate="20200428T064249Z">
        <seg>ファイバを生成するにはブロック付きで&lt;g1&gt;spawn&lt;/g1&gt;を使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify a Proc without arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011352Z" creationid="hirofumiwakasugi" creationdate="20151009T011352Z">
        <seg>引数を持たない Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify multiple arguments:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011403Z" creationid="hirofumiwakasugi" creationdate="20151009T011403Z">
        <seg>複数の引数を持つ Proc を指定するには以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To specify the values of arguments that have default values you can also use their names in the invocation:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113559Z" creationid="hirofumiwakasugi" creationdate="20150906T112945Z">
        <seg>デフォルト値を設定した引数に対して、メソッドの実行時にその名前を指定することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To turn optimizations on, use the `--release` flag:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072106Z" creationid="hirofumiwakasugi" creationdate="20150901T072106Z">
        <seg>最適化を有効にしたければ、`--release` フラグを与える必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To understand why this is useful, let's look at this example:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080122Z" creationid="akiji" creationdate="20200428T080122Z">
        <seg>なぜこれが便利なのかを理解するために、次の例をみてみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a module as a partial type you use `include` or `extend`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T132729Z" creationid="hirofumiwakasugi" creationdate="20150911T132232Z">
        <seg>モジュールを部分的な型として利用する場合、`include` または `extend` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use a value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052917Z" creationid="hirofumiwakasugi" creationdate="20151007T052914Z">
        <seg>値は以下のように利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To use the spec module and DSL, you need to add &lt;g1&gt;require "spec"&lt;/g1&gt; to your spec files.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T124800Z" creationid="akiji" creationdate="20200505T124724Z">
        <seg>spec モジュールやDLSを使用するには、specファイルに&lt;g1&gt;require "spec"&lt;/g1&gt;を追加する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To work with these, first assign them to a variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022436Z" creationid="hirofumiwakasugi" creationdate="20150903T022436Z">
        <seg>それらの場合には、まず変数への代入を行ってください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a chain of if-else-if you use &lt;g1&gt;elsif&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074254Z" creationid="makenowjust" creationdate="20200424T074254Z">
        <seg>複数の条件分岐を連続させるには&lt;g1&gt;elsif&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To write a chain of if-else-if you use `elsif`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010634Z" creationid="hirofumiwakasugi" creationdate="20150903T010134Z">
        <seg>複数の条件分岐を組み合わせた「if-else-if」の文を書くには `elsif` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Truthiness</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T135844Z" creationid="akiji" creationdate="20200505T135844Z">
        <seg>真偽状態</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Truthy and falsey values</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T060248Z" creationid="makenowjust" creationdate="20200424T060248Z">
        <seg>真になる値と偽になる値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try to avoid forwarding blocks like this if doing `yield` is enough.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030646Z" creationid="hirofumiwakasugi" creationdate="20150917T030547Z">
        <seg>もし `yield` で十分な場合には、このようなブロックのフォワーディングは使わないようにしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164905Z" creationid="makenowjust" creationdate="20200422T164905Z">
        <seg>タプル (Tuple)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple literal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094307Z" creationid="makenowjust" creationdate="20200424T093339Z">
        <seg>タプルリテラルの利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Tuple size must match</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094329Z" creationid="makenowjust" creationdate="20200424T093449Z">
        <seg>タプルの大きさは等しい必要があります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Twenty = 10 * 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052948Z" creationid="hirofumiwakasugi" creationdate="20151007T052948Z">
        <seg>Twenty = 10 * 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Two</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053245Z" creationid="hirofumiwakasugi" creationdate="20151007T053245Z">
        <seg>Two = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Two methods, one that yields and another that doesn't, are considered different overloads, as explained in the [overloading](overloading.html) section.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022820Z" creationid="hirofumiwakasugi" creationdate="20150916T015525Z">
        <seg>[オーバーロード](overloading.html)で説明したように、2つのメソッドがあって、一方は yield するメソッドで、もう一方はしないメソッドであるとき、それらは別のオーバーオードと解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182018Z" creationid="makenowjust" creationdate="20200419T182018Z">
        <seg>型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions are type annotations put to method arguments to restrict the types accepted by that method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042629Z" creationid="hirofumiwakasugi" creationdate="20150907T042601Z">
        <seg>メソッドの引数に型アノテーションを指定することで、メソッドが受け取ることができる型を制約することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type restrictions in a generic type's constructor are free variables when type arguments were not specified, and then are used to infer them.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T072234Z" creationid="hirofumiwakasugi" creationdate="20150912T070257Z">
        <seg>もし型引数が指定されなかった場合、ジェネリック型のコンストラクタに設定された型制約は自由変数として扱われ、それが型推論に利用されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Type system</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210835Z" creationid="makenowjust" creationdate="20200413T210835Z">
        <seg>型システム</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Types, methods and generally any part of your code can be conditionally defined based on some flags available at compile time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043620Z" creationid="hirofumiwakasugi" creationdate="20150908T042427Z">
        <seg>型やメソッドなど、基本的にはコードのどの部分であっても、コンパイル時に指定可能なフラグによる条件に応じて定義することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Typically a top level &lt;g3&gt;describe&lt;/g3&gt; defines the outer unit (such as a class) to be tested by the spec.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T133544Z" creationid="akiji" creationdate="20200505T133443Z">
        <seg>通常、トップレベルの&lt;g3&gt;describe&lt;/g3&gt;は、そのsupcのテスト対象となる外側の単位（クラスなど）を定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscore allowed</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094335Z" creationid="makenowjust" creationdate="20200424T093620Z">
        <seg>アンダースコアが利用できます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscores are allowed at the beginning of a variable name, but these names are reserved for the compiler, so their use is not recommended (and it also makes the code uglier to read).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053355Z" creationid="hirofumiwakasugi" creationdate="20150902T052940Z">
        <seg>アンダースコアを変数名の先頭につけることも可能ですが、それらの名前はコンパイラによって予約されているため、先頭がアンダースコアの変数名は推奨されません (コードの見た目や読みやすさという点でもあまり美しくないですよね) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Underscores can be used to make some numbers more readable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052402Z" creationid="hirofumiwakasugi" creationdate="20150901T052402Z">
        <seg>アンダースコアは、数値を読みやすくするためにも利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unescaped hash characters &lt;g3&gt;#&lt;/g3&gt; denote the start of a comment ranging to the end of the line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T042159Z" creationid="makenowjust" creationdate="20200421T042159Z">
        <seg>また、エスケープされていないハッシュ &lt;g3&gt;#&lt;/g3&gt; は行コメントの始まりと見なされ、次の改行文字まで飛ばしてマッチを行います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unless specified, the resuling binary will have the same name as the source file minus the extension &lt;g1&gt;.cr&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155127Z" creationid="makenowjust" creationdate="20200419T155127Z">
        <seg>明示的に指定しなければ、生成されるバイナリはソースコードのファイル名から&lt;g1&gt;.cr&lt;/g1&gt;という拡張子を除いたものになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike C, `Int32` and `MyInt` are not interchangeable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023152Z" creationid="hirofumiwakasugi" creationdate="20151008T023152Z">
        <seg>C とは異なり、`Int32` と `MyInt` を相互に交換することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Unlike other keywords, `raise` is a regular method with two overloads: [one accepting a String](http://crystal-lang.org/api/toplevel.html#raise%28message%20%3A%20String%29-class-method) and another [accepting an Exception instance](http://crystal-lang.org/api/toplevel.html#raise%28ex%20%3A%20Exception%29-class-method):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011338Z" creationid="hirofumiwakasugi" creationdate="20150907T010924Z">
        <seg>他のキーワードとは異なり、`raise` は通常のメソッドであり、2つのオーバーロードがあります。その1つは [String を受け取るもの](http://crystal-lang.org/api/toplevel.html#raise%28message%20%3A%20String%29-class-method)で、もう1つは[例外 (Exception) クラスを受け取るもの](http://crystal-lang.org/api/toplevel.html#raise%28ex%20%3A%20Exception%29-class-method)です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Usage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T173541Z" creationid="makenowjust" creationdate="20200419T173541Z">
        <seg>使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use --error-trace for full trace.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182449Z" creationid="makenowjust" creationdate="20200413T182449Z">
        <seg>Use --error-trace for full trace.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;:ditto:&lt;/g1&gt; to use the same comment as in the previous declaration.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T215045Z" creationid="makenowjust" creationdate="20200412T212640Z">
        <seg>前の定義と同じコメントを使いたい場合は、&lt;g1&gt;:ditto:&lt;/g1&gt; (同上の意味) を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;:nodoc:&lt;/g1&gt; to hide public declarations from the generated documentation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212938Z" creationid="makenowjust" creationdate="20200412T212816Z">
        <seg>公開APIであることを生成されたドキュメントでは隠したい場合、&lt;g1&gt;:nodoc:&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;standard coding style&lt;/g1&gt; so your project will be navigable and readable to others.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220557Z" creationid="makenowjust" creationdate="20200412T220557Z">
        <seg>&lt;g1&gt;標準コーディングスタイル&lt;/g1&gt;を利用してください。そうすればあなたのプロジェクトは他の人にとって追いかけやすく読みやすいものになるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use &lt;g1&gt;two spaces&lt;/g1&gt; to indent code inside namespaces, methods, blocks or other nested contexts.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T204940Z" creationid="makenowjust" creationdate="20200412T204940Z">
        <seg>名前空間やメソッド、ブロックやその他のネストされた内容をインデントするには&lt;g1&gt;スペース2つ&lt;/g1&gt;を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use Crystal's code formatter</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214825Z" creationid="makenowjust" creationdate="20200412T214825Z">
        <seg>Crystal のコードフォーマッタの利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use __two spaces__ to indent code inside namespaces, methods, blocks or other nested contexts.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011933Z" creationid="hirofumiwakasugi" creationdate="20151010T011933Z">
        <seg>名前空間やメソッド、そしてブロックやその他のネストされた内容をインデントするには、「スペース2つ」を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the `init` command to create a Crystal project with the standard directory structure.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160119T161946Z" creationid="hirofumiwakasugi" creationdate="20150901T072144Z">
        <seg>`init` コマンドを使用すると、標準的なディレクトリ構成を持った Crystal プロジェクトを作成することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use the third person: &lt;g1&gt;Returns the number of horns this unicorn has&lt;/g1&gt; instead of &lt;g2&gt;Return the number of horns this unicorn has&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214946Z" creationid="makenowjust" creationdate="20200412T211824Z">
        <seg>3人称を使ってください。つまり、&lt;g2&gt;Return the number of horns this unicorn has&lt;/g2&gt;ではなく&lt;g1&gt;Returns the number of horns this unicorn has&lt;/g1&gt;とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use them in bindings like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042603Z" creationid="hirofumiwakasugi" creationdate="20151005T042603Z">
        <seg>それらはバインディングで以下のように利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Use this tool to unify code styles and to submit documentation improvements to
Crystal itself.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220257Z" creationid="makenowjust" creationdate="20200412T220257Z">
        <seg>このツールを使ってコーディングスタイルを統一し、ドキュメントの改善をCrystal 自身に従わせてください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using &lt;g1&gt;Readline&lt;/g1&gt; and &lt;g2&gt;NCurses&lt;/g2&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185719Z" creationid="makenowjust" creationdate="20200413T185719Z">
        <seg>&lt;g1&gt;Readline&lt;/g1&gt;と&lt;g2&gt;NCurses&lt;/g2&gt;の利用</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using `%x` in the above example we declare a variable whose name is guaranteed not to conflict with local varaibles in the current scope.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020204Z" creationid="hirofumiwakasugi" creationdate="20151002T020117Z">
        <seg>上記の例では `%x` として変数を宣言しています。こうすることで、現在のスコープのローカル変数と名前が衝突しないことを保証できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using it, we end up with:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080717Z" creationid="akiji" creationdate="20200428T080717Z">
        <seg>それを使い、最終的にはこうなりました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using the compiler</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T150106Z" creationid="makenowjust" creationdate="20200419T150106Z">
        <seg>コンパイラの使い方</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using these two, we can compile a program in a Mac that will run on that Linux like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045355Z" creationid="hirofumiwakasugi" creationdate="20150909T045301Z">
        <seg>これらの2つのフラグを使うことで、Linux で動作するプログラムを Mac 上でコンパイルすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using, for example, `Int32` as a type restriction makes the method only accept instances of `Int32`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025540Z" creationid="hirofumiwakasugi" creationdate="20150908T025529Z">
        <seg>例えば、`Int32` の型に制約したとき、メソッドは `Int32` のインスタンスのみしか受け入れません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are as same as &lt;g3&gt;percent string literals&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193932Z" creationid="makenowjust" creationdate="20200419T193932Z">
        <seg>有効な区切り文字は&lt;g3&gt;パーセント文字列リテラル&lt;/g3&gt;のときと同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are parentheses &lt;g2&gt;()&lt;/g2&gt;, square brackets &lt;g3&gt;[]&lt;/g3&gt;, curly braces &lt;g4&gt;{}&lt;/g4&gt;, angles &lt;g5&gt;&lt;&gt;&lt;/g5&gt; and pipes &lt;g6&gt;||&lt;/g6&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193151Z" creationid="makenowjust" creationdate="20200419T193151Z">
        <seg>有効な区切り文字は、括弧&lt;g2&gt;()&lt;/g2&gt;、角括弧&lt;g3&gt;[]&lt;/g3&gt;、ひげ括弧&lt;g4&gt;{}&lt;/g4&gt;、三角括弧&lt;g5&gt;&lt;&gt;&lt;/g5&gt;そしてパイプ文字&lt;g6&gt;||&lt;/g6&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Valid delimiters are parentheses &lt;g3&gt;()&lt;/g3&gt;, square brackets &lt;g4&gt;[]&lt;/g4&gt;, curly braces &lt;g5&gt;{}&lt;/g5&gt;, angles &lt;g6&gt;&lt;&gt;&lt;/g6&gt; and pipes &lt;g7&gt;||&lt;/g7&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T172050Z" creationid="makenowjust" creationdate="20200420T172050Z">
        <seg>有効な区切り文字は、括弧&lt;g3&gt;()&lt;/g3&gt;、角括弧&lt;g4&gt;[]&lt;/g4&gt;、ひげ括弧&lt;g5&gt;{}&lt;/g5&gt;、三角括弧&lt;g6&gt;&lt;&gt;&lt;/g6&gt;そしてパイプ文字&lt;g7&gt;||&lt;/g7&gt;です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values start with the value `0` and are incremented by one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024407Z" creationid="hirofumiwakasugi" creationdate="20150914T024251Z">
        <seg>値は最初が `0` で始まって1ずつ増えていきます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Values that don't correspond to an enum's constants are allowed: the value will still be of type `Color`, but when printed you will get the underlying value:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011345Z" creationid="hirofumiwakasugi" creationdate="20150916T011123Z">
        <seg>Enum の定数にない値を指定することも可能です。その場合、あくまでも型は `Color` となりますが、出力したときにはその値がそのまま出力されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables declared in a program are not visible inside methods:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021521Z" creationid="hirofumiwakasugi" creationdate="20150904T021431Z">
        <seg>プログラムに定義された変数に対して、メソッドの中からアクセスすることはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables declared inside the `begin` part of an exception handler also get the `Nil` type when considered inside a `rescue` or `ensure` body.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020141Z" creationid="hirofumiwakasugi" creationdate="20150907T020141Z">
        <seg>例外処理において、`begin` 節の中で宣言された変数は、`rescue` または `ensure` 内においては `Nil` 型を持っているとして解釈されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Variables exposed by a C library can be declared inside a `lib` declaration using a global-variable-like declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053747Z" creationid="hirofumiwakasugi" creationdate="20151007T053524Z">
        <seg>C のライブラリで公開される変数は、`lib` の内部で、グローバル変数に似た記法を使って宣言できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector2.new(-x, -y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025727Z" creationid="hirofumiwakasugi" creationdate="20150909T025727Z">
        <seg>Vector2.new(-x, -y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Vector2.new(x + other.x, y + other.y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025212Z" creationid="hirofumiwakasugi" creationdate="20150909T025212Z">
        <seg>Vector2.new(x + other.x, y + other.y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Verifies that all dependencies are installed and requirements are satisfied.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180407Z" creationid="makenowjust" creationdate="20200419T180407Z">
        <seg>すべての依存関係がインストールされていて、要求を満たしているか検証します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We also want a Person to come to existence with a name of our choice and an age of zero.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055435Z" creationid="hirofumiwakasugi" creationdate="20150904T055215Z">
        <seg>また、Person が生まれる (インスタンスとして生成される) とき、名前は指定した名前で、年齢は0歳の状態になっているようにしたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We are going to use the second way:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174321Z" creationid="makenowjust" creationdate="20200413T174321Z">
        <seg>今回は2番目の方法でいきたいと思います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can also use channels to communicate values between fibers:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103714Z" creationid="akiji" creationdate="20200429T132617Z">
        <seg>チャネルを使って以下のようにファイバ間で値を受け渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can define a `become_older` method that accepts a number indicating the years to grow:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070837Z" creationid="hirofumiwakasugi" creationdate="20150905T130944Z">
        <seg>これから、何歳年をとるかを数値で指定できる `become_older` メソッドを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can read all about &lt;g1&gt;OptionParser&lt;/g1&gt; in &lt;g2&gt;the official API documentation&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173723Z" creationid="makenowjust" creationdate="20200413T173723Z">
        <seg>&lt;g1&gt;OptionParser&lt;/g1&gt;のすべてを&lt;g2&gt;公式の API ドキュメント&lt;/g2&gt;によって確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can see that now `@name` has a type `(String | Int32)`, which is read as a *union* of `String` and `Int32`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010212Z" creationid="hirofumiwakasugi" creationdate="20150904T135724Z">
        <seg>`@name` の型が `(String | Int32)` となっていますね。これは、`String` と `Int32` 型の「組み合わせ (ユニオン)」を意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can simplify our constructor by using a shorter syntax for assigning a method argument to an instance variable:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121925Z" creationid="hirofumiwakasugi" creationdate="20150904T121925Z">
        <seg>コンストラクタの引数にインスタンス変数を指定する短縮記法を使うと、インスタンス変数への代入をより簡潔に書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use a channel for this:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103712Z" creationid="akiji" creationdate="20200428T080929Z">
        <seg>そのような時にもチャネルが使えます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can use this function like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043715Z" creationid="hirofumiwakasugi" creationdate="20151005T043715Z">
        <seg>この関数を以下のように利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't do much with `person`, so lets add some concepts to it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T052628Z" creationid="hirofumiwakasugi" creationdate="20150904T022348Z">
        <seg>ただ、`person` インスタンスにはまだほとんど何の機能もありません。そこで、いくつかの機能を追加してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can't pass `proc` directly to it because `invoke` doesn't receive regular arguments, just a block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024509Z" creationid="hirofumiwakasugi" creationdate="20150917T024243Z">
        <seg>このとき、`proc` をそのまま渡すことはできません。なぜなら `invoke` が受け取るのはブロック引数であり、通常の引数ではないからです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We code the "come to existence" part with a special `initialize` method, which is normally called a *constructor*:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121539Z" creationid="hirofumiwakasugi" creationdate="20150904T055229Z">
        <seg>この「生まれる (インスタンスとして生成される) 」ときの処理には、`initialize` という特別なメソッドを使います。このメソッドを「コンストラクタ」と呼ぶこともあります。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We get an error because the compiler now treats `@pet` as an `Animal+`, which includes `Animal`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034316Z" creationid="hirofumiwakasugi" creationdate="20150910T034245Z">
        <seg>エラーになってしまいました。これは、コンパイラが `@pet` を `Animal+` と解釈しており、それは `Animal` 自身も含んでいることが原因です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have a way to tell the compiler so by marking the class as `abstract`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035443Z" creationid="hirofumiwakasugi" creationdate="20150910T035153Z">
        <seg>そこで、コンパイラにそのことを指示するための方法が用意されており、それはクラスを `abstract` と指定することです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We have two ways &lt;g1&gt;using the compiler&lt;/g1&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175657Z" creationid="makenowjust" creationdate="20200413T174225Z">
        <seg>&lt;g1&gt;コンパイラの実行方法&lt;/g1&gt;は2種類あります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We leave this as an exercise for the reader.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T185711Z" creationid="makenowjust" creationdate="20200413T185711Z">
        <seg>これを読者の課題とします。.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We should have known better: the type of the user input is the &lt;g1&gt;union type&lt;/g1&gt; &lt;g2&gt;String | Nil&lt;/g2&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182610Z" creationid="makenowjust" creationdate="20200413T182610Z">
        <seg>ユーザーの入力した値の型は&lt;g2&gt;String | Nil&lt;/g2&gt;という&lt;g1&gt;ユニオン型&lt;/g1&gt;なのです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We use `&amp;` to specify that we really want to pass `proc` as the block argument.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024614Z" creationid="hirofumiwakasugi" creationdate="20150917T024614Z">
        <seg>したがって、`proc` をブロック引数として渡すために `&amp;` を指定する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will store this information in instance variables, which are always prefixed with an *at* (`@`) character.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055029Z" creationid="hirofumiwakasugi" creationdate="20150904T055011Z">
        <seg>そして、これらの情報はインスタンス変数 (変数名の先頭は `@`) に保存します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will use yellow font on a black background:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T183317Z" creationid="makenowjust" creationdate="20200413T183317Z">
        <seg>黒い背景に黄色の文字で表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'd like to thank everyone that help us by sending pull requests, suggesting improvements and changes,
adding documentation, fixing tpyos and talking about it in social media like [Twitter](https://twitter.com/search?q=crystal-lang.org)
and [Reddit](http://www.reddit.com/r/crystal_programming).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151006T050655Z" creationid="hirofumiwakasugi" creationdate="20151006T050655Z">
        <seg>We'd like to thank everyone that help us by sending pull requests, suggesting improvements and changes,
adding documentation, fixing tpyos and talking about it in social media like [Twitter](https://twitter.com/search?q=crystal-lang.org)
and [Reddit](http://www.reddit.com/r/crystal_programming).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Well … magic!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174135Z" creationid="makenowjust" creationdate="20200413T172818Z">
        <seg>それは……魔法のように！　</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What happens if we create two different people, one with a `String` and one with an `Int32`? Let's try it:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135434Z" creationid="hirofumiwakasugi" creationdate="20150904T135434Z">
        <seg>それでは、もし2つの people を作るとき、一方は `String` 型でもう一方は `Int32` 型にした場合にはどうなるでしょうか？試してみましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>What the compiler doesn't know is that for us, `Animal` will never be instantiated as it doesn't make sense to instantiate one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035003Z" creationid="hirofumiwakasugi" creationdate="20150910T034728Z">
        <seg>`Animal` のインスタンス化には意味がないため、`Animal` を直接インスタンス化することは絶対にあり得ないでしょう。ただ、コンパイラにはその事情がわかりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;g1&gt;spec&lt;/g1&gt; is included, every object has the instance methods &lt;g2&gt;#should&lt;/g2&gt; and &lt;g3&gt;#should_not&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T233046Z" creationid="akiji" creationdate="20200505T132613Z">
        <seg>&lt;g1&gt;spec&lt;/g1&gt;がインクルードされると、すべてのオブジェクトにインスタンスメソッドとして&lt;g2&gt;#should&lt;/g2&gt; と &lt;g3&gt;#should_not&lt;/g3&gt;が追加されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When &lt;g2&gt;send&lt;/g2&gt; is executed, execution continues with the fiber that was waiting on that channel.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103716Z" creationid="akiji" creationdate="20200429T135104Z">
        <seg>&lt;g2&gt;send&lt;/g2&gt; が実行されると、そのチャネルを待ち受けていたファイバの実行が再開されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a case expression is a tuple literal there are a few semantic differences if a &lt;g1&gt;when&lt;/g1&gt; condition is also a tuple literal.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094320Z" creationid="makenowjust" creationdate="20200424T093432Z">
        <seg>caseの式にタプルリテラルで、&lt;g1&gt;when&lt;/g1&gt;の条件式もタプルリテラルの場合、少し異なる挙動をします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a macro is invoked you can access the current scope, or type, with a special instance variable: `@type`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041248Z" creationid="hirofumiwakasugi" creationdate="20151001T041248Z">
        <seg>マクロが実行される際に  `@type` という特別のインスタンス変数を使うことで、現在のスコープ、および型にアクセスすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a method is not found in a type it is looked up in this list.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140439Z" creationid="hirofumiwakasugi" creationdate="20150911T140403Z">
        <seg>そして、あるメソッドが自身の型に見つからないとき、そのリストをたどってメソッドを探します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a module is generic you include it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061110Z" creationid="hirofumiwakasugi" creationdate="20150924T061050Z">
        <seg>ジェネリックなモジュールは以下のようにインクルードします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a new Crystal version is released you can upgrade your system using:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053319Z" creationid="hirofumiwakasugi" creationdate="20150831T053319Z">
        <seg>新しいバージョンの Crystal がリリースされた場合には、以下でアップグレードすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a program starts, it fires up a main fiber that will execute your top-level code.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T055429Z" creationid="akiji" creationdate="20200428T055429Z">
        <seg>プログラムが開始されると、まずトップレベルコードを実行するためのメインファイバを起動します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When a variable's type combines different types under the same class hierarchy, its type becomes a **virtual type**.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T033018Z" creationid="hirofumiwakasugi" creationdate="20150910T031418Z">
        <seg>ある変数が、同一のクラス階層下の異なる型の組み合わせであるとき、その型は「virtual 型」となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When all elements of the array have the same type, &lt;g2&gt;T&lt;/g2&gt; equals to that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173013Z" creationid="makenowjust" creationdate="20200420T173013Z">
        <seg>すべての要素が同じ型を持っていた場合、&lt;g2&gt;T&lt;/g2&gt;はそれに等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When all have the same type, &lt;g3&gt;K&lt;/g3&gt;/&lt;g4&gt;V&lt;/g4&gt; equals to that.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175532Z" creationid="makenowjust" creationdate="20200420T175532Z">
        <seg>すべて同じ型であれば、&lt;g3&gt;K&lt;/g3&gt;および&lt;g4&gt;V&lt;/g4&gt;はそれに等しくなります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When an instance method has no doc comment, but a method with the same signature exists in a parent type, the documentation is inherited from the parent method.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213937Z" creationid="makenowjust" creationdate="20200412T213212Z">
        <seg>インスタンスメソッドがドキュメンテーションコメントを持たないが、親クラスで同じシグネチャのメソッドがあるときは、ドキュメントは親クラスのものから継承されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating an empty array you must always specify T:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142531Z" creationid="hirofumiwakasugi" creationdate="20150901T135810Z">
        <seg>空の配列を作りたいときには、必ず `T` を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When creating an empty hash you must always specify `K` and `V`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142507Z" creationid="hirofumiwakasugi" creationdate="20150901T142456Z">
        <seg>空のハッシュを作りたいときには、必ず `K` と `V` を指定しなければなりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When inheriting you can specify an instance of the generic type, or delegate type varaibles:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T061936Z">
        <seg>継承する際はに、具体的な型を指定するか、もしくは型変数を移譲することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When inheriting you can specify an instance of the generic type, or delegate type variables:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024526Z" creationid="hirofumiwakasugi" creationdate="20151009T024526Z">
        <seg>継承する際はに、具体的な型を指定するか、もしくは型変数を移譲することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When invoking a method without a receiver, like `add(1, 2)`, it will be searched in the program if not found in the current type or any of its ancestors.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021106Z" creationid="hirofumiwakasugi" creationdate="20150904T015450Z">
        <seg>例えば `add(1, 2)` など、レシーバを指定せずにメソッドを実行したとき、もしそのメソッドが自身の型とその継承元に見つからなかった場合は、プログラム内を探索します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When our application starts, the block passed to &lt;g1&gt;OptionParser#parse&lt;/g1&gt; gets executed.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T173243Z" creationid="makenowjust" creationdate="20200413T173243Z">
        <seg>プログラムが開始すると、まず&lt;g1&gt;OptionParser#parse&lt;/g1&gt;に渡されたブロックが実行されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When running the application, it will request a phrase to the user and the magic will happen!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T181714Z" creationid="makenowjust" creationdate="20200413T181714Z">
        <seg>このアプリケーションを実行すると、ユーザーにフレーズを要求して、そして魔法が起こります！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When running the example, Crystal will reply:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182446Z" creationid="makenowjust" creationdate="20200413T182446Z">
        <seg>これを実行しようとしてみると、 Crystal はこんな風にしてコンパイルに失敗するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When specifying a type, all elements in a tuple must match that type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030106Z" creationid="hirofumiwakasugi" creationdate="20150908T030106Z">
        <seg>このように型を指定した場合、タプルのすべての要素がその型である必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the first fiber reaches the &lt;g2&gt;socket.gets&lt;/g2&gt; line, it gets suspended, the Event Loop is told to continue executing this fiber when there's data in the socket, and the program continues with the second fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T065950Z" creationid="akiji" creationdate="20200428T065950Z">
        <seg>1つめのファイバは&lt;g2&gt;socket.gets&lt;/g2&gt;の行に到達すると一旦中断し、イベントループにソケットにデータが準備できた時点でこのファイバを再開するように伝えます。そして、プログラムは2つめのファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the method has many default arguments the order of the names in the invocation doesn't matter, and some names can be omitted:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024050Z" creationid="hirofumiwakasugi" creationdate="20151009T024050Z">
        <seg>メソッドがデフォルト引数を複数持つときには、メソッド実行時の引数の順序に関係なく、指定した名前の引数として渡されます。また、引数を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the method has many default arguments the order of the names in the invocation doesn't matter, and some names can be ommited:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T114022Z" creationid="hirofumiwakasugi" creationdate="20150906T113107Z">
        <seg>メソッドがデフォルト引数を複数持つときには、メソッド実行時の引数の順序に関係なく、指定した名前の引数として渡されます。また、引数を省略することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When the user presses &lt;g5&gt;Enter&lt;/g5&gt;, then the execution will continue and &lt;g6&gt;user_input&lt;/g6&gt; will have the user value.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182110Z" creationid="makenowjust" creationdate="20200413T182038Z">
        <seg>ユーザーが&lt;g5&gt;Enter&lt;/g5&gt;を押すと、実行が再開して&lt;g6&gt;user_input&lt;/g6&gt;にユーザーの入力した値が入ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When there are no other fibers ready to be executed, the event loop checks if there is any async operation that is ready, and then executes the fiber waiting for that operation.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T150654Z" creationid="akiji" creationdate="20200428T063200Z">
        <seg>他に実行可能なファイバが存在しない場合、イベントループは準備が完了しているな非同期処理があるかをチェックし、その処理を待っていたファイバを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When this fiber will have to wait for I/O, other fibers will be able to continue executing code until I/O is ready, and finally when the value is ready and sent through the channel, the main fiber will receive it.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103721Z" creationid="akiji" creationdate="20200429T141638Z">
        <seg>ファイバがI/Oを待たなければいけなくなった場合、I/Oの準備ができるまで他のファイバを実行し、値が到着しチャネルを通じてそれが送信されると、メインファイバがその値を受信します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When used in an &lt;g1&gt;if&lt;/g1&gt; in conjunction with a variable, &lt;g2&gt;is_a?&lt;/g2&gt;, &lt;g3&gt;responds_to?&lt;/g3&gt; or &lt;g4&gt;nil?&lt;/g4&gt; the compiler will restrict the types accordingly:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090210Z" creationid="makenowjust" creationdate="20200424T085742Z">
        <seg>&lt;g1&gt;if&lt;/g1&gt;の条件式の論理積の中の&lt;g2&gt;is_a?&lt;/g2&gt;や&lt;g3&gt;responds_to?&lt;/g3&gt;、&lt;g4&gt;nil?&lt;/g4&gt;に対してこれを使うと、コンパイラはそれに応じて変数の型を適切に制約します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When using blocks with `yield`, the blocks are **always** inlined: no closures, calls or function pointers are involved.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031351Z" creationid="hirofumiwakasugi" creationdate="20150916T031137Z">
        <seg>ブロックを `yield` するとき、そのブロックは**常に**インライン展開されます。クロージャやメソッド呼び出し、そして関数ポインタなどが使われることはありません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we invoke &lt;g1&gt;channel.receive&lt;/g1&gt;, the main fiber blocks and execution continues with the spawned fiber.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T081114Z" creationid="akiji" creationdate="20200428T081114Z">
        <seg>&lt;g1&gt;channel.receive&lt;/g1&gt;が実行された時点で、メインファイバがブロックされ、生成されたファイバに処理が移ります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When we wrote:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131930Z" creationid="hirofumiwakasugi" creationdate="20150904T131930Z">
        <seg>例えば、以下のように書いたとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When you invoke `super`, the first type in this ancestors list is used.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T140534Z" creationid="hirofumiwakasugi" creationdate="20150911T140534Z">
        <seg>また、`super` を実行したときには、その先祖リストの先頭の型が対象となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>When:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005824Z" creationid="hirofumiwakasugi" creationdate="20151009T005824Z">
        <seg>以下の場合、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>While command literals may prove useful for simple script-like tools, special caution is advised when interpolating user input because it may easily lead to command injection.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173138Z" creationid="makenowjust" creationdate="20200422T173138Z">
        <seg>コマンドリテラルはスクリプトのような簡易的な利用時に便利ですが、補間を使う場合にはコマンドインジェクションが起こらないように注意する特別の注意を払う必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Whitespace</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T210606Z" creationid="makenowjust" creationdate="20200412T204829Z">
        <seg>空白 (Whitespace)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Why is this so?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060015Z" creationid="hirofumiwakasugi" creationdate="20150904T060012Z">
        <seg>これは一体どういうことでしょう？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With `alias` you can give a type a different name:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070808Z" creationid="hirofumiwakasugi" creationdate="20150919T070808Z">
        <seg>`alias` を使うと、型に別名をつけることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With a buffered channel, invoking &lt;g1&gt;send&lt;/g1&gt; won't switch to another fiber unless the buffer is full:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T103753Z" creationid="akiji" creationdate="20200429T143851Z">
        <seg>バッファ付きのチャネルを使った場合、&lt;g1&gt;send&lt;/g1&gt;が実行されてもバッファが一杯になるまでは他のファイバに処理が切り替わりません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a class, separate method definitions, constants and inner class definitions with &lt;g1&gt;one newline&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205207Z" creationid="makenowjust" creationdate="20200412T205207Z">
        <seg>クラス内で、メソッド定義や定数、そして内部のクラス定義は&lt;g1&gt;間を1行空ける&lt;/g1&gt;ことで分割してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a class, separate method definitions, constants and inner class definitions with __one newline__.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012154Z" creationid="hirofumiwakasugi" creationdate="20151010T012140Z">
        <seg>クラス内で、メソッド定義や定数、そして内部のクラス定義は「間を1行空ける」ことで分割してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Within a project:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011128Z" creationid="hirofumiwakasugi" creationdate="20151010T011102Z">
        <seg>プロジェクト内では以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments and without parentheses, all of a method's arguments are forwarded to the parent call:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024757Z" creationid="hirofumiwakasugi" creationdate="20150910T024757Z">
        <seg>引数とカッコなしで実行すると、メソッドの引数がそのまま親メソッドに渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments nor parenthesis, `previous_def` receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123544Z" creationid="hirofumiwakasugi" creationdate="20150904T123414Z">
        <seg>`previous_def` を引数なし、かつカッコもなしで実行したとき、そのメソッドが受け取った引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without arguments nor parenthesis, `super` receives the same arguments as the method's arguments.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024815Z" creationid="hirofumiwakasugi" creationdate="20150910T024815Z">
        <seg>`super` を引数なし、かつカッコもなしで実行したとき、そのメソッドが受け取った引数がそのまま渡されます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Without the `as` expression, the inferred type would have been `Int32` and we wouldn't have been able to add a `Float64` into it.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061632Z" creationid="hirofumiwakasugi" creationdate="20150930T061632Z">
        <seg>もし `as` 式がなければ、推論された型は `Int32` なので、それに対して `Float64` を追加することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write  # 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114623Z" creationid="hirofumiwakasugi" creationdate="20150914T114623Z">
        <seg>Write  # 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Write &lt;g1&gt;documentation&lt;/g1&gt; to express the purpose of your code and support the &lt;g2&gt;crystal docs&lt;/g2&gt; generator.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T220645Z" creationid="makenowjust" creationdate="20200412T220645Z">
        <seg>コードの目的を説明するための &lt;g1&gt;ドキュメント&lt;/g1&gt;を書いてください。そして&lt;g2&gt;crystal docs&lt;/g2&gt;ジェネレータをサポートしましょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Writing a program in a single file is OK for little snippets and small benchmark code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162128Z" creationid="hirofumiwakasugi" creationdate="20150905T143450Z">
        <seg>小さなプログラムやベンチマーク用途のコードであれば1つのファイルに書いても OK ですが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.some_fun 1 # Error: argument 'value' of 'X#some_fun'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023236Z" creationid="hirofumiwakasugi" creationdate="20151008T023200Z">
        <seg>X.some_fun 1 # エラー: 'X#some_fun' の引数 'value' は</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.some_fun 1 # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023914Z" creationid="hirofumiwakasugi" creationdate="20151008T023914Z">
        <seg>X.some_fun 1 # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X.variadic(1, 2, 3, 4)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040910Z" creationid="hirofumiwakasugi" creationdate="20151005T040910Z">
        <seg>X.variadic(1, 2, 3, 4)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X::SomeEnum #=&gt; 1_i32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053222Z" creationid="hirofumiwakasugi" creationdate="20151007T053222Z">
        <seg>X::SomeEnum #=&gt; 1_i32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>X::SomeEnum::Zero #=&gt; 0_i8
X::SomeEnum::Two  #=&gt; 2_i8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053246Z" creationid="hirofumiwakasugi" creationdate="20151007T053246Z">
        <seg>X::SomeEnum::Zero #=&gt; 0_i8
X::SomeEnum::Two  #=&gt; 2_i8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Yellow      # 6 (5 + 1)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024420Z" creationid="hirofumiwakasugi" creationdate="20150914T024420Z">
        <seg>Yellow      # 6 (5 + 1)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can &lt;g1&gt;require&lt;/g1&gt; code defined in other files:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161921Z" creationid="makenowjust" creationdate="20200413T161921Z">
        <seg>&lt;g1&gt;require&lt;/g1&gt;で、他のファイルで定義されたコードを読み込むことができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can `yield` many values:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021124Z" creationid="hirofumiwakasugi" creationdate="20150916T021124Z">
        <seg>複数の値を `yield` することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can actually pass a proc to a method that yields:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025122Z" creationid="hirofumiwakasugi" creationdate="20150917T024946Z">
        <seg>proc を yield するメソッドに渡すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also declare constants inside a `lib` declaration:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022113Z" creationid="hirofumiwakasugi" creationdate="20151008T022113Z">
        <seg>`lib` 宣言の内部で定数を宣言することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also initialize some fields with a syntax similar to [named arguments](../default_and_named_arguments.html):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050541Z" creationid="hirofumiwakasugi" creationdate="20151007T050402Z">
        <seg>フィールドは[名前付き引数](../default_and_named_arguments.html)と同様のシンタックスを使って初期化することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also rescue multiple exception types at once by specifying a union type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010129Z" creationid="hirofumiwakasugi" creationdate="20150907T012547Z">
        <seg>また、型の組み合わせ (ユニオン型) を指定すれば、複数の例外を同時に補足することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also spawn by passing a method call instead of a block.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200428T080049Z" creationid="akiji" creationdate="20200428T080049Z">
        <seg>ブロックを与える代わりに、メソッドの呼び出しを渡してファイバを生成することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also specify many fields of the same type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045750Z" creationid="hirofumiwakasugi" creationdate="20151007T045711Z">
        <seg>同じ型のフィールドは複数指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use "../" to access parent directories relative to the current file, so &lt;g1&gt;require "../../foo/bar"&lt;/g1&gt; works as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T091435Z" creationid="makenowjust" creationdate="20200427T091435Z">
        <seg>また、 "../" を使えば現在のファイルの親ディレクトリを指定することができ、&lt;g1&gt;require "../../foo/bar"&lt;/g1&gt; のように書くこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use "../" to access parent directories relative to the current file, so `require "../../foo/bar"` works as well.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162316Z" creationid="hirofumiwakasugi" creationdate="20150905T160900Z">
        <seg>また、「../」を使えば、現在のファイルの親ディレクトリを指定することができます。`require "../../foo/bar"` のように書くことも同様に可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use a "heredoc" for creating string:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061829Z" creationid="hirofumiwakasugi" creationdate="20160204T061823Z">
        <seg>文字列はヒアドキュメント (heredoc) を使って生成することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use a string as a name if the name is not a valid identifier or type name:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041701Z" creationid="hirofumiwakasugi" creationdate="20151005T041505Z">
        <seg>もし名前が識別子や型名として不正なものであるときは、文字列を名前として使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also use the `&amp;block` syntax to forward blocks, but then you have to at least specify the input types, and the generated code will involve closures and will be slower:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030542Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>ブロックのフォワーディングに `&amp;block` を利用することも可能ですが、その場合には最低でも入力する型を指定しておかなければいけません。また、生成されたコードがクロージャを伴うため、速度的にも遅くなってしまいます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can assign the same value to multiple variables using chained assignment:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175031Z" creationid="makenowjust" creationdate="20200422T175031Z">
        <seg>連続した代入を用いることで、同じ値を複数の変数に一度に代入することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can bind to variadic functions:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040908Z" creationid="hirofumiwakasugi" creationdate="20151005T040821Z">
        <seg>可変長引数を持つ関数にバインディングすることもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can compile and run specs from folder trees, individual files, or specific lines in a file.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T065123Z" creationid="akiji" creationdate="20200518T065123Z">
        <seg>specはフォルダ全体や、単独のファイル、ファイル内の特定の行といった単位で実行可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can declare/assign multiple variables at the same time by separating expressions with a comma (&lt;g1&gt;,&lt;/g1&gt;):</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175351Z" creationid="makenowjust" creationdate="20200422T175351Z">
        <seg>複数の式をカンマ記号 (&lt;g1&gt;,&lt;/g1&gt;) で区切って代入すると、複数の変数に対して同時に宣言/代入を行うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can declare/assign multiple variables at the same time by separating expressions with a comma (`,`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055429Z" creationid="hirofumiwakasugi" creationdate="20150902T055400Z">
        <seg>複数の式をカンマ記号 (`,`) で区切って代入すると、複数の変数に対して同時に宣言/代入を行うことができます (多重代入) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define &lt;g1&gt;local variables&lt;/g1&gt; without the need to specify their type:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161955Z" creationid="makenowjust" creationdate="20200413T161955Z">
        <seg>型を指定することなく&lt;g1&gt;ローカル変数&lt;/g1&gt;を定義することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can define an operator for a type like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025208Z" creationid="hirofumiwakasugi" creationdate="20150909T025135Z">
        <seg>ある型に演算子を定義したい場合は以下のようにします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this with `::`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T095249Z" creationid="hirofumiwakasugi" creationdate="20150905T093313Z">
        <seg>その場合は、`::` を使って型を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can do this with `:`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061734Z" creationid="hirofumiwakasugi" creationdate="20160204T061734Z">
        <seg>その場合は、`:` を使って型を指定できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can easily create strings with embedded content, known as string interpolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162559Z" creationid="makenowjust" creationdate="20200413T162559Z">
        <seg>文字列埋め込み (string interpolation) を使うと、簡単に文字列に式を埋め込むことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can go ahead and put a type restriction like `def initialize(@name : String)`, but that makes the code a bit more verbose and also less generic: everything will work just fine if you create `Person` instance with types that have the same *interface* as a `String`, as long as you use a `Person`'s name like if it were a `String`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T045640Z" creationid="hirofumiwakasugi" creationdate="20150905T044959Z">
        <seg>さらに一歩進んで、`def initialize(@name : String)` のように書くことで型を制約することも可能です。ただ、こうすると、コードが少し冗長になり、汎用性を欠いたものになってしまいます。`Person` の `name` を常に `String` として扱っている限り、`String` の「インターフェース」を持つ型で `Person` のインスタンスを作成すれば、すべては問題なく動作するでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a **fixed subset** of methods on AST nodes at compile-time.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035116Z" creationid="hirofumiwakasugi" creationdate="20151001T034959Z">
        <seg>コンパイル時に、メソッドの **規定のサブセット** を AST ノードに対して実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a method on the &lt;g1&gt;case&lt;/g1&gt;'s expression in a &lt;g2&gt;when&lt;/g2&gt; by using the implicit-object syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093129Z" creationid="makenowjust" creationdate="20200424T093129Z">
        <seg>暗黙的なオブジェクト指定の構文を使って、&lt;g1&gt;case&lt;/g1&gt;の式に対して&lt;g2&gt;when&lt;/g2&gt;でメソッドを呼ぶことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a method on the `case`'s expression in a `when` by using the implicit-object syntax:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010100Z" creationid="hirofumiwakasugi" creationdate="20151001T010100Z">
        <seg>`case` 式に対してメソッドを実行することも可能です。このとき、`when` 節では暗黙的なオブジェクト指定の記法を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a superclass' method using `super`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024551Z" creationid="hirofumiwakasugi" creationdate="20150910T024551Z">
        <seg>`super` を使うと、スーパークラスのメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke a superclass' method using `super`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025259Z" creationid="hirofumiwakasugi" creationdate="20151009T025259Z">
        <seg>`super` を使うと、スーパークラスのメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can invoke the previously redefined method with `previous_def`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123321Z" creationid="hirofumiwakasugi" creationdate="20150904T123121Z">
        <seg>そのとき、`previous_def` を使うと以前に定義されたメソッドを実行することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make a class generic based on one or more type variables.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065621Z" creationid="hirofumiwakasugi" creationdate="20150912T061658Z">
        <seg>型変数を使うことで、クラスを汎用的なものにすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can make this more evident by declaring a dummy block argument, indicated as a last argument prefixed with ampersand (`&amp;`):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014659Z" creationid="hirofumiwakasugi" creationdate="20150916T014318Z">
        <seg>ダミーのブロック引数を宣言することで、上記をより明確に示すことも可能です。先頭がアンパサンド (`&amp;`) の引数を最後の引数として設定してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can omit the parentheses if the function doesn't have arguments (and omit them in the call as well):</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040635Z" creationid="hirofumiwakasugi" creationdate="20151005T040635Z">
        <seg>もし関数が引数を持たないものであれば、カッコを省略することができます (呼び出しの際にも同様に省略可能です) 。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can override methods in a derived class:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024143Z" creationid="hirofumiwakasugi" creationdate="20150910T023945Z">
        <seg>派生クラスではメソッドをオーバーライドすることが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can read this document from top to bottom, but it’s advisable to jump through sections because some concepts are interrelated and can’t be explained in isolation.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072303Z" creationid="hirofumiwakasugi" creationdate="20150901T071512Z">
        <seg>本ドキュメントは基本的に最初から順番に読んでいけるように構成されています。ただ、コンセプトによっては、それぞれのコンセプトが相互に関連していて、どうしても単独では説明が難しいものがあります。そういった場合には、順番にこだわらず、別のセクションにジャンプしながら読み進めるのがよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see `@address` is `String?`, which is a short form notation of `String | Nil`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054358Z" creationid="hirofumiwakasugi" creationdate="20150905T054244Z">
        <seg>`@address` が `String?` となっています。これは `String | Nil` の短縮表記です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see that `@pet` is `Animal+`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T032302Z" creationid="hirofumiwakasugi" creationdate="20150910T032302Z">
        <seg>`@pet` が `Animal+` になっているのがわかるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can set and get its properties:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050433Z" creationid="hirofumiwakasugi" creationdate="20151007T050315Z">
        <seg>プロパティの設定、および参照が可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify the value of a member:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052946Z" creationid="hirofumiwakasugi" creationdate="20151007T052946Z">
        <seg>要素の値を指定することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can specify type restrictions in splats:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025928Z" creationid="hirofumiwakasugi" creationdate="20150908T025928Z">
        <seg>splat 展開でも型制約を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can submit a pull request to this repository:
https://github.com/crystal-lang/crystal-book</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T165157Z" creationid="makenowjust" creationdate="20200413T164423Z">
        <seg>Pull Requestはこれらのリポジトリに投稿してください:
(オリジナル) https://github.com/crystal-lang/crystal-book, (この翻訳) https://github.com/crystal-jp/ja.crystal-lang.org</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can test these flags with `ifdef`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043200Z" creationid="hirofumiwakasugi" creationdate="20150908T043119Z">
        <seg>フラグのチェックには `ifdef` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an &lt;g1&gt;&amp;&amp;&lt;/g1&gt; as syntax sugar of an &lt;g2&gt;if&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101627Z" creationid="makenowjust" creationdate="20200424T101627Z">
        <seg>したがって&lt;g1&gt;&amp;&amp;&lt;/g1&gt;は&lt;g2&gt;if&lt;/g2&gt;のシンタックスシュガーのように考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an &lt;g1&gt;||&lt;/g1&gt; as syntax sugar of an &lt;g2&gt;if&lt;/g2&gt;:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101806Z" creationid="makenowjust" creationdate="20200424T101806Z">
        <seg>したがって&lt;g1&gt;||&lt;/g1&gt;は&lt;g2&gt;if&lt;/g2&gt;のシンタックスシュガーのように考えられます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an `&amp;&amp;` as syntax sugar of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052613Z" creationid="hirofumiwakasugi" creationdate="20150905T052613Z">
        <seg>したがって、`&amp;&amp;` を `if` のシンタックスシュガーとして利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think an `||` as syntax sugar of an `if`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052658Z" creationid="hirofumiwakasugi" creationdate="20150905T052658Z">
        <seg>したがって、`||` を `if` のシンタックスシュガーとして利用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can think of yourself being in the kitchen cooking: you chop an onion, put it to fry, and while it's being fried you chop a tomato, but you are not doing all of those things at the same time: you distribute your time between those tasks.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200504T064705Z" creationid="akiji" creationdate="20200428T053704Z">
        <seg>キッチンで料理をしているところを考えてみましょう。あなたは玉ねぎをきざんでフライパンに放り込み、それが炒め上がるまでの間にトマトを切ったりできます。しかし、すべての動作を同時に行うのではなく、それぞれのタスクにあなたの時間を割り振って処理することでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can turn off colors with the switch &lt;g1&gt;--no-color&lt;/g1&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200518T070536Z" creationid="akiji" creationdate="20200518T065713Z">
        <seg>&lt;g1&gt;--no-color&lt;/g1&gt;スイッチを指定すると、出力の色分けを停止できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use &lt;g1&gt;break&lt;/g1&gt; to break out of a &lt;g2&gt;while&lt;/g2&gt; loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115411Z" creationid="makenowjust" creationdate="20200417T115411Z">
        <seg>&lt;g2&gt;while&lt;/g2&gt;のループを抜けるためには&lt;g1&gt;break&lt;/g1&gt;を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use &lt;g1&gt;next&lt;/g1&gt; to try to execute the next iteration of a &lt;g2&gt;while&lt;/g2&gt; loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095815Z" creationid="makenowjust" creationdate="20200424T095742Z">
        <seg>&lt;g2&gt;while&lt;/g2&gt;のループで&lt;g1&gt;next&lt;/g1&gt;を使うと、次の繰り返しにジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `&amp;&amp;`, `||` and `|`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043338Z" creationid="hirofumiwakasugi" creationdate="20150908T043338Z">
        <seg>`&amp;&amp;`/`||`/`|` を使うこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `break` to break out of a `while` loop:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052238Z" creationid="hirofumiwakasugi" creationdate="20150905T052238Z">
        <seg>`while` のループを抜けるためには `break` を使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `next` to try to execute the next iteration of a `while` loop.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052314Z" creationid="hirofumiwakasugi" creationdate="20150905T052314Z">
        <seg>`while` のループで `next` を使うと、次の繰り返しにジャンプすることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use `self.class` to restrict to the Person type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025304Z" creationid="hirofumiwakasugi" creationdate="20150908T025304Z">
        <seg>制約の対象を Person クラスにする場合には、`self.class` を使用してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160120T094448Z" creationid="hirofumiwakasugi" creationdate="20150901T075458Z">
        <seg>バックスラッシュと「*u*」に続けて16進数で4つの数値を入力することでコードポイントを示すこともできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash followed by at most three digits to denote a code point written in octal:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T075508Z" creationid="hirofumiwakasugi" creationdate="20150901T074606Z">
        <seg>バックスラッシュに続けて最大3つの数値を入力すると、8進数でコードポイントを指定することになります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a backslash to denote some characters:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074550Z" creationid="hirofumiwakasugi" creationdate="20150901T074550Z">
        <seg>いくつかの文字はバックスラッシュを使って表します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a special array literal syntax with other types too, as long as they define an argless `new` method and a `&lt;&lt;` method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143104Z" creationid="hirofumiwakasugi" creationdate="20150901T140211Z">
        <seg>配列が持つ特別なシンタックスを他の型で使うこともできます。ただし、引数のない `new` と `&lt;&lt;` メソッドが定義されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use a special hash literal syntax with other types too, as long as they define an argless `new` method and a `[]=` method:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143049Z" creationid="hirofumiwakasugi" creationdate="20150901T143030Z">
        <seg>ハッシュが持つ特別なシンタックスを他の型で使うこともできます。ただし、引数のない `new` と `[]=` メソッドが定義されている必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use an enum as a type in a `fun` argument or `struct` or `union` members:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053347Z" creationid="hirofumiwakasugi" creationdate="20151007T053347Z">
        <seg>`fun` の引数や、`struct` と `union` のメンバーとしても enum を利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use code blocks, or simply &lt;g1&gt;blocks&lt;/g1&gt;, which are a very convenient way to reuse code and get some features from the functional world:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162532Z" creationid="makenowjust" creationdate="20200413T162532Z">
        <seg>&lt;g1&gt;ブロック&lt;/g1&gt;を使うと簡単にコードを再利用することができ、また、関数型の世界にあるいくつかの機能を利用することが可能になります</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use fresh variables with `%name`:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044647Z" creationid="hirofumiwakasugi" creationdate="20151002T015934Z">
        <seg>そこで、`%name` でフレッシュな変数を利用することができるようになっています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use function types in C declarations:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024211Z" creationid="hirofumiwakasugi" creationdate="20151008T024206Z">
        <seg>C の宣言の中で関数型を利用することが可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use it in your own project to make it familiar to other developers.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010145Z" creationid="hirofumiwakasugi" creationdate="20151010T010145Z">
        <seg>自分のプロジェクトでもこのスタイルを利用することで、他の開発者に親しみやすいものにすることができるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can use the method `ASTNode#id` in these cases, where you just need an identifier.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T034952Z" creationid="hirofumiwakasugi" creationdate="20151001T021114Z">
        <seg>こういった、識別子を必要とする場合には、 `ASTNode#id` を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, as always, define a constructor for your exception or just use the default one.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011857Z" creationid="hirofumiwakasugi" creationdate="20150907T011822Z">
        <seg>通常のクラスのように、自分でコンストラクタを定義することもできますし、デフォルトのコンストラクタを利用することも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can, of course, use &lt;g1&gt;receive&lt;/g1&gt; inside a spawned fiber:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200429T151056Z" creationid="akiji" creationdate="20200429T134352Z">
        <seg>もちろん、生成されたファイバ内で&lt;g1&gt;receive&lt;/g1&gt; を使うことも可能です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You create an instance of a class by invoking `new` on that class:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022301Z" creationid="hirofumiwakasugi" creationdate="20150904T022301Z">
        <seg>クラスのインスタンスを作成するには、クラスに対して `new` メソッドを実行します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You declare a class like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022024Z" creationid="hirofumiwakasugi" creationdate="20150904T022024Z">
        <seg>以下のようにクラスを定義します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You generally never invoke `allocate`, as it is [unsafe](unsafe.html), but that's the reason why `new` and `initialize` are related.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T120105Z" creationid="hirofumiwakasugi" creationdate="20150904T061148Z">
        <seg>`allocate` は「[安全でない (unsafe)](unsafe.html)」ため、一般的には自分で実行することはありません。`new` と `initialize` がこういった関係性になっているのはこのことが理由です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may find a list of &lt;g1&gt;available colors&lt;/g1&gt; and &lt;g2&gt;text decorations&lt;/g2&gt; in the &lt;g3&gt;API documentation&lt;/g3&gt;.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184712Z" creationid="makenowjust" creationdate="20200413T184712Z">
        <seg>&lt;g1&gt;利用できる色&lt;/g1&gt;や&lt;g2&gt;テキストの装飾&lt;/g2&gt;の一覧は&lt;g3&gt;API ドキュメント&lt;/g3&gt;で確認できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You may use &lt;g1&gt;then&lt;/g1&gt; after the &lt;g2&gt;when&lt;/g2&gt; condition to place the body on a single line.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093220Z" creationid="makenowjust" creationdate="20200424T093220Z">
        <seg>&lt;g2&gt;when&lt;/g2&gt;の条件のあとに&lt;g1&gt;then&lt;/g1&gt;を置くことで、1行で本体を書くことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You might also want to read the [contributing guide](https://github.com/manastech/crystal/blob/master/Contributing.md).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T061648Z" creationid="hirofumiwakasugi" creationdate="20150831T060755Z">
        <seg>また、[コントリビューティング・ガイド](https://github.com/manastech/crystal/blob/master/Contributing.md) にも目を通しておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You must copy this `.o` file to that system and execute those commands.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045705Z" creationid="hirofumiwakasugi" creationdate="20150909T045636Z">
        <seg>`.o` ファイルを対象のシステム上にコピーし、上記のコマンドを実行してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You program by invoking &lt;g1&gt;methods&lt;/g1&gt; (or sending messages) to objects.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162424Z" creationid="makenowjust" creationdate="20200413T162424Z">
        <seg>オブジェクトに対して&lt;g1&gt;メソッド&lt;/g1&gt;を実行 (またはメッセージを送信) することでプログラムを構築します</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You raise exceptions by invoking a top-level `raise` method.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011037Z" creationid="hirofumiwakasugi" creationdate="20150907T010852Z">
        <seg>例外を発生させるにはトップレベルの `raise` メソッドを使います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use `{% if condition %}` ... `{% end %}` to conditionally generate code:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035951Z" creationid="hirofumiwakasugi" creationdate="20151001T035903Z">
        <seg>`{% if condition %}` ... `{% end %}` を使うことで、条件に応じてコードを生成することが可能になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You use `{{...}}` to paste, or interpolate, an AST node, as in the above example.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T021047Z" creationid="hirofumiwakasugi" creationdate="20151001T020723Z">
        <seg>前述した例にもあったように、AST ノードを貼り付け/埋め込みには `{{...}}` を使います。 </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will also need LLVM 3.5 or 3.6 present in the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021431Z" creationid="hirofumiwakasugi" creationdate="20151009T021431Z">
        <seg>また、あわせて LLVM 3.5 または 3.6 も必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You will also need LLVM 3.5 present in the path.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060327Z" creationid="hirofumiwakasugi" creationdate="20150831T060327Z">
        <seg>また、あわせて LLVM 3.5 も必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>Zero</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Zero,</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053245Z" creationid="hirofumiwakasugi" creationdate="20151007T053245Z">
        <seg>Zero,</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133855Z" creationid="hirofumiwakasugi" creationdate="20150911T133855Z">
        <seg>[1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[1, 2, 3]         # =&gt; Array(Int32)
[1, "hello", 'x'] # =&gt; Array(Int32 | String | Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173036Z" creationid="makenowjust" creationdate="20200420T173036Z">
        <seg>[1, 2, 3]         # =&gt; Array(Int32)
[1, "hello", 'x'] # =&gt; Array(Int32 | String | Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[Bool](http://crystal-lang.org/api/Bool.html) has only two possible values: `true` and `false`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022703Z" creationid="hirofumiwakasugi" creationdate="20150901T051015Z">
        <seg>真偽値 ([Bool](http://crystal-lang.org/api/Bool.html)) には2つだけ値が存在します。それは `true` と `false` です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[] of Int32 # =&gt; Array(Int32).new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173303Z" creationid="makenowjust" creationdate="20200420T173303Z">
        <seg>[] of Int32 # =&gt; Array(Int32).new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042925Z" creationid="hirofumiwakasugi" creationdate="20150907T042925Z">
        <seg>^
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^---------
Error: undefined method 'upper_case' for Nil (compile-time type is (String | Nil))</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T182455Z" creationid="makenowjust" creationdate="20200413T182455Z">
        <seg>^---------
Error: undefined method 'upper_case' for Nil (compile-time type is (String | Nil))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^~~</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043748Z" creationid="hirofumiwakasugi" creationdate="20150905T043748Z">
        <seg>^~~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>^~~~~~
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043751Z" creationid="hirofumiwakasugi" creationdate="20150905T043751Z">
        <seg>^~~~~~
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Constants__ are screaming-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010504Z" creationid="hirofumiwakasugi" creationdate="20151010T010453Z">
        <seg>__定数__はすべて大文字とします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Method names__ are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010308Z" creationid="hirofumiwakasugi" creationdate="20151010T010240Z">
        <seg>__メソッド名__はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Type names__ are camelcased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010223Z" creationid="hirofumiwakasugi" creationdate="20151010T010223Z">
        <seg>__型の名前__はキャメルケースとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>__Variable names__ are underscore-cased.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010356Z" creationid="hirofumiwakasugi" creationdate="20151010T010356Z">
        <seg>__変数名__はアンダースコア区切りとします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the extending type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014354Z" creationid="hirofumiwakasugi" creationdate="20151002T014354Z">
        <seg>`@type` は extend する側の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the including type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014244Z" creationid="hirofumiwakasugi" creationdate="20151002T013611Z">
        <seg>`@type` はインクルードする側の型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`@type` becomes the inherited type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T013521Z" creationid="hirofumiwakasugi" creationdate="20151002T012819Z">
        <seg>`@type` は継承されたサブクラスの型になります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Int32 | String` is read "Int32 or String".</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010534Z" creationid="hirofumiwakasugi" creationdate="20151009T010534Z">
        <seg>`Int32 | String` は「Int32 または String」と読みます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`Lib` names are prefixed with `Lib`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011011Z" creationid="hirofumiwakasugi" creationdate="20151010T010930Z">
        <seg>ライブラリ (`Lib`) の名前は先頭に `Lib` をつけます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052826Z" creationid="hirofumiwakasugi" creationdate="20150831T052826Z">
        <seg>```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ ./some_program
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072039Z" creationid="hirofumiwakasugi" creationdate="20150901T072039Z">
        <seg>```
$ ./some_program
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>```
$ crystal
Usage: crystal [command] [switches] [program file] [--] [arguments]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build --help
Usage: crystal build [options] [programfile] [--] [arguments]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072225Z" creationid="hirofumiwakasugi" creationdate="20150901T072225Z">
        <seg>```
$ crystal build --help
Usage: crystal build [options] [programfile] [--] [arguments]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072032Z" creationid="hirofumiwakasugi" creationdate="20150901T072032Z">
        <seg>```
$ crystal build some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal build some_program.cr --release
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072050Z" creationid="hirofumiwakasugi" creationdate="20150901T072050Z">
        <seg>```
$ crystal build some_program.cr --release
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal init lib MyCoolLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>```
$ crystal init lib MyCoolLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal run some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072015Z" creationid="hirofumiwakasugi" creationdate="20150901T072015Z">
        <seg>```
$ crystal run some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ crystal some_program.cr
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T071953Z" creationid="hirofumiwakasugi" creationdate="20150901T071953Z">
        <seg>```
$ crystal some_program.cr
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
$ xcode-select --install
$ xcode-select --switch /Library/Developer/CommandLineTools
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061245Z" creationid="hirofumiwakasugi" creationdate="20160204T061245Z">
        <seg>```
$ xcode-select --install
$ xcode-select --switch /Library/Developer/CommandLineTools
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
* You can define [local variables](../syntax_and_semantics/local_variables.html) without the need to specify their type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072614Z" creationid="hirofumiwakasugi" creationdate="20150901T072614Z">
        <seg>```
* 型を指定することなく[ローカル変数](../syntax_and_semantics/local_variables.html)を定義することができます</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
+- class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055707Z" creationid="hirofumiwakasugi" creationdate="20150912T055707Z">
        <seg>```
+- class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
+- generic class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063039Z" creationid="hirofumiwakasugi" creationdate="20150912T063039Z">
        <seg>```
+- generic class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
- class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135041Z" creationid="hirofumiwakasugi" creationdate="20150904T135041Z">
        <seg>```
- class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
- project</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155851Z" creationid="hirofumiwakasugi" creationdate="20150905T155851Z">
        <seg>```
- project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
Error in foo.cr:14: instantiating 'Person:Class#new(Int32)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043747Z" creationid="hirofumiwakasugi" creationdate="20150905T043747Z">
        <seg>```
Error in foo.cr:14: instantiating 'Person:Class#new(Int32)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
Error in foo.cr:6: instantiating 'add(Bool, Bool)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042908Z" creationid="hirofumiwakasugi" creationdate="20150907T042908Z">
        <seg>```
Error in foo.cr:6: instantiating 'add(Bool, Bool)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
The status information from the child process is stored in the object
that status_ptr points to, unless status_ptr is a null pointer.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043702Z" creationid="hirofumiwakasugi" creationdate="20151005T043408Z">
        <seg>```
status_ptr が指すオブジェクトに保持されている子プロセスからのステータス情報
(ただし status_ptr が NULL ポインタでない場合に限る)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
apt-key adv --keyserver keys.gnupg.net --recv-keys 09617FD37CC06B54
echo "deb http://dist.crystal-lang.org/apt crystal main" &gt; /etc/apt/sources.list.d/crystal.list
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053122Z" creationid="hirofumiwakasugi" creationdate="20150831T053122Z">
        <seg>```
apt-key adv --keyserver keys.gnupg.net --recv-keys 09617FD37CC06B54
echo "deb http://dist.crystal-lang.org/apt crystal main" &gt; /etc/apt/sources.list.d/crystal.list
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew install crystal-lang --with-llvm
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055354Z" creationid="hirofumiwakasugi" creationdate="20150831T055354Z">
        <seg>```
brew install crystal-lang --with-llvm
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew tap manastech/crystal
brew update
brew install crystal-lang
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055251Z" creationid="hirofumiwakasugi" creationdate="20150831T055251Z">
        <seg>```
brew tap manastech/crystal
brew update
brew install crystal-lang
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
brew update
brew install crystal-lang
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T024217Z" creationid="hirofumiwakasugi" creationdate="20151102T024217Z">
        <seg>```
brew update
brew install crystal-lang
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
git clone https://github.com/manastech/crystal.git
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060510Z" creationid="hirofumiwakasugi" creationdate="20150831T060510Z">
        <seg>```
git clone https://github.com/manastech/crystal.git
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
ld: library not found for -levent
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061025Z" creationid="hirofumiwakasugi" creationdate="20160204T061025Z">
        <seg>```
ld: library not found for -levent
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060038Z" creationid="hirofumiwakasugi" creationdate="20150902T060038Z">
        <seg>```
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
person = Person.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022302Z" creationid="hirofumiwakasugi" creationdate="20150904T022302Z">
        <seg>```
person = Person.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
rpm --import http://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055109Z" creationid="hirofumiwakasugi" creationdate="20150831T055109Z">
        <seg>```
rpm --import http://dist.crystal-lang.org/rpm/RPM-GPG-KEY</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo apt-get install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053130Z" creationid="hirofumiwakasugi" creationdate="20150831T053130Z">
        <seg>```
sudo apt-get install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo apt-get update
sudo apt-get install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T053324Z" creationid="hirofumiwakasugi" creationdate="20150831T053324Z">
        <seg>```
sudo apt-get update
sudo apt-get install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo pacman -S crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021541Z" creationid="hirofumiwakasugi" creationdate="20151009T021541Z">
        <seg>```
sudo pacman -S crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo yum install crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055112Z" creationid="hirofumiwakasugi" creationdate="20150831T055112Z">
        <seg>```
sudo yum install crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```
sudo yum update crystal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055113Z" creationid="hirofumiwakasugi" creationdate="20150831T055113Z">
        <seg>```
sudo yum update crystal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# Returns the number of horns this unicorn has.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140134Z" creationid="hirofumiwakasugi" creationdate="20151010T140134Z">
        <seg>``````crystal
# Returns the number of horns this unicorn has.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140804Z" creationid="hirofumiwakasugi" creationdate="20151010T140804Z">
        <seg>``````crystal
# ```
# unicorn = Unicorn.new
# unicorn.speak
# ```
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>``````crystal
# ```text
# "I'm a unicorn"
# ```
``````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141211Z" creationid="hirofumiwakasugi" creationdate="20151010T141211Z">
        <seg>``````crystal
# ```text
# "I'm a unicorn"
# ```
``````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`````crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forhead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>`````crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forhead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
$ uname -m -s
Darwin x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043008Z" creationid="hirofumiwakasugi" creationdate="20150908T043008Z">
        <seg>```bash
$ uname -m -s
Darwin x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045614Z" creationid="hirofumiwakasugi" creationdate="20150909T045614Z">
        <seg>```bash
cc your_program.o -o your_program -lpcre -lrt -lm -lgc -lunwind
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```bash
crystal build your_program.cr --cross-compile "Linux x86_64" --target "x86_64-unknown-linux-gnu"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T045412Z" creationid="hirofumiwakasugi" creationdate="20150909T045412Z">
        <seg>```bash
crystal build your_program.cr --cross-compile "Linux x86_64" --target "x86_64-unknown-linux-gnu"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\"" # double quote
"\\" # backslash
"\e" # escape
"\f" # form feed
"\n" # newline
"\r" # carriage return
"\t" # tab
"\v" # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025840Z" creationid="hirofumiwakasugi" creationdate="20151009T025840Z">
        <seg>```crystal
"\"" # ダブルクォート
"\\" # バックスラッシュ
"\e" # エスケープ
"\f" # フォームフィード (改ページ)
"\n" # ニューライン (改行)
"\r" # キャリッジリターン (復帰)
"\t" # タブ
"\v" # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # string with one character with code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025846Z" creationid="hirofumiwakasugi" creationdate="20151009T025846Z">
        <seg>```crystal
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # コードポイント1の文字が1つだけの文字列
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u0041" # == "A"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025847Z" creationid="hirofumiwakasugi" creationdate="20151009T025847Z">
        <seg>```crystal
"\u0041" # == "A"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025849Z" creationid="hirofumiwakasugi" creationdate="20151009T025849Z">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "🔮"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153403Z" creationid="hirofumiwakasugi" creationdate="20160115T153403Z">
        <seg>```crystal
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025850Z" creationid="hirofumiwakasugi" creationdate="20151009T025850Z">
        <seg>```crystal
"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025853Z" creationid="hirofumiwakasugi" creationdate="20151009T025853Z">
        <seg>```crystal
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025854Z" creationid="hirofumiwakasugi" creationdate="20151009T025854Z">
        <seg>```crystal
"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
"hello world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025833Z" creationid="hirofumiwakasugi" creationdate="20151009T025833Z">
        <seg>```crystal
"hello world"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
#     unicorn = Unicorn.new
#     unicorn.speak 
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140827Z" creationid="hirofumiwakasugi" creationdate="20151010T140827Z">
        <seg>```crystal
#     unicorn = Unicorn.new
#     unicorn.speak 
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A class that has a + method but isn't a Number
class Six</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135827Z" creationid="hirofumiwakasugi" creationdate="20151009T135820Z">
        <seg>```crystal
# + メソッドを持っているが Number ではないクラス
class Six</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A proc without arguments
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025739Z" creationid="hirofumiwakasugi" creationdate="20151009T025739Z">
        <seg>```crystal
# 引数のない Proc
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A setter
person.name=("John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022436Z" creationid="hirofumiwakasugi" creationdate="20151009T022436Z">
        <seg>```crystal
# A setter
person.name=("John")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033514Z" creationid="hirofumiwakasugi" creationdate="20151010T033514Z">
        <seg>```crystal
# A unicorn is a **legendary animal** (see the `Legendary` module) that has been
# described since antiquity as a beast with a large, spiraling horn projecting
# from its forehead.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Assigns to a local variable
local = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022435Z" creationid="hirofumiwakasugi" creationdate="20151009T022435Z">
        <seg>```crystal
# Assigns to a local variable
local = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Check the number of horns with `#horns`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142313Z" creationid="hirofumiwakasugi" creationdate="20151010T142313Z">
        <seg>```crystal
# Check the number of horns with `#horns`.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Clearer than the above: `a` doesn't need
# to be in the exception handling code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024310Z" creationid="hirofumiwakasugi" creationdate="20151009T024303Z">
        <seg>```crystal
# 例外処理のコードの内部で `a` を宣言する必要はないため、
# こう書くことでより意図が明確になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140504Z" creationid="hirofumiwakasugi" creationdate="20151010T140504Z">
        <seg>```crystal
# Creates a unicorn with the specified number of *horns*.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Defines a method in the program
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135409Z" creationid="hirofumiwakasugi" creationdate="20151009T135409Z">
        <seg>```crystal
# プログラムにメソッドを定義
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Error: undefined method 'size' for Nil
john.address.size
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025400Z" creationid="hirofumiwakasugi" creationdate="20151009T025400Z">
        <seg>```crystal
# Error: undefined method 'size' for Nil
john.address.size
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# First option: assign it to a variable
if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024634Z" creationid="hirofumiwakasugi" creationdate="20151009T024634Z">
        <seg>```crystal
# 方法1: 変数に代入する
if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# In file one.cr
private def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140057Z" creationid="hirofumiwakasugi" creationdate="20151009T140057Z">
        <seg>```crystal
# one.cr ファイル
private def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# On a 64 bits machine
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135332Z" creationid="hirofumiwakasugi" creationdate="20151009T135332Z">
        <seg>```crystal
# 64ビット処理系の場合
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# One for each thread
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022455Z" creationid="hirofumiwakasugi" creationdate="20151009T022449Z">
        <seg>```crystal
# スレッドごとに1つずつ
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as "Hello\n  world"
&lt;&lt;-STRING</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062422Z" creationid="hirofumiwakasugi" creationdate="20160204T062352Z">
        <seg>```crystal
# "Hello\n  world" と同じ
&lt;&lt;-STRING</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as callback(NULL) in C
X.callback nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022911Z" creationid="hirofumiwakasugi" creationdate="20151009T022911Z">
        <seg>```crystal
# C の callback(NULL) と同じ
X.callback nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Same as not specifying a restriction, not very useful
def foo(x : _)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135708Z" creationid="hirofumiwakasugi" creationdate="20151009T135708Z">
        <seg>```crystal
# 何も制約を与えないことと同じ。これではあまり役には立たない
def foo(x : _)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# Supports double quotes and nested parenthesis
%(hello ("world")) # same as "hello (\"world\")"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025902Z" creationid="hirofumiwakasugi" creationdate="20151009T025902Z">
        <seg>```crystal
# ダブルクォートと入れ子のカッコを含む
%(hello ("world")) # "hello (\"world\")" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# This generates:
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030022Z" creationid="hirofumiwakasugi" creationdate="20151009T030022Z">
        <seg>```crystal
# 下記が生成される
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# This is a comment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023807Z" creationid="hirofumiwakasugi" creationdate="20151009T023807Z">
        <seg>```crystal
# これはコメントです
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# ditto
def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143016Z" creationid="hirofumiwakasugi" creationdate="20151010T143016Z">
        <seg>```crystal
# ditto
def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# elements is Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135349Z" creationid="hirofumiwakasugi" creationdate="20151009T135349Z">
        <seg>```crystal
# Tuple(Int32, Int32, Int32) の要素
sum 1, 2, 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# in spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135218Z" creationid="hirofumiwakasugi" creationdate="20151009T135218Z">
        <seg>```crystal
# spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
# the `Legendary` module
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T141259Z" creationid="hirofumiwakasugi" creationdate="20151010T141259Z">
        <seg>```crystal
# the `Legendary` module
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
$global_greeting = "Hello world"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>```crystal
$global_greeting = "Hello world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
$year = 2014
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024531Z" creationid="hirofumiwakasugi" creationdate="20151009T024531Z">
        <seg>```crystal
$year = 2014
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025429Z" creationid="hirofumiwakasugi" creationdate="20151009T025429Z">
        <seg>```crystal
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025427Z" creationid="hirofumiwakasugi" creationdate="20151009T025427Z">
        <seg>```crystal
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\'' # single quote
'\\' # backslash
'\e' # escape
'\f' # form feed
'\n' # newline
'\r' # carriage return
'\t' # tab
'\v' # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025513Z" creationid="hirofumiwakasugi" creationdate="20151009T025513Z">
        <seg>```crystal
'\'' # シングルクォート
'\\' # バックスラッシュ
'\e' # エスケープ
'\f' # フォームフィード (改ページ)
'\n' # ニューライン (改行)
'\r' # キャリッジリターン (復帰)
'\t' # タブ
'\v' # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025527Z" creationid="hirofumiwakasugi" creationdate="20151009T025527Z">
        <seg>```crystal
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # コードポイント1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u0041' # == 'A'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025528Z" creationid="hirofumiwakasugi" creationdate="20151009T025528Z">
        <seg>```crystal
'\u0041' # == 'A'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025530Z" creationid="hirofumiwakasugi" creationdate="20151009T025530Z">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '🔮'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153357Z" creationid="hirofumiwakasugi" creationdate="20160115T153357Z">
        <seg>```crystal
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025506Z" creationid="hirofumiwakasugi" creationdate="20151009T025506Z">
        <seg>```crystal
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
!   # negation
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135130Z" creationid="hirofumiwakasugi" creationdate="20151009T135130Z">
        <seg>```crystal
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
!   # 否定
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002528Z" creationid="hirofumiwakasugi" creationdate="20151220T002517Z">
        <seg>```crystal
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
+   # positive
-   # negative
!   # not
~   # bitwise complement
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135118Z" creationid="hirofumiwakasugi" creationdate="20151009T135118Z">
        <seg>```crystal
+   # 正数
-   # 負数
!   # 否定
~   # ビットの補数
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0b1101 # == 13
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025703Z" creationid="hirofumiwakasugi" creationdate="20151009T025703Z">
        <seg>```crystal
0b1101 # == 13
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0o123 # == 83
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025719Z" creationid="hirofumiwakasugi" creationdate="20151009T025719Z">
        <seg>```crystal
0o123 # == 83
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025720Z" creationid="hirofumiwakasugi" creationdate="20151009T025720Z">
        <seg>```crystal
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1      # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025643Z" creationid="hirofumiwakasugi" creationdate="20151009T025643Z">
        <seg>```crystal
1      # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1 + 2 #=&gt; 3
Unicorn.new.speak #=&gt; "I'm a unicorn"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T142408Z" creationid="hirofumiwakasugi" creationdate="20151010T142408Z">
        <seg>```crystal
1 + 2 #=&gt; 3
Unicorn.new.speak #=&gt; "I'm a unicorn"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1 as String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021915Z" creationid="hirofumiwakasugi" creationdate="20151009T021915Z">
        <seg>```crystal
1 as String # Error
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025542Z" creationid="hirofumiwakasugi" creationdate="20151009T025542Z">
        <seg>```crystal
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1_000_000 # better than 1000000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025702Z" creationid="hirofumiwakasugi" creationdate="20151009T025702Z">
        <seg>```crystal
1_000_000 # 1000000 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
1_000_000.111_111 # better than 1000000.111111
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025606Z" creationid="hirofumiwakasugi" creationdate="20151009T025556Z">
        <seg>```crystal
1_000_000.111_111 # 1000000.111111 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022616Z" creationid="hirofumiwakasugi" creationdate="20151009T022616Z">
        <seg>```crystal
3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
:hello
:good_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025908Z" creationid="hirofumiwakasugi" creationdate="20151009T025908Z">
        <seg>```crystal
:hello
:good_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061831Z" creationid="hirofumiwakasugi" creationdate="20160204T061831Z">
        <seg>```crystal
&lt;&lt;-XML
&lt;parent&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[AlwaysInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022458Z" creationid="hirofumiwakasugi" creationdate="20151009T022458Z">
        <seg>```crystal
@[AlwaysInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Flags]
enum IOMode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024124Z" creationid="hirofumiwakasugi" creationdate="20151009T024124Z">
        <seg>```crystal
@[Flags]
enum IOMode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023256Z" creationid="hirofumiwakasugi" creationdate="20151009T023256Z">
        <seg>```crystal
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022949Z" creationid="hirofumiwakasugi" creationdate="20151009T022949Z">
        <seg>```crystal
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
@[NoInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022459Z" creationid="hirofumiwakasugi" creationdate="20151009T022459Z">
        <seg>```crystal
@[NoInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140048Z" creationid="hirofumiwakasugi" creationdate="20151009T140048Z">
        <seg>```crystal
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092323Z" creationid="hirofumiwakasugi" creationdate="20151009T092323Z">
        <seg>```crystal
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023007Z" creationid="hirofumiwakasugi" creationdate="20151009T023007Z">
        <seg>```crystal
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023616Z" creationid="hirofumiwakasugi" creationdate="20151009T023616Z">
        <seg>```crystal
C.errno #=&gt; 何かの値
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024115Z" creationid="hirofumiwakasugi" creationdate="20151009T024115Z">
        <seg>```crystal
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Color::Red #:: Color
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024114Z" creationid="hirofumiwakasugi" creationdate="20151009T024114Z">
        <seg>```crystal
Color::Red #:: Color
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024124Z" creationid="hirofumiwakasugi" creationdate="20151009T024124Z">
        <seg>```crystal
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135632Z" creationid="hirofumiwakasugi" creationdate="20151009T135632Z">
        <seg>```crystal
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
LUCKY_NUMBERS = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010616Z" creationid="hirofumiwakasugi" creationdate="20151010T010616Z">
        <seg>```crystal
LUCKY_NUMBERS = [3, 7, 11]
DOCUMENTATION_URL = "http://crystal-lang.org/docs"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox(Int32).new("hello")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024453Z" creationid="hirofumiwakasugi" creationdate="20151009T024453Z">
        <seg>```crystal
MyBox(Int32).new("hello")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox(Int32).new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024431Z" creationid="hirofumiwakasugi" creationdate="20151009T024431Z">
        <seg>```crystal
MyBox(Int32).new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024405Z" creationid="hirofumiwakasugi" creationdate="20151009T024405Z">
        <seg>```crystal
MyBox.new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024333Z" creationid="hirofumiwakasugi" creationdate="20151009T024333Z">
        <seg>```crystal
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024515Z" creationid="hirofumiwakasugi" creationdate="20151009T024515Z">
        <seg>```crystal
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024400Z" creationid="hirofumiwakasugi" creationdate="20151009T024400Z">
        <seg>```crystal
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025434Z" creationid="hirofumiwakasugi" creationdate="20151009T025434Z">
        <seg>```crystal
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025631Z" creationid="hirofumiwakasugi" creationdate="20151009T025631Z">
        <seg>```crystal
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType{"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025628Z" creationid="hirofumiwakasugi" creationdate="20151009T025628Z">
        <seg>```crystal
MyType{"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
MyType{1, 2, 3}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025430Z" creationid="hirofumiwakasugi" creationdate="20151009T025430Z">
        <seg>```crystal
MyType{1, 2, 3}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
PI = 3.14</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023836Z" creationid="hirofumiwakasugi" creationdate="20151009T023836Z">
        <seg>```crystal
PI = 3.14</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022418Z" creationid="hirofumiwakasugi" creationdate="20151009T022418Z">
        <seg>```crystal
Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025746Z" creationid="hirofumiwakasugi" creationdate="20151009T025746Z">
        <seg>```crystal
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
TEN = begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023839Z" creationid="hirofumiwakasugi" creationdate="20151009T023839Z">
        <seg>```crystal
TEN = begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
VALUES = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030034Z" creationid="hirofumiwakasugi" creationdate="20151009T030034Z">
        <seg>```crystal
VALUES = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022657Z" creationid="hirofumiwakasugi" creationdate="20151009T022657Z">
        <seg>```crystal
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023005Z" creationid="hirofumiwakasugi" creationdate="20151009T023005Z">
        <seg>```crystal
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025416Z" creationid="hirofumiwakasugi" creationdate="20151009T025416Z">
        <seg>```crystal
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[]  # array index (raises on out of bounds)
[]? # array index (nil on out of bounds)
[]= # array index assignment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135140Z" creationid="hirofumiwakasugi" creationdate="20151009T135140Z">
        <seg>```crystal
[]  # 配列のインデックス (配列長を超えると例外が発生)
[]? # 配列のインデックス (配列長を超えると nil)
[]= # 配列のインデックス指定代入
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
[] of Int32 # same as Array(Int32).new
[]          # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025423Z" creationid="hirofumiwakasugi" creationdate="20151009T025423Z">
        <seg>```crystal
[] of Int32 # Array(Int32).new と同じ
[]          # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135106Z" creationid="hirofumiwakasugi" creationdate="20151009T135106Z">
        <seg>```crystal
a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135145Z" creationid="hirofumiwakasugi" creationdate="20151009T135145Z">
        <seg>```crystal
a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025405Z" creationid="hirofumiwakasugi" creationdate="20151009T025405Z">
        <seg>```crystal
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:size) #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135222Z" creationid="hirofumiwakasugi" creationdate="20151009T135222Z">
        <seg>```crystal
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:size) #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025905Z" creationid="hirofumiwakasugi" creationdate="20151009T025905Z">
        <seg>```crystal
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134840Z" creationid="hirofumiwakasugi" creationdate="20151009T134840Z">
        <seg>```crystal
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022411Z" creationid="hirofumiwakasugi" creationdate="20151009T022411Z">
        <seg>```crystal
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135954Z" creationid="hirofumiwakasugi" creationdate="20151009T135954Z">
        <seg>```crystal
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024550Z" creationid="hirofumiwakasugi" creationdate="20151009T024550Z">
        <seg>```crystal
a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024555Z" creationid="hirofumiwakasugi" creationdate="20151009T024555Z">
        <seg>```crystal
a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # undefined behaviour, probably a segmentation fault
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140008Z" creationid="hirofumiwakasugi" creationdate="20151009T140008Z">
        <seg>```crystal
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # 定義されていない振る舞いであるため、おそらくセグメンテーション違反となる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135334Z" creationid="hirofumiwakasugi" creationdate="20151009T135334Z">
        <seg>```crystal
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134851Z" creationid="hirofumiwakasugi" creationdate="20151009T134851Z">
        <seg>```crystal
a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140101Z" creationid="hirofumiwakasugi" creationdate="20151009T140101Z">
        <seg>```crystal
a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021837Z" creationid="hirofumiwakasugi" creationdate="20151009T021837Z">
        <seg>```crystal
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135353Z" creationid="hirofumiwakasugi" creationdate="20151009T135353Z">
        <seg>```crystal
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022625Z" creationid="hirofumiwakasugi" creationdate="20151009T022625Z">
        <seg>```crystal
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = 2 if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022422Z" creationid="hirofumiwakasugi" creationdate="20151009T022422Z">
        <seg>```crystal
a = 2 if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022417Z" creationid="hirofumiwakasugi" creationdate="20151009T022417Z">
        <seg>```crystal
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022426Z" creationid="hirofumiwakasugi" creationdate="20151009T022426Z">
        <seg>```crystal
a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061718Z" creationid="hirofumiwakasugi" creationdate="20160204T061718Z">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024658Z" creationid="hirofumiwakasugi" creationdate="20151009T024658Z">
        <seg>```crystal
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a = some_condition ? nil : 3
# a is Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024616Z" creationid="hirofumiwakasugi" creationdate="20151009T024608Z">
        <seg>```crystal
a = some_condition ? nil : 3
# a は Int32 か Nil のいずれか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a.+(b)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135107Z" creationid="hirofumiwakasugi" creationdate="20151009T135107Z">
        <seg>```crystal
a.+(b)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021912Z" creationid="hirofumiwakasugi" creationdate="20151009T021912Z">
        <seg>```crystal
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140048Z" creationid="hirofumiwakasugi" creationdate="20151009T140048Z">
        <seg>```crystal
abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
abstract class Animal
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140040Z" creationid="hirofumiwakasugi" creationdate="20151009T140040Z">
        <seg>```crystal
abstract class Animal
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
add 1, 2 # same as add(1, 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135610Z" creationid="hirofumiwakasugi" creationdate="20151009T135610Z">
        <seg>```crystal
add 1, 2 # add(1, 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135652Z" creationid="hirofumiwakasugi" creationdate="20151009T135652Z">
        <seg>```crystal
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135651Z" creationid="hirofumiwakasugi" creationdate="20151009T135651Z">
        <seg>```crystal
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135637Z" creationid="hirofumiwakasugi" creationdate="20151009T135637Z">
        <seg>```crystal
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrNil = Int32?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135635Z" creationid="hirofumiwakasugi" creationdate="20151009T135635Z">
        <seg>```crystal
alias Int32OrNil = Int32?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135633Z" creationid="hirofumiwakasugi" creationdate="20151009T135633Z">
        <seg>```crystal
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32Ptr = Int32*
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135638Z" creationid="hirofumiwakasugi" creationdate="20151009T135638Z">
        <seg>```crystal
alias Int32Ptr = Int32*
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32Ptr = Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135638Z" creationid="hirofumiwakasugi" creationdate="20151009T135638Z">
        <seg>```crystal
alias Int32Ptr = Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135646Z" creationid="hirofumiwakasugi" creationdate="20151009T135646Z">
        <seg>```crystal
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135644Z" creationid="hirofumiwakasugi" creationdate="20151009T135644Z">
        <seg>```crystal
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135647Z" creationid="hirofumiwakasugi" creationdate="20151009T135647Z">
        <seg>```crystal
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135649Z" creationid="hirofumiwakasugi" creationdate="20151009T135649Z">
        <seg>```crystal
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135639Z" creationid="hirofumiwakasugi" creationdate="20151009T135639Z">
        <seg>```crystal
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135643Z" creationid="hirofumiwakasugi" creationdate="20151009T135643Z">
        <seg>```crystal
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021856Z" creationid="hirofumiwakasugi" creationdate="20151009T021856Z">
        <seg>```crystal
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135650Z" creationid="hirofumiwakasugi" creationdate="20151009T135650Z">
        <seg>```crystal
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021858Z" creationid="hirofumiwakasugi" creationdate="20151009T021858Z">
        <seg>```crystal
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135736Z" creationid="hirofumiwakasugi" creationdate="20151009T135736Z">
        <seg>```crystal
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
array = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022409Z" creationid="hirofumiwakasugi" creationdate="20151009T022409Z">
        <seg>```crystal
array = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
array = [1, 2, 3]
array[4]  # raises because of IndexError
array[4]? # returns nil because of index out of bounds
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024319Z" creationid="hirofumiwakasugi" creationdate="20151009T024319Z">
        <seg>```crystal
array = [1, 2, 3]
array[4]  # IndexOutOfBounds の例外が発生
array[4]? # インデックス範囲外のため nil が返る
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ary = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022412Z" creationid="hirofumiwakasugi" creationdate="20151009T022412Z">
        <seg>```crystal
ary = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022549Z" creationid="hirofumiwakasugi" creationdate="20151009T022549Z">
        <seg>```crystal
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024243Z" creationid="hirofumiwakasugi" creationdate="20151009T024243Z">
        <seg>```crystal
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
buffer :: UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024033Z" creationid="hirofumiwakasugi" creationdate="20151009T024033Z">
        <seg>```crystal
buffer :: UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
buffer = uninitialized UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061644Z" creationid="hirofumiwakasugi" creationdate="20160204T061644Z">
        <seg>```crystal
buffer = uninitialized UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023710Z" creationid="hirofumiwakasugi" creationdate="20151009T023710Z">
        <seg>```crystal
case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023642Z" creationid="hirofumiwakasugi" creationdate="20151009T023642Z">
        <seg>```crystal
case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023649Z" creationid="hirofumiwakasugi" creationdate="20151009T023649Z">
        <seg>```crystal
case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023645Z" creationid="hirofumiwakasugi" creationdate="20151009T023645Z">
        <seg>```crystal
case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Animal
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140012Z" creationid="hirofumiwakasugi" creationdate="20151009T140012Z">
        <seg>```crystal
class Animal
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135958Z" creationid="hirofumiwakasugi" creationdate="20151009T135958Z">
        <seg>```crystal
class Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023718Z" creationid="hirofumiwakasugi" creationdate="20151009T023718Z">
        <seg>```crystal
class Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140050Z" creationid="hirofumiwakasugi" creationdate="20151009T140050Z">
        <seg>```crystal
class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022610Z" creationid="hirofumiwakasugi" creationdate="20151009T022610Z">
        <seg>```crystal
class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Model</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023630Z" creationid="hirofumiwakasugi" creationdate="20151009T023630Z">
        <seg>```crystal
class Model</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135142Z" creationid="hirofumiwakasugi" creationdate="20151009T135142Z">
        <seg>```crystal
class MyArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024331Z" creationid="hirofumiwakasugi" creationdate="20151009T024331Z">
        <seg>```crystal
class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024431Z" creationid="hirofumiwakasugi" creationdate="20151009T024431Z">
        <seg>```crystal
class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyDictionary(K, V)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024506Z" creationid="hirofumiwakasugi" creationdate="20151009T024506Z">
        <seg>```crystal
class MyDictionary(K, V)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class MyException &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024239Z" creationid="hirofumiwakasugi" creationdate="20151009T024239Z">
        <seg>```crystal
class MyException &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030043Z" creationid="hirofumiwakasugi" creationdate="20151009T030043Z">
        <seg>```crystal
class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023727Z" creationid="hirofumiwakasugi" creationdate="20151009T023727Z">
        <seg>```crystal
class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135656Z" creationid="hirofumiwakasugi" creationdate="20151009T135656Z">
        <seg>```crystal
class Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Parent(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024526Z" creationid="hirofumiwakasugi" creationdate="20151009T024526Z">
        <seg>```crystal
class Parent(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class ParseError &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010224Z" creationid="hirofumiwakasugi" creationdate="20151010T010224Z">
        <seg>```crystal
class ParseError &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022414Z" creationid="hirofumiwakasugi" creationdate="20151009T022414Z">
        <seg>```crystal
class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Person
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023732Z" creationid="hirofumiwakasugi" creationdate="20151009T023732Z">
        <seg>```crystal
class Person
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025307Z" creationid="hirofumiwakasugi" creationdate="20151009T025307Z">
        <seg>```crystal
class Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
class Unicorn</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144013Z" creationid="hirofumiwakasugi" creationdate="20151010T144013Z">
        <seg>```crystal
class Unicorn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135737Z" creationid="hirofumiwakasugi" creationdate="20151009T135737Z">
        <seg>```crystal
def add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135147Z" creationid="hirofumiwakasugi" creationdate="20151009T135147Z">
        <seg>```crystal
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135600Z" creationid="hirofumiwakasugi" creationdate="20151009T135600Z">
        <seg>```crystal
def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def capture(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022505Z" creationid="hirofumiwakasugi" creationdate="20151009T022505Z">
        <seg>```crystal
def capture(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def change_it(tz)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023530Z" creationid="hirofumiwakasugi" creationdate="20151009T023530Z">
        <seg>```crystal
def change_it(tz)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def change_it(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023557Z" creationid="hirofumiwakasugi" creationdate="20151009T023557Z">
        <seg>```crystal
def change_it(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023742Z" creationid="hirofumiwakasugi" creationdate="20151009T023742Z">
        <seg>```crystal
def counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def even?(num)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135559Z" creationid="hirofumiwakasugi" creationdate="20151009T135559Z">
        <seg>```crystal
def even?(num)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022518Z" creationid="hirofumiwakasugi" creationdate="20151009T022518Z">
        <seg>```crystal
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(*args : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135928Z" creationid="hirofumiwakasugi" creationdate="20151009T135928Z">
        <seg>```crystal
def foo(*args : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Array(T))</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135930Z" creationid="hirofumiwakasugi" creationdate="20151009T135930Z">
        <seg>```crystal
def foo(x : Array(T))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135654Z" creationid="hirofumiwakasugi" creationdate="20151009T135654Z">
        <seg>```crystal
def foo(x : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135925Z" creationid="hirofumiwakasugi" creationdate="20151009T135925Z">
        <seg>```crystal
def foo(x : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135927Z" creationid="hirofumiwakasugi" creationdate="20151009T135927Z">
        <seg>```crystal
def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : Int32.class)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135926Z" creationid="hirofumiwakasugi" creationdate="20151009T135926Z">
        <seg>```crystal
def foo(x : Int32.class)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135929Z" creationid="hirofumiwakasugi" creationdate="20151009T135929Z">
        <seg>```crystal
def foo(x : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def foo(x : T.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135931Z" creationid="hirofumiwakasugi" creationdate="20151009T135931Z">
        <seg>```crystal
def foo(x : T.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023625Z" creationid="hirofumiwakasugi" creationdate="20151009T023625Z">
        <seg>```crystal
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def many</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022541Z" creationid="hirofumiwakasugi" creationdate="20151009T022541Z">
        <seg>```crystal
def many</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025752Z" creationid="hirofumiwakasugi" creationdate="20151009T025752Z">
        <seg>```crystal
def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def paint(color : Color)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024217Z" creationid="hirofumiwakasugi" creationdate="20151009T024217Z">
        <seg>```crystal
def paint(color : Color)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def paint(color : Symbol)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024219Z" creationid="hirofumiwakasugi" creationdate="20151009T024219Z">
        <seg>```crystal
def paint(color : Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025754Z" creationid="hirofumiwakasugi" creationdate="20151009T025754Z">
        <seg>```crystal
def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022516Z" creationid="hirofumiwakasugi" creationdate="20151009T022516Z">
        <seg>```crystal
def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022545Z" creationid="hirofumiwakasugi" creationdate="20151009T022545Z">
        <seg>```crystal
def some</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024251Z" creationid="hirofumiwakasugi" creationdate="20151009T024251Z">
        <seg>```crystal
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135223Z" creationid="hirofumiwakasugi" creationdate="20151009T135223Z">
        <seg>```crystal
def some_method : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024051Z" creationid="hirofumiwakasugi" creationdate="20151009T024051Z">
        <seg>```crystal
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135146Z" creationid="hirofumiwakasugi" creationdate="20151009T135146Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023635Z" creationid="hirofumiwakasugi" creationdate="20151009T023635Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023632Z" creationid="hirofumiwakasugi" creationdate="20151009T023632Z">
        <seg>```crystal
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def sum(*elements)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135336Z" creationid="hirofumiwakasugi" creationdate="20151009T135336Z">
        <seg>```crystal
def sum(*elements)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def thrice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022553Z" creationid="hirofumiwakasugi" creationdate="20151009T022553Z">
        <seg>```crystal
def thrice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def transform(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022549Z" creationid="hirofumiwakasugi" creationdate="20151009T022549Z">
        <seg>```crystal
def transform(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022536Z" creationid="hirofumiwakasugi" creationdate="20151009T022536Z">
        <seg>```crystal
def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
def twice(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022537Z" creationid="hirofumiwakasugi" creationdate="20151009T022537Z">
        <seg>```crystal
def twice(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
enum Color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024108Z" creationid="hirofumiwakasugi" creationdate="20151009T024108Z">
        <seg>```crystal
enum Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
enum Color : UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024120Z" creationid="hirofumiwakasugi" creationdate="20151009T024120Z">
        <seg>```crystal
enum Color : UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022656Z" creationid="hirofumiwakasugi" creationdate="20151009T022656Z">
        <seg>```crystal
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
flower = "Tulip"
# At this point 'flower' is a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030004Z" creationid="hirofumiwakasugi" creationdate="20151009T025938Z">
        <seg>```crystal
flower = "Tulip"
# ここでは「flower」は String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
foo_forward do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022524Z" creationid="hirofumiwakasugi" creationdate="20151009T022524Z">
        <seg>```crystal
foo_forward do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025825Z" creationid="hirofumiwakasugi" creationdate="20151009T025825Z">
        <seg>```crystal
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135957Z" creationid="hirofumiwakasugi" creationdate="20151009T135957Z">
        <seg>```crystal
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
i = 0
while i &lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022619Z" creationid="hirofumiwakasugi" creationdate="20151009T022619Z">
        <seg>```crystal
i = 0
while i &lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022615Z" creationid="hirofumiwakasugi" creationdate="20151009T022615Z">
        <seg>```crystal
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022428Z" creationid="hirofumiwakasugi" creationdate="20151009T022428Z">
        <seg>```crystal
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024626Z" creationid="hirofumiwakasugi" creationdate="20151009T024626Z">
        <seg>```crystal
if @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024704Z" creationid="hirofumiwakasugi" creationdate="20151009T024704Z">
        <seg>```crystal
if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024711Z" creationid="hirofumiwakasugi" creationdate="20151009T024711Z">
        <seg>```crystal
if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024630Z" creationid="hirofumiwakasugi" creationdate="20151009T024630Z">
        <seg>```crystal
if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024624Z" creationid="hirofumiwakasugi" creationdate="20151009T024624Z">
        <seg>```crystal
if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024654Z" creationid="hirofumiwakasugi" creationdate="20151009T024654Z">
        <seg>```crystal
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024701Z" creationid="hirofumiwakasugi" creationdate="20151009T024701Z">
        <seg>```crystal
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024710Z" creationid="hirofumiwakasugi" creationdate="20151009T024710Z">
        <seg>```crystal
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024644Z" creationid="hirofumiwakasugi" creationdate="20151009T024644Z">
        <seg>```crystal
if method # メソッドの最初の呼び出し (メソッドは Int32 か Nil を返すとする)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021909Z" creationid="hirofumiwakasugi" creationdate="20151009T021909Z">
        <seg>```crystal
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023827Z" creationid="hirofumiwakasugi" creationdate="20151009T023827Z">
        <seg>```crystal
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023821Z" creationid="hirofumiwakasugi" creationdate="20151009T023821Z">
        <seg>```crystal
ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
include Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092324Z" creationid="hirofumiwakasugi" creationdate="20151009T092324Z">
        <seg>```crystal
include Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022506Z" creationid="hirofumiwakasugi" creationdate="20151009T022506Z">
        <seg>```crystal
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
john.name.size
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025347Z" creationid="hirofumiwakasugi" creationdate="20151009T025347Z">
        <seg>```crystal
john = Person.new "John"
john.name.size
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025340Z" creationid="hirofumiwakasugi" creationdate="20151009T025340Z">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025329Z" creationid="hirofumiwakasugi" creationdate="20151009T025329Z">
        <seg>```crystal
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134849Z" creationid="hirofumiwakasugi" creationdate="20151009T134849Z">
        <seg>```crystal
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.become_older by: 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024043Z" creationid="hirofumiwakasugi" creationdate="20151009T024043Z">
        <seg>```crystal
john.become_older by: 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140039Z" creationid="hirofumiwakasugi" creationdate="20151009T140039Z">
        <seg>```crystal
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140041Z" creationid="hirofumiwakasugi" creationdate="20151009T140041Z">
        <seg>```crystal
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib C</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022650Z" creationid="hirofumiwakasugi" creationdate="20151009T022650Z">
        <seg>```crystal
lib C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LLVMIntrinsics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023019Z" creationid="hirofumiwakasugi" creationdate="20151009T023019Z">
        <seg>```crystal
lib LLVMIntrinsics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LibFoo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022501Z" creationid="hirofumiwakasugi" creationdate="20151009T022501Z">
        <seg>```crystal
lib LibFoo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib LibSDL</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023016Z" creationid="hirofumiwakasugi" creationdate="20151009T023016Z">
        <seg>```crystal
lib LibSDL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023021Z" creationid="hirofumiwakasugi" creationdate="20151009T023021Z">
        <seg>```crystal
lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib U</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023551Z" creationid="hirofumiwakasugi" creationdate="20151009T023551Z">
        <seg>```crystal
lib U</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
lib X</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022648Z" creationid="hirofumiwakasugi" creationdate="20151009T022648Z">
        <seg>```crystal
lib X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
local += 1  # same as: local = local + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022436Z" creationid="hirofumiwakasugi" creationdate="20151009T022436Z">
        <seg>```crystal
local += 1  # same as: local = local + 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140104Z" creationid="hirofumiwakasugi" creationdate="20151009T140104Z">
        <seg>```crystal
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030032Z" creationid="hirofumiwakasugi" creationdate="20151009T030032Z">
        <seg>```crystal
macro define_dummy_methods(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(hash)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030028Z" creationid="hirofumiwakasugi" creationdate="20151009T030028Z">
        <seg>```crystal
macro define_dummy_methods(hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_dummy_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030027Z" creationid="hirofumiwakasugi" creationdate="20151009T030027Z">
        <seg>```crystal
macro define_dummy_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro define_method(name, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030017Z" creationid="hirofumiwakasugi" creationdate="20151009T030017Z">
        <seg>```crystal
macro define_method(name, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro dont_update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021259Z" creationid="hirofumiwakasugi" creationdate="20151009T021259Z">
        <seg>```crystal
macro dont_update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro fresh_vars_sample(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021301Z" creationid="hirofumiwakasugi" creationdate="20151009T021301Z">
        <seg>```crystal
macro fresh_vars_sample(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro method_missing(name, args, block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030037Z" creationid="hirofumiwakasugi" creationdate="20151009T030037Z">
        <seg>```crystal
macro method_missing(name, args, block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro println(*values)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030033Z" creationid="hirofumiwakasugi" creationdate="20151009T030033Z">
        <seg>```crystal
macro println(*values)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
macro update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021255Z" creationid="hirofumiwakasugi" creationdate="20151009T021255Z">
        <seg>```crystal
macro update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.+(2)
method &amp;.[index]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153237Z" creationid="hirofumiwakasugi" creationdate="20160115T153237Z">
        <seg>```crystal
method &amp;.+(2)
method &amp;.[index]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153031Z" creationid="hirofumiwakasugi" creationdate="20160115T153031Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method &amp;.some_method(arg1, arg2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153214Z" creationid="hirofumiwakasugi" creationdate="20160115T153214Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method do |argument|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153020Z" creationid="hirofumiwakasugi" creationdate="20160115T153020Z">
        <seg>```crystal
method do |argument|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
method(&amp;.some_method)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153044Z" creationid="hirofumiwakasugi" creationdate="20160115T153044Z">
        <seg>```crystal
method &amp;.some_method
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092318Z" creationid="hirofumiwakasugi" creationdate="20151009T092318Z">
        <seg>```crystal
module Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Curses</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092219Z" creationid="hirofumiwakasugi" creationdate="20151009T092219Z">
        <seg>```crystal
module Curses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module ItemsSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092222Z" creationid="hirofumiwakasugi" creationdate="20151009T092222Z">
        <seg>```crystal
module ItemsSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Json</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021859Z" creationid="hirofumiwakasugi" creationdate="20151009T021859Z">
        <seg>```crystal
module Json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Money</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012155Z" creationid="hirofumiwakasugi" creationdate="20151010T012155Z">
        <seg>```crystal
module Money</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Moo
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092326Z" creationid="hirofumiwakasugi" creationdate="20151009T092326Z">
        <seg>```crystal
module Moo
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Moo(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024521Z" creationid="hirofumiwakasugi" creationdate="20151009T024521Z">
        <seg>```crystal
module Moo(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module Scorecard</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011935Z" creationid="hirofumiwakasugi" creationdate="20151010T011935Z">
        <seg>```crystal
module Scorecard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092317Z" creationid="hirofumiwakasugi" creationdate="20151009T092317Z">
        <seg>```crystal
module SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
module SomeSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092315Z" creationid="hirofumiwakasugi" creationdate="20151009T092315Z">
        <seg>```crystal
module SomeSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name = "Crystal"
age = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025915Z" creationid="hirofumiwakasugi" creationdate="20151009T025915Z">
        <seg>```crystal
name = "Crystal"
age = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name, age = "Crystal", 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134357Z" creationid="hirofumiwakasugi" creationdate="20151009T134357Z">
        <seg>```crystal
name, age = "Crystal", 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134842Z" creationid="hirofumiwakasugi" creationdate="20151009T134842Z">
        <seg>```crystal
name, age, source = "Crystal,1,github".split(",")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
names = "John", "Peter", "Jack"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134844Z" creationid="hirofumiwakasugi" creationdate="20151009T134844Z">
        <seg>```crystal
names = "John", "Peter", "Jack"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025725Z" creationid="hirofumiwakasugi" creationdate="20151009T025725Z">
        <seg>```crystal
nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
objects[1], objects[2] = 3, 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134847Z" creationid="hirofumiwakasugi" creationdate="20151009T134847Z">
        <seg>```crystal
objects[1], objects[2] = 3, 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025317Z" creationid="hirofumiwakasugi" creationdate="20151009T025317Z">
        <seg>```crystal
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022439Z" creationid="hirofumiwakasugi" creationdate="20151009T022439Z">
        <seg>```crystal
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
person.name, person.age = "John", 32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T134845Z" creationid="hirofumiwakasugi" creationdate="20151009T134845Z">
        <seg>```crystal
person.name, person.age = "John", 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023501Z" creationid="hirofumiwakasugi" creationdate="20151009T023501Z">
        <seg>```crystal
pid = ...
options = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023458Z" creationid="hirofumiwakasugi" creationdate="20151009T023458Z">
        <seg>```crystal
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
pid = ...
options = ...
status_ptr = uninitialized Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061355Z" creationid="hirofumiwakasugi" creationdate="20160204T061355Z">
        <seg>```crystal
pid = ...
options = ...
status_ptr = uninitialized Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025749Z" creationid="hirofumiwakasugi" creationdate="20151009T025749Z">
        <seg>```crystal
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022514Z" creationid="hirofumiwakasugi" creationdate="20151009T022514Z">
        <seg>```crystal
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022408Z" creationid="hirofumiwakasugi" creationdate="20151009T022408Z">
        <seg>```crystal
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts "Hello world!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021802Z" creationid="hirofumiwakasugi" creationdate="20151009T021802Z">
        <seg>```crystal
puts "Hello world!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024200Z" creationid="hirofumiwakasugi" creationdate="20151009T024200Z">
        <seg>```crystal
puts Color.new(1) #=&gt; "Green" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024210Z" creationid="hirofumiwakasugi" creationdate="20151009T024210Z">
        <seg>```crystal
puts Color.new(10) #=&gt; "10" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024143Z" creationid="hirofumiwakasugi" creationdate="20151009T024143Z">
        <seg>```crystal
puts(Color::Red)                    # "Red" を出力
puts(IOMode::Write | IOMode::Async) # "Write, Async" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
r = %r(regex with slash: /)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025830Z" creationid="hirofumiwakasugi" creationdate="20151009T025830Z">
        <seg>```crystal
r = %r(regex with slash: /)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
r = /foo/imx
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025827Z" creationid="hirofumiwakasugi" creationdate="20151009T025827Z">
        <seg>```crystal
r = /foo/imx
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024236Z" creationid="hirofumiwakasugi" creationdate="20151009T024236Z">
        <seg>```crystal
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021810Z" creationid="hirofumiwakasugi" creationdate="20151009T021810Z">
        <seg>```crystal
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
s = "hello"
# s : String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061336Z" creationid="hirofumiwakasugi" creationdate="20160204T061336Z">
        <seg>```crystal
s = "hello"
# s : String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
s = "hello"
# s :: String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021838Z" creationid="hirofumiwakasugi" creationdate="20151009T021838Z">
        <seg>```crystal
s = "hello"
# s :: String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135321Z" creationid="hirofumiwakasugi" creationdate="20151009T135321Z">
        <seg>```crystal
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
slash = /\//
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025828Z" creationid="hirofumiwakasugi" creationdate="20151009T025828Z">
        <seg>```crystal
slash = /\//
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021906Z" creationid="hirofumiwakasugi" creationdate="20151009T021906Z">
        <seg>```crystal
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
some_exp1 || some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135144Z" creationid="hirofumiwakasugi" creationdate="20151009T135144Z">
        <seg>```crystal
some_exp1 || some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025755Z" creationid="hirofumiwakasugi" creationdate="20151009T025755Z">
        <seg>```crystal
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Int</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022617Z" creationid="hirofumiwakasugi" creationdate="20151009T022617Z">
        <seg>```crystal
struct Int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135351Z" creationid="hirofumiwakasugi" creationdate="20151009T135351Z">
        <seg>```crystal
struct Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
struct Vector2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135108Z" creationid="hirofumiwakasugi" creationdate="20151009T135108Z">
        <seg>```crystal
struct Vector2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025630Z" creationid="hirofumiwakasugi" creationdate="20151009T025630Z">
        <seg>```crystal
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025432Z" creationid="hirofumiwakasugi" creationdate="20151009T025432Z">
        <seg>```crystal
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025431Z" creationid="hirofumiwakasugi" creationdate="20151009T025431Z">
        <seg>```crystal
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025629Z" creationid="hirofumiwakasugi" creationdate="20151009T025629Z">
        <seg>```crystal
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025502Z" creationid="hirofumiwakasugi" creationdate="20151009T025502Z">
        <seg>```crystal
true  # 真の Bool 値
false # 偽の Bool 値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025913Z" creationid="hirofumiwakasugi" creationdate="20151009T025913Z">
        <seg>```crystal
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022515Z" creationid="hirofumiwakasugi" creationdate="20151009T022515Z">
        <seg>```crystal
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022541Z" creationid="hirofumiwakasugi" creationdate="20151009T022541Z">
        <seg>```crystal
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
twice() do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022538Z" creationid="hirofumiwakasugi" creationdate="20151009T022538Z">
        <seg>```crystal
twice() do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135956Z" creationid="hirofumiwakasugi" creationdate="20151009T135956Z">
        <seg>```crystal
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz :: C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023521Z" creationid="hirofumiwakasugi" creationdate="20151009T023511Z">
        <seg>```crystal
tz :: C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023509Z" creationid="hirofumiwakasugi" creationdate="20151009T023509Z">
        <seg>```crystal
tz = C::TimeZone.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023523Z" creationid="hirofumiwakasugi" creationdate="20151009T023523Z">
        <seg>```crystal
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023529Z" creationid="hirofumiwakasugi" creationdate="20151009T023529Z">
        <seg>```crystal
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
tz = uninitialized C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061532Z" creationid="hirofumiwakasugi" creationdate="20160204T061509Z">
        <seg>```crystal
tz = uninitialized C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140000Z" creationid="hirofumiwakasugi" creationdate="20151009T140000Z">
        <seg>```crystal
unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140011Z" creationid="hirofumiwakasugi" creationdate="20151009T140011Z">
        <seg>```crystal
until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value :: U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T164535Z" creationid="hirofumiwakasugi" creationdate="20151009T023552Z">
        <seg>```crystal
value :: U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = U::IntOrFloat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023551Z" creationid="hirofumiwakasugi" creationdate="20151009T023551Z">
        <seg>```crystal
value = U::IntOrFloat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023554Z" creationid="hirofumiwakasugi" creationdate="20151009T023554Z">
        <seg>```crystal
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022601Z" creationid="hirofumiwakasugi" creationdate="20151009T022601Z">
        <seg>```crystal
value = twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022603Z" creationid="hirofumiwakasugi" creationdate="20151009T022603Z">
        <seg>```crystal
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
value = uninitialized U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061547Z" creationid="hirofumiwakasugi" creationdate="20160204T061547Z">
        <seg>```crystal
value = uninitialized U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022603Z" creationid="hirofumiwakasugi" creationdate="20151009T022603Z">
        <seg>```crystal
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140100Z" creationid="hirofumiwakasugi" creationdate="20151009T140100Z">
        <seg>```crystal
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
while true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140104Z" creationid="hirofumiwakasugi" creationdate="20151009T140104Z">
        <seg>```crystal
while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x :: Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024027Z" creationid="hirofumiwakasugi" creationdate="20151009T024027Z">
        <seg>```crystal
x :: Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023738Z" creationid="hirofumiwakasugi" creationdate="20151009T023738Z">
        <seg>```crystal
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T135601Z" creationid="hirofumiwakasugi" creationdate="20151009T135601Z">
        <seg>```crystal
x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T023746Z" creationid="hirofumiwakasugi" creationdate="20151009T023746Z">
        <seg>```crystal
x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x = uninitialized Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061639Z" creationid="hirofumiwakasugi" creationdate="20160204T061639Z">
        <seg>```crystal
x = uninitialized Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
x..y  # an inclusive range, in mathematics: [x, y]
x...y # an exclusive range, in mathematics: [x, y)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025821Z" creationid="hirofumiwakasugi" creationdate="20151009T025821Z">
        <seg>```crystal
x..y  # 右側の値を「含む」範囲です。数学的には閉区間となります: [x, y]
x...y # 右側の値を「含まない」範囲です。数学的には左閉右開区間となります: [x, y)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022706Z" creationid="hirofumiwakasugi" creationdate="20151009T022706Z">
        <seg>```crystal
y = 2
X.callback -&gt;(x) { x + y } # エラー: クロージャは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025627Z" creationid="hirofumiwakasugi" creationdate="20151009T025627Z">
        <seg>```crystal
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030030Z" creationid="hirofumiwakasugi" creationdate="20151009T030030Z">
        <seg>```crystal
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{% if env("TEST") %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030025Z" creationid="hirofumiwakasugi" creationdate="20151009T030025Z">
        <seg>```crystal
{% if env("TEST") %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025609Z" creationid="hirofumiwakasugi" creationdate="20151009T025609Z">
        <seg>```crystal
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025626Z" creationid="hirofumiwakasugi" creationdate="20151009T025626Z">
        <seg>```crystal
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```crystal
{} of Int32 =&gt; Int32 # same as Hash(Int32, Int32).new
{}                   # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025623Z" creationid="hirofumiwakasugi" creationdate="20151009T025617Z">
        <seg>```crystal
{} of Int32 =&gt; Int32 # Hash(Int32, Int32).new と同じ
{}                   # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T021822Z" creationid="hirofumiwakasugi" creationdate="20150901T072605Z">
        <seg>```crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\"" # double quote
"\\" # backslash
"\e" # escape
"\f" # form feed
"\n" # newline
"\r" # carriage return
"\t" # tab
"\v" # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081136Z" creationid="hirofumiwakasugi" creationdate="20150901T081136Z">
        <seg>```ruby
"\"" # ダブルクォート
"\\" # バックスラッシュ
"\e" # エスケープ
"\f" # フォームフィード (改ページ)
"\n" # ニューライン (改行)
"\r" # キャリッジリターン (復帰)
"\t" # タブ
"\v" # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # string with one character with code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081234Z" creationid="hirofumiwakasugi" creationdate="20150901T081151Z">
        <seg>```ruby
"\101" # == "A"
"\123" # == "S"
"\12"  # == "\n"
"\1"   # コードポイント1の文字が1つだけの文字列
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\u0041" # == "A"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081237Z" creationid="hirofumiwakasugi" creationdate="20150901T081237Z">
        <seg>```ruby
"\u0041" # == "A"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081239Z" creationid="hirofumiwakasugi" creationdate="20150901T081239Z">
        <seg>```ruby
"\u{41}"    # == "A"
"\u{1F52E}" # == "  "
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081303Z" creationid="hirofumiwakasugi" creationdate="20150901T081303Z">
        <seg>```ruby
"hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello " \
"world, " \
"no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104033Z" creationid="hirofumiwakasugi" creationdate="20150901T104033Z">
        <seg>```ruby
"hello " \
"world, " \
"no newlines" # "hello world, no newlines" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104110Z" creationid="hirofumiwakasugi" creationdate="20150901T104110Z">
        <seg>```ruby
"hello \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
"hello world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081028Z" creationid="hirofumiwakasugi" creationdate="20150901T081028Z">
        <seg>```ruby
"hello world"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# A proc without arguments
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021054Z" creationid="hirofumiwakasugi" creationdate="20150902T021054Z">
        <seg>```ruby
# 引数のない Proc
-&gt;{ 1 } # Proc(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# A setter
person.name=("John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054642Z" creationid="hirofumiwakasugi" creationdate="20150902T054642Z">
        <seg>```ruby
# セッター
person.name=("John")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Assigns to a local variable
local = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053942Z" creationid="hirofumiwakasugi" creationdate="20150902T053942Z">
        <seg>```ruby
# ローカル変数への代入
local = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Clearer than the above: `a` doesn't need
# to be in the exception handling code.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023234Z" creationid="hirofumiwakasugi" creationdate="20150907T023234Z">
        <seg>```ruby
# 例外処理のコードの内部で `a` 宣言する必要はないため、
# こう書くことでより意図が明確になる</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Defines a method in the program
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021436Z" creationid="hirofumiwakasugi" creationdate="20150904T015152Z">
        <seg>```ruby
# プログラムにメソッドを定義
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Error: undefined method 'length' for Nil
john.address.length
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054541Z" creationid="hirofumiwakasugi" creationdate="20150905T054541Z">
        <seg>```ruby
# Error: undefined method 'length' for Nil
john.address.length
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# First option: assign it to a variable
if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T020202Z" creationid="hirofumiwakasugi" creationdate="20150903T020202Z">
        <seg>```ruby
# 方法1: 変数に代入する
if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# In file one.cr
private def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040826Z" creationid="hirofumiwakasugi" creationdate="20150909T040802Z">
        <seg>```ruby
# one.cr ファイル
private def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# On a 64 bits machine
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035536Z" creationid="hirofumiwakasugi" creationdate="20150906T035536Z">
        <seg>```ruby
# 64ビット処理系の場合
sizeof(Pointer(Int32)) #=&gt; 8
sizeof(String)         #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# One for each thread
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T072542Z" creationid="hirofumiwakasugi" creationdate="20150919T072506Z">
        <seg>```ruby
# スレッドごとに1つずつ
@[ThreadLocal]
$values = [] of Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Same as not specifying a restriction, not very useful
def foo(x : _)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012211Z" creationid="hirofumiwakasugi" creationdate="20151009T012211Z">
        <seg>```ruby
# 何も制約を与えないことと同じ。これではあまり役には立たない
def foo(x : _)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# Supports double quotes and nested parenthesis
%(hello ("world")) # same as "hello (\"world\")"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104749Z" creationid="hirofumiwakasugi" creationdate="20150901T104517Z">
        <seg>```ruby
# ダブルクォートと入れ子のカッコを含む
%(hello ("world")) # "hello (\"world\")" と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# This generates:
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020931Z" creationid="hirofumiwakasugi" creationdate="20151001T020931Z">
        <seg>```ruby
# 下記が生成される
#
#     def :foo
#       1
#     end
define_method :foo, 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# This is a comment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050709Z" creationid="hirofumiwakasugi" creationdate="20150901T050709Z">
        <seg>```ruby
# This is a comment
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# elements is Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042219Z" creationid="hirofumiwakasugi" creationdate="20150907T042219Z">
        <seg>```ruby
# Tuple(Int32, Int32, Int32)
sum 1, 2, 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
# in spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T162245Z" creationid="hirofumiwakasugi" creationdate="20150905T160402Z">
        <seg>```ruby
# spec/project_spec.cr
require "../src/project"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
$year = 2014
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T053631Z" creationid="hirofumiwakasugi" creationdate="20150902T053631Z">
        <seg>```ruby
$year = 2014
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140106Z" creationid="hirofumiwakasugi" creationdate="20150901T140106Z">
        <seg>```ruby
%i(one two three) # [:one, :two, :three]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140049Z" creationid="hirofumiwakasugi" creationdate="20150901T140049Z">
        <seg>```ruby
%w(one two three) # ["one", "two", "three"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\'' # single quote
'\\' # backslash
'\e' # escape
'\f' # form feed
'\n' # newline
'\r' # carriage return
'\t' # tab
'\v' # vertical tab
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074837Z" creationid="hirofumiwakasugi" creationdate="20150901T074605Z">
        <seg>```ruby
'\'' # シングルクォート
'\\' # バックスラッシュ
'\e' # エスケープ
'\f' # フォームフィード (改ページ)
'\n' # ニューライン (改行)
'\r' # キャリッジリターン (復帰)
'\t' # タブ
'\v' # 垂直タブ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # code point 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081211Z" creationid="hirofumiwakasugi" creationdate="20150901T074839Z">
        <seg>```ruby
'\101' # == 'A'
'\123' # == 'S'
'\12'  # == '\n'
'\1'   # コードポイント1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\u0041' # == 'A'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080201Z" creationid="hirofumiwakasugi" creationdate="20150901T080201Z">
        <seg>```ruby
'\u0041' # == 'A'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T080332Z" creationid="hirofumiwakasugi" creationdate="20150901T080332Z">
        <seg>```ruby
'\u{41}'    # == 'A'
'\u{1F52E}' # == '  '
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074515Z" creationid="hirofumiwakasugi" creationdate="20150901T074515Z">
        <seg>```ruby
'a'
'z'
'0'
'_'
'あ'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
+   # addition
-   # subtraction
*   # multiplication
/   # division
%   # modulo
!   # negation
&amp;   # bitwise and
|   # bitwise or
^   # bitwise xor
**  # exponentiation
&lt;&lt;  # shift left, append
&gt;&gt;  # shift right
==  # equals
!=  # not equals
&lt;   # less
&lt;=  # less or equal
&gt;   # greater
&gt;=  # greater or equal
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030904Z" creationid="hirofumiwakasugi" creationdate="20150909T025945Z">
        <seg>```ruby
+   # 加算
-   # 減算
*   # 乗算
/   # 除算
%   # 剰余
!   # 否定
&amp;   # ビット AND
|   # ビット OR
^   # ビット XOR
**  # べき乗
&lt;&lt;  # 左シフト/追加
&gt;&gt;  # 右シフト
==  # 等しい
!=  # 等しくない
&lt;   # 未満 (〜より小さい)
&lt;=  # 以下
&gt;   # 超 (〜より大きい)
&gt;=  # 以上
&lt;=&gt; # comparison
=== # case equality
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
+   # positive
-   # negative
!   # not
~   # bitwise complement
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T030436Z" creationid="hirofumiwakasugi" creationdate="20150909T025413Z">
        <seg>```ruby
+   # 正数
-   # 負数
!   # 否定
~   # ビットの補数
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0123 # == 83
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052539Z" creationid="hirofumiwakasugi" creationdate="20150901T052539Z">
        <seg>```ruby
0123 # == 83
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0b1101 # == 13
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052456Z" creationid="hirofumiwakasugi" creationdate="20150901T052456Z">
        <seg>```ruby
0b1101 # == 13
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052550Z" creationid="hirofumiwakasugi" creationdate="20150901T052550Z">
        <seg>```ruby
0xFE012D # == 16646445
0xfe012d # == 16646445
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1      # Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052259Z" creationid="hirofumiwakasugi" creationdate="20150901T052259Z">
        <seg>```ruby
1      # Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1 as String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015429Z" creationid="hirofumiwakasugi" creationdate="20150930T015429Z">
        <seg>```ruby
1 as String # Error
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074015Z" creationid="hirofumiwakasugi" creationdate="20150901T074015Z">
        <seg>```ruby
1.0      # Float64
1.0_f32  # Float32
1_f32    # Float32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1_000_000 # better than 1000000
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T052416Z" creationid="hirofumiwakasugi" creationdate="20150901T052416Z">
        <seg>```ruby
1_000_000 # 1000000 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
1_000_000.111_111 # better than 1000000.111111
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T074039Z" creationid="hirofumiwakasugi" creationdate="20150901T074017Z">
        <seg>```ruby
1_000_000.111_111 # 1000000.111111 より読みやすい
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
3.times do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031810Z" creationid="hirofumiwakasugi" creationdate="20150916T031810Z">
        <seg>```ruby
3.times do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
:hello
:good_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131122Z" creationid="hirofumiwakasugi" creationdate="20150901T131122Z">
        <seg>```ruby
:hello
:good_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[AlwaysInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073143Z" creationid="hirofumiwakasugi" creationdate="20150919T073143Z">
        <seg>```ruby
@[AlwaysInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Flags]
enum IOMode</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T114622Z" creationid="hirofumiwakasugi" creationdate="20150914T114622Z">
        <seg>```ruby
@[Flags]
enum IOMode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T142256Z" creationid="hirofumiwakasugi" creationdate="20151003T142256Z">
        <seg>```ruby
@[Link("pcre")]
lib LibPCRE
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T022114Z" creationid="hirofumiwakasugi" creationdate="20151008T022114Z">
        <seg>```ruby
@[Link("pcre")]
lib PCRE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
@[NoInline]
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T073223Z" creationid="hirofumiwakasugi" creationdate="20150919T073223Z">
        <seg>```ruby
@[NoInline]
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035934Z" creationid="hirofumiwakasugi" creationdate="20150910T035934Z">
        <seg>```ruby
Animal.new # Error: can't instantiate abstract class Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142913Z" creationid="hirofumiwakasugi" creationdate="20150911T142913Z">
        <seg>```ruby
Base64.encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143852Z" creationid="hirofumiwakasugi" creationdate="20151003T143852Z">
        <seg>```ruby
C.cos(1.5) #=&gt; 0.0707372
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053826Z" creationid="hirofumiwakasugi" creationdate="20151007T053826Z">
        <seg>```ruby
C.errno #=&gt; some value
C.errno = 0
C.errno #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024559Z" creationid="hirofumiwakasugi" creationdate="20150914T024559Z">
        <seg>```ruby
Color::Green.value #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Color::Red #:: Color
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024540Z" creationid="hirofumiwakasugi" creationdate="20150914T024540Z">
        <seg>```ruby
Color::Red #:: Color
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T051527Z" creationid="hirofumiwakasugi" creationdate="20150915T051527Z">
        <seg>```ruby
IOMode::None.value #=&gt; 0
IOMode::All.value  #=&gt; 7
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010421Z" creationid="hirofumiwakasugi" creationdate="20151009T010421Z">
        <seg>```ruby
Int32
My::Nested::Type
Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox(Int32).new("hello")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063253Z" creationid="hirofumiwakasugi" creationdate="20150912T063253Z">
        <seg>```ruby
MyBox(Int32).new("hello")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox(Int32).new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062054Z" creationid="hirofumiwakasugi" creationdate="20150912T062054Z">
        <seg>```ruby
MyBox(Int32).new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060645Z" creationid="hirofumiwakasugi" creationdate="20150912T060645Z">
        <seg>```ruby
MyBox.new(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055535Z" creationid="hirofumiwakasugi" creationdate="20150912T055535Z">
        <seg>```ruby
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T070753Z" creationid="hirofumiwakasugi" creationdate="20150912T070753Z">
        <seg>```ruby
MyBox.new(1)       #:: MyBox(Int32)
MyBox.new("hello") #:: MyBox(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055748Z" creationid="hirofumiwakasugi" creationdate="20150912T055748Z">
        <seg>```ruby
MyBox.new(nil)
MyBox.new("hello")
MyBox.new(1)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140602Z" creationid="hirofumiwakasugi" creationdate="20150901T140602Z">
        <seg>```ruby
MyType(Int32 | String) {1, 2, "foo"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143117Z" creationid="hirofumiwakasugi" creationdate="20150901T143117Z">
        <seg>```ruby
MyType(String, String) {"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType{"foo": "bar"}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143113Z" creationid="hirofumiwakasugi" creationdate="20150901T143113Z">
        <seg>```ruby
MyType{"foo": "bar"}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
MyType{1, 2, 3}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140318Z" creationid="hirofumiwakasugi" creationdate="20150901T140318Z">
        <seg>```ruby
MyType{1, 2, 3}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
PI = 3.14</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055323Z" creationid="hirofumiwakasugi" creationdate="20150913T055323Z">
        <seg>```ruby
PI = 3.14</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062323Z" creationid="hirofumiwakasugi" creationdate="20150930T062323Z">
        <seg>```ruby
Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021459Z" creationid="hirofumiwakasugi" creationdate="20150902T021459Z">
        <seg>```ruby
Proc(Int32, String).new { |x| x.to_s } # Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
TEN = begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055807Z" creationid="hirofumiwakasugi" creationdate="20150913T055807Z">
        <seg>```ruby
TEN = begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
VALUES = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041453Z" creationid="hirofumiwakasugi" creationdate="20151001T041453Z">
        <seg>```ruby
VALUES = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024510Z" creationid="hirofumiwakasugi" creationdate="20151008T024510Z">
        <seg>```ruby
X.callback -&gt;(x) { x + 1 }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052915Z" creationid="hirofumiwakasugi" creationdate="20151007T052915Z">
        <seg>```ruby
X::SomeEnum::One #=&gt; One
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T131950Z" creationid="hirofumiwakasugi" creationdate="20150901T131950Z">
        <seg>```ruby
[1, 2, 3]         # Array(Int32)
[1, "hello", 'x'] # Array(Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[]  # array index (raises on out of bounds)
[]? # array index (nil on out of bounds)
[]= # array index assignment
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031026Z" creationid="hirofumiwakasugi" creationdate="20150909T030958Z">
        <seg>```ruby
[]  # 配列のインデックス (配列長を超えると例外が発生)
[]? # 配列のインデックス (配列長を超えると nil)
[]= # 配列のインデックス指定代入
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
[] of Int32 # same as Array(Int32).new
[]          # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T135831Z" creationid="hirofumiwakasugi" creationdate="20150901T135817Z">
        <seg>```ruby
[] of Int32 # Array(Int32).new と同じ
[]          # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025054Z" creationid="hirofumiwakasugi" creationdate="20150909T025054Z">
        <seg>```ruby
a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>```ruby
a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T005345Z" creationid="hirofumiwakasugi" creationdate="20150930T005345Z">
        <seg>```ruby
a = 1
a.is_a?(Int32)          #=&gt; true
a.is_a?(String)         #=&gt; false
a.is_a?(Number)         #=&gt; true
a.is_a?(Int32 | String) #=&gt; true
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:length) #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T013907Z" creationid="hirofumiwakasugi" creationdate="20150930T013907Z">
        <seg>```ruby
a = 1
a.responds_to?(:abs)    #=&gt; true
a.responds_to?(:length) #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T105435Z" creationid="hirofumiwakasugi" creationdate="20150901T105435Z">
        <seg>```ruby
a = 1
b = 2
"sum = #{a + b}"        # "sum = 3"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055738Z" creationid="hirofumiwakasugi" creationdate="20150902T055738Z">
        <seg>```ruby
a = 1
b = 2
a, b = b, a
a #=&gt; 2
b #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061302Z" creationid="hirofumiwakasugi" creationdate="20150930T061302Z">
        <seg>```ruby
a = 1
b = a as Int32 | Float64
b #:: Int32 | Float64
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062507Z" creationid="hirofumiwakasugi" creationdate="20150930T062507Z">
        <seg>```ruby
a = 1
b = typeof(a) #=&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010128Z" creationid="hirofumiwakasugi" creationdate="20150903T010128Z">
        <seg>```ruby
a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011255Z" creationid="hirofumiwakasugi" creationdate="20150903T011255Z">
        <seg>```ruby
a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # undefined behaviour, probably a segmentation fault
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012907Z" creationid="hirofumiwakasugi" creationdate="20151009T012741Z">
        <seg>```ruby
a = 1
ptr = pointerof(a)
ptr[100_000] = 2   # 定義されていない振る舞いであるため、おそらくセグメンテーション違反となる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T040059Z" creationid="hirofumiwakasugi" creationdate="20150906T040059Z">
        <seg>```ruby
a = 1
sizeof(typeof(a)) #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>```ruby
a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052143Z" creationid="hirofumiwakasugi" creationdate="20150905T052143Z">
        <seg>```ruby
a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072340Z" creationid="hirofumiwakasugi" creationdate="20150901T072340Z">
        <seg>```ruby
a = 1 + 2
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013721Z" creationid="hirofumiwakasugi" creationdate="20150903T013721Z">
        <seg>```ruby
a = 1 &gt; 2 ? 3 : 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052239Z" creationid="hirofumiwakasugi" creationdate="20150905T052239Z">
        <seg>```ruby
a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = 2 if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012904Z" creationid="hirofumiwakasugi" creationdate="20150903T012904Z">
        <seg>```ruby
a = 2 if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062208Z" creationid="hirofumiwakasugi" creationdate="20150930T062208Z">
        <seg>```ruby
a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013132Z" creationid="hirofumiwakasugi" creationdate="20150903T013132Z">
        <seg>```ruby
a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022014Z" creationid="hirofumiwakasugi" creationdate="20150903T022014Z">
        <seg>```ruby
a = some_condition ? 1 : "hello"
# a :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a = some_condition ? nil : 3
# a is Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014257Z" creationid="hirofumiwakasugi" creationdate="20150903T014137Z">
        <seg>```ruby
a = some_condition ? nil : 3
# a は Int32 か Nil のいずれか</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a.+(b)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025102Z" creationid="hirofumiwakasugi" creationdate="20150909T025102Z">
        <seg>```ruby
a.+(b)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
a_as_int = a as Int32
a_as_int.abs          # works, compiler knows that a_as_int is Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015201Z" creationid="hirofumiwakasugi" creationdate="20150930T014930Z">
        <seg>```ruby
a_as_int = a as Int32
a_as_int.abs          # コンパイラは a_as_int が Int32 であると知っているので動作する
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040129Z" creationid="hirofumiwakasugi" creationdate="20150910T040129Z">
        <seg>```ruby
abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
abstract class Animal
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035315Z" creationid="hirofumiwakasugi" creationdate="20150910T035315Z">
        <seg>```ruby
abstract class Animal
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
add 1, 2 # same as add(1, 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021627Z" creationid="hirofumiwakasugi" creationdate="20150904T021627Z">
        <seg>```ruby
add 1, 2 # add(1, 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011652Z" creationid="hirofumiwakasugi" creationdate="20151009T011652Z">
        <seg>```ruby
alias ComplexProc = (Int32 -&gt; Int32) -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32 = Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010921Z" creationid="hirofumiwakasugi" creationdate="20151009T010921Z">
        <seg>```ruby
alias Int32 = Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011403Z" creationid="hirofumiwakasugi" creationdate="20151009T011403Z">
        <seg>```ruby
alias Int32AndCharToString = Int32, Char -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010707Z" creationid="hirofumiwakasugi" creationdate="20151009T010707Z">
        <seg>```ruby
alias Int32OrNil = Int32 | ::Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrNil = Int32?
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010704Z" creationid="hirofumiwakasugi" creationdate="20151009T010704Z">
        <seg>```ruby
alias Int32OrNil = Int32?
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010438Z" creationid="hirofumiwakasugi" creationdate="20151009T010438Z">
        <seg>```ruby
alias Int32OrString = Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32Ptr = Int32*
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T010919Z" creationid="hirofumiwakasugi" creationdate="20151009T010919Z">
        <seg>```ruby
alias Int32Ptr = Int32*
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011135Z" creationid="hirofumiwakasugi" creationdate="20151009T011135Z">
        <seg>```ruby
alias Int32StringTuple = Tuple(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011133Z" creationid="hirofumiwakasugi" creationdate="20151009T011133Z">
        <seg>```ruby
alias Int32StringTuple = {Int32, String}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011309Z" creationid="hirofumiwakasugi" creationdate="20151009T011309Z">
        <seg>```ruby
alias Int32ToString = Int32 -&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011310Z" creationid="hirofumiwakasugi" creationdate="20151009T011310Z">
        <seg>```ruby
alias Int32ToString = Proc(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011053Z" creationid="hirofumiwakasugi" creationdate="20151009T011053Z">
        <seg>```ruby
alias Int32_8 = Int32[8]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011055Z" creationid="hirofumiwakasugi" creationdate="20151009T011055Z">
        <seg>```ruby
alias Int32_8 = StaticArray(Int32, 8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070808Z" creationid="hirofumiwakasugi" creationdate="20150919T070808Z">
        <seg>```ruby
alias PInt32 = Pointer(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011353Z" creationid="hirofumiwakasugi" creationdate="20151009T011353Z">
        <seg>```ruby
alias ProcThatReturnsInt32 = -&gt; Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071328Z" creationid="hirofumiwakasugi" creationdate="20150919T071328Z">
        <seg>```ruby
alias RecArray = Array(Int32) | Array(RecArray)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012332Z" creationid="hirofumiwakasugi" creationdate="20151009T012332Z">
        <seg>```ruby
alias SameAsInt32 = typeof(1 + 2)
alias Int32OrString = typeof(1, "a")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
array = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T020103Z" creationid="hirofumiwakasugi" creationdate="20150930T020103Z">
        <seg>```ruby
array = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
array = [1, 2, 3]
array[4]  # raises because of IndexOutOfBounds
array[4]? # returns nil because of index out of bounds
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023851Z" creationid="hirofumiwakasugi" creationdate="20150907T023803Z">
        <seg>```ruby
array = [1, 2, 3]
array[4]  # IndexOutOfBounds の例外が発生
array[4]? # インデックス範囲外のため nil が返る
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ary = [1, 2, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061345Z" creationid="hirofumiwakasugi" creationdate="20150930T061345Z">
        <seg>```ruby
ary = [1, 2, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023736Z" creationid="hirofumiwakasugi" creationdate="20150916T023736Z">
        <seg>```ruby
ary = [1, 2, 3]
ary.map { |x| x + 1 }         #=&gt; [2, 3, 4]
ary.select { |x| x % 2 == 1 } #=&gt; [1, 3]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011957Z" creationid="hirofumiwakasugi" creationdate="20150907T011957Z">
        <seg>```ruby
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
buffer :: UInt8[256]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115712Z" creationid="hirofumiwakasugi" creationdate="20150906T115712Z">
        <seg>```ruby
buffer :: UInt8[256]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010125Z" creationid="hirofumiwakasugi" creationdate="20151001T010125Z">
        <seg>```ruby
case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023532Z" creationid="hirofumiwakasugi" creationdate="20150903T023532Z">
        <seg>```ruby
case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010102Z" creationid="hirofumiwakasugi" creationdate="20151001T010102Z">
        <seg>```ruby
case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010027Z" creationid="hirofumiwakasugi" creationdate="20151001T010027Z">
        <seg>```ruby
case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Animal
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>```ruby
class Animal
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Array</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063207Z" creationid="hirofumiwakasugi" creationdate="20150930T063207Z">
        <seg>```ruby
class Array</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040805Z" creationid="hirofumiwakasugi" creationdate="20150910T040805Z">
        <seg>```ruby
class Counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032833Z" creationid="hirofumiwakasugi" creationdate="20150909T032833Z">
        <seg>```ruby
class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041636Z" creationid="hirofumiwakasugi" creationdate="20150910T041636Z">
        <seg>```ruby
class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Model</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061907Z" creationid="hirofumiwakasugi" creationdate="20150918T061907Z">
        <seg>```ruby
class Model</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyArray</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031030Z" creationid="hirofumiwakasugi" creationdate="20150909T031030Z">
        <seg>```ruby
class MyArray</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyBox</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T054626Z" creationid="hirofumiwakasugi" creationdate="20150912T054626Z">
        <seg>```ruby
class MyBox</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyBox(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062003Z" creationid="hirofumiwakasugi" creationdate="20150912T062003Z">
        <seg>```ruby
class MyBox(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyDictionary(K, V)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065702Z" creationid="hirofumiwakasugi" creationdate="20150912T065702Z">
        <seg>```ruby
class MyDictionary(K, V)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class MyException &lt; Exception
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011645Z" creationid="hirofumiwakasugi" creationdate="20150907T011645Z">
        <seg>```ruby
class MyException &lt; Exception
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Object</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>```ruby
class Object</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041158Z" creationid="hirofumiwakasugi" creationdate="20150910T041158Z">
        <seg>```ruby
class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011957Z" creationid="hirofumiwakasugi" creationdate="20151009T011957Z">
        <seg>```ruby
class Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Parent(T)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T062012Z">
        <seg>```ruby
class Parent(T)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055610Z" creationid="hirofumiwakasugi" creationdate="20150904T055610Z">
        <seg>```ruby
class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Person
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T022025Z" creationid="hirofumiwakasugi" creationdate="20150904T022025Z">
        <seg>```ruby
class Person
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
class Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035030Z" creationid="hirofumiwakasugi" creationdate="20150906T035030Z">
        <seg>```ruby
class Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def add(x : Number, y : Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042641Z" creationid="hirofumiwakasugi" creationdate="20150907T042641Z">
        <seg>```ruby
def add(x : Number, y : Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def add(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021052Z" creationid="hirofumiwakasugi" creationdate="20150904T021052Z">
        <seg>```ruby
def add(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021408Z" creationid="hirofumiwakasugi" creationdate="20150904T021408Z">
        <seg>```ruby
def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def capture(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024151Z" creationid="hirofumiwakasugi" creationdate="20150917T024151Z">
        <seg>```ruby
def capture(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def change_it(tz)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051840Z" creationid="hirofumiwakasugi" creationdate="20151007T051840Z">
        <seg>```ruby
def change_it(tz)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def change_it(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052423Z" creationid="hirofumiwakasugi" creationdate="20151007T052423Z">
        <seg>```ruby
def change_it(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053728Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>```ruby
def counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def even?(num)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015356Z" creationid="hirofumiwakasugi" creationdate="20150904T015356Z">
        <seg>```ruby
def even?(num)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030210Z" creationid="hirofumiwakasugi" creationdate="20150908T030210Z">
        <seg>```ruby
def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(*args : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025929Z" creationid="hirofumiwakasugi" creationdate="20150908T025929Z">
        <seg>```ruby
def foo(*args : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Array(T))</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T035911Z" creationid="hirofumiwakasugi" creationdate="20150908T035911Z">
        <seg>```ruby
def foo(x : Array(T))</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011904Z" creationid="hirofumiwakasugi" creationdate="20151009T011904Z">
        <seg>```ruby
def foo(x : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025541Z" creationid="hirofumiwakasugi" creationdate="20150908T025541Z">
        <seg>```ruby
def foo(x : Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025810Z" creationid="hirofumiwakasugi" creationdate="20150908T025810Z">
        <seg>```ruby
def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : Int32.class)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025722Z" creationid="hirofumiwakasugi" creationdate="20150908T025722Z">
        <seg>```ruby
def foo(x : Int32.class)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030349Z" creationid="hirofumiwakasugi" creationdate="20150908T030349Z">
        <seg>```ruby
def foo(x : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def foo(x : T.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040534Z" creationid="hirofumiwakasugi" creationdate="20150908T040534Z">
        <seg>```ruby
def foo(x : T.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040124Z" creationid="hirofumiwakasugi" creationdate="20150916T040124Z">
        <seg>```ruby
def int_to_int(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def many</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022216Z" creationid="hirofumiwakasugi" creationdate="20150916T022216Z">
        <seg>```ruby
def many</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022048Z" creationid="hirofumiwakasugi" creationdate="20150902T022048Z">
        <seg>```ruby
def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def paint(color : Color)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011820Z" creationid="hirofumiwakasugi" creationdate="20150916T011820Z">
        <seg>```ruby
def paint(color : Color)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def paint(color : Symbol)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012133Z" creationid="hirofumiwakasugi" creationdate="20150916T012133Z">
        <seg>```ruby
def paint(color : Symbol)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022124Z" creationid="hirofumiwakasugi" creationdate="20150902T022124Z">
        <seg>```ruby
def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025053Z" creationid="hirofumiwakasugi" creationdate="20150917T025053Z">
        <seg>```ruby
def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023033Z" creationid="hirofumiwakasugi" creationdate="20150916T023033Z">
        <seg>```ruby
def some</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014222Z" creationid="hirofumiwakasugi" creationdate="20150907T014222Z">
        <seg>```ruby
def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T024642Z" creationid="hirofumiwakasugi" creationdate="20150909T024642Z">
        <seg>```ruby
def some_method : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113107Z" creationid="hirofumiwakasugi" creationdate="20150906T113107Z">
        <seg>```ruby
def some_method(x, y = 1, z = 2, w = 3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061638Z" creationid="hirofumiwakasugi" creationdate="20150918T061638Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061951Z" creationid="hirofumiwakasugi" creationdate="20150918T061951Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061942Z" creationid="hirofumiwakasugi" creationdate="20150918T061942Z">
        <seg>```ruby
def some_proc(&amp;block : Int32 -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def sum(*elements)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042104Z" creationid="hirofumiwakasugi" creationdate="20150907T042104Z">
        <seg>```ruby
def sum(*elements)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def thrice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024340Z" creationid="hirofumiwakasugi" creationdate="20150916T024340Z">
        <seg>```ruby
def thrice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def transform(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024143Z" creationid="hirofumiwakasugi" creationdate="20150916T024143Z">
        <seg>```ruby
def transform(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013504Z" creationid="hirofumiwakasugi" creationdate="20150916T013504Z">
        <seg>```ruby
def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
def twice(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014713Z" creationid="hirofumiwakasugi" creationdate="20150916T014713Z">
        <seg>```ruby
def twice(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
enum Color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024114Z" creationid="hirofumiwakasugi" creationdate="20150914T024114Z">
        <seg>```ruby
enum Color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
enum Color : UInt8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150914T024636Z" creationid="hirofumiwakasugi" creationdate="20150914T024636Z">
        <seg>```ruby
enum Color : UInt8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024247Z" creationid="hirofumiwakasugi" creationdate="20151008T024247Z">
        <seg>```ruby
f = -&gt;(x : Int32) { x + 1 }
X.callback(f)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
foo_forward do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032352Z" creationid="hirofumiwakasugi" creationdate="20150917T032352Z">
        <seg>```ruby
foo_forward do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T015738Z" creationid="hirofumiwakasugi" creationdate="20150902T015738Z">
        <seg>```ruby
foo_or_bar = /foo|bar/
heeello    = /h(e+)llo/
integer    = /\d+/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062813Z" creationid="hirofumiwakasugi" creationdate="20150930T062813Z">
        <seg>```ruby
hash = {} of Int32 =&gt; String
another_hash = typeof(hash).new #:: Hash(Int32, String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
i = 0
while i &lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032841Z" creationid="hirofumiwakasugi" creationdate="20150916T032841Z">
        <seg>```ruby
i = 0
while i &lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031437Z" creationid="hirofumiwakasugi" creationdate="20150916T031437Z">
        <seg>```ruby
i = 1
puts "Got: #{i}"
i = 2
puts "Got: #{i}"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013554Z" creationid="hirofumiwakasugi" creationdate="20150903T013512Z">
        <seg>```ruby
# 例1
if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T015310Z" creationid="hirofumiwakasugi" creationdate="20150903T015310Z">
        <seg>```ruby
if @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022437Z" creationid="hirofumiwakasugi" creationdate="20150903T022437Z">
        <seg>```ruby
if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030538Z" creationid="hirofumiwakasugi" creationdate="20150903T030538Z">
        <seg>```ruby
if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014802Z" creationid="hirofumiwakasugi" creationdate="20150903T014802Z">
        <seg>```ruby
if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014724Z" creationid="hirofumiwakasugi" creationdate="20150903T014724Z">
        <seg>```ruby
if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021655Z" creationid="hirofumiwakasugi" creationdate="20150903T021655Z">
        <seg>```ruby
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022321Z" creationid="hirofumiwakasugi" creationdate="20150903T022321Z">
        <seg>```ruby
if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030235Z" creationid="hirofumiwakasugi" creationdate="20150903T030235Z">
        <seg>```ruby
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021019Z" creationid="hirofumiwakasugi" creationdate="20150903T021019Z">
        <seg>```ruby
if method # メソッドの最初の呼び出し (メソッドは Int32 か Nil を返すとする)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010635Z" creationid="hirofumiwakasugi" creationdate="20150903T010635Z">
        <seg>```ruby
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043408Z" creationid="hirofumiwakasugi" creationdate="20150908T043408Z">
        <seg>```ruby
ifdef linux &amp;&amp; x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043209Z" creationid="hirofumiwakasugi" creationdate="20150908T043209Z">
        <seg>```ruby
ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
include Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145241Z" creationid="hirofumiwakasugi" creationdate="20150911T145241Z">
        <seg>```ruby
include Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024659Z" creationid="hirofumiwakasugi" creationdate="20150917T024659Z">
        <seg>```ruby
invoke(proc) # Error: wrong number of arguments for 'invoke' (1 for 0)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
john.name.length
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043724Z" creationid="hirofumiwakasugi" creationdate="20150905T043724Z">
        <seg>```ruby
john = Person.new "John"
john.name.length
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043117Z" creationid="hirofumiwakasugi" creationdate="20150905T043117Z">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135435Z" creationid="hirofumiwakasugi" creationdate="20150904T135435Z">
        <seg>```ruby
john = Person.new "John"
one = Person.new 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055720Z" creationid="hirofumiwakasugi" creationdate="20150904T055720Z">
        <seg>```ruby
john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.become_older by: 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113000Z" creationid="hirofumiwakasugi" creationdate="20150906T113000Z">
        <seg>```ruby
john.become_older by: 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T034140Z" creationid="hirofumiwakasugi" creationdate="20150910T034140Z">
        <seg>```ruby
john.pet.talk # Error: undefined method 'talk' for Animal
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T035318Z" creationid="hirofumiwakasugi" creationdate="20150910T035318Z">
        <seg>```ruby
john.pet.talk #=&gt; "Woof!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib C</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043753Z" creationid="hirofumiwakasugi" creationdate="20150908T043753Z">
        <seg>```ruby
lib C</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LLVMIntrinsics</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041702Z" creationid="hirofumiwakasugi" creationdate="20151005T041702Z">
        <seg>```ruby
lib LLVMIntrinsics</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LibFoo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074353Z" creationid="hirofumiwakasugi" creationdate="20150919T074353Z">
        <seg>```ruby
lib LibFoo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib LibSDL</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041458Z" creationid="hirofumiwakasugi" creationdate="20151005T041458Z">
        <seg>```ruby
lib LibSDL</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib MyLib</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042603Z" creationid="hirofumiwakasugi" creationdate="20151005T042603Z">
        <seg>```ruby
lib MyLib</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib U</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052109Z" creationid="hirofumiwakasugi" creationdate="20151007T052109Z">
        <seg>```ruby
lib U</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
lib X</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040825Z" creationid="hirofumiwakasugi" creationdate="20151005T040825Z">
        <seg>```ruby
lib X</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
local += 1  # same as: local = local + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054433Z" creationid="hirofumiwakasugi" creationdate="20150902T054433Z">
        <seg>```ruby
local += 1  # local = local + 1 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052207Z" creationid="hirofumiwakasugi" creationdate="20150905T052207Z">
        <seg>```ruby
loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040736Z" creationid="hirofumiwakasugi" creationdate="20151001T040736Z">
        <seg>```ruby
macro define_dummy_methods(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(hash)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>```ruby
macro define_dummy_methods(hash)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_dummy_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040300Z" creationid="hirofumiwakasugi" creationdate="20151001T040300Z">
        <seg>```ruby
macro define_dummy_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro define_method(name, content)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014649Z" creationid="hirofumiwakasugi" creationdate="20151001T014649Z">
        <seg>```ruby
macro define_method(name, content)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro dont_update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020011Z" creationid="hirofumiwakasugi" creationdate="20151002T020011Z">
        <seg>```ruby
macro dont_update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro fresh_vars_sample(*names)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021006Z" creationid="hirofumiwakasugi" creationdate="20151002T021006Z">
        <seg>```ruby
macro fresh_vars_sample(*names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro method_missing(name, args, block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014453Z" creationid="hirofumiwakasugi" creationdate="20151002T014453Z">
        <seg>```ruby
macro method_missing(name, args, block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro println(*values)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040859Z" creationid="hirofumiwakasugi" creationdate="20151001T040859Z">
        <seg>```ruby
macro println(*values)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
macro update_x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015557Z" creationid="hirofumiwakasugi" creationdate="20151002T015557Z">
        <seg>```ruby
macro update_x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Base64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142822Z" creationid="hirofumiwakasugi" creationdate="20150911T142822Z">
        <seg>```ruby
module Base64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Curses</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131044Z" creationid="hirofumiwakasugi" creationdate="20150911T131044Z">
        <seg>```ruby
module Curses</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module ItemsLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133835Z" creationid="hirofumiwakasugi" creationdate="20150911T133835Z">
        <seg>```ruby
module ItemsLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Json</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071401Z" creationid="hirofumiwakasugi" creationdate="20150919T071401Z">
        <seg>```ruby
module Json</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Moo
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T150637Z" creationid="hirofumiwakasugi" creationdate="20150911T150637Z">
        <seg>```ruby
module Moo
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module Moo(T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061137Z" creationid="hirofumiwakasugi" creationdate="20150924T061137Z">
        <seg>```ruby
module Moo(T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module SomeLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141819Z" creationid="hirofumiwakasugi" creationdate="20150911T141819Z">
        <seg>```ruby
module SomeLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
module SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142552Z" creationid="hirofumiwakasugi" creationdate="20150911T142552Z">
        <seg>```ruby
module SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
name = "Crystal"
age = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T051824Z" creationid="hirofumiwakasugi" creationdate="20150902T051824Z">
        <seg>```ruby
name = "Crystal"
age = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
name, age = "Crystal", 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055431Z" creationid="hirofumiwakasugi" creationdate="20150902T055431Z">
        <seg>```ruby
name, age = "Crystal", 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
names = "John", "Peter", "Jack"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060208Z" creationid="hirofumiwakasugi" creationdate="20150902T060208Z">
        <seg>```ruby
names = "John", "Peter", "Jack"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T050933Z" creationid="hirofumiwakasugi" creationdate="20150901T050933Z">
        <seg>```ruby
nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
objects[1], objects[2] = 3, 4</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060317Z" creationid="hirofumiwakasugi" creationdate="20150902T060317Z">
        <seg>```ruby
objects[1], objects[2] = 3, 4</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T134634Z" creationid="hirofumiwakasugi" creationdate="20150904T134634Z">
        <seg>```ruby
one = Person.new 1
one.name #=&gt; 1
one.name + 2 #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
person.age += 1        # same as: person.age = person.age + 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055054Z" creationid="hirofumiwakasugi" creationdate="20150902T055054Z">
        <seg>```ruby
person.age += 1        # person.age = person.age + 1 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
person.name, person.age = "John", 32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T060244Z" creationid="hirofumiwakasugi" creationdate="20150902T060244Z">
        <seg>```ruby
person.name, person.age = "John", 32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
pid = ...
options = ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043924Z" creationid="hirofumiwakasugi" creationdate="20151005T043924Z">
        <seg>```ruby
pid = ...
options = ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043715Z" creationid="hirofumiwakasugi" creationdate="20151005T043715Z">
        <seg>```ruby
pid = ...
options = ...
status_ptr :: Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T021955Z" creationid="hirofumiwakasugi" creationdate="20150902T021955Z">
        <seg>```ruby
proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025015Z" creationid="hirofumiwakasugi" creationdate="20150917T025015Z">
        <seg>```ruby
proc = capture { puts "Hello" }
twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T015742Z" creationid="hirofumiwakasugi" creationdate="20150930T015742Z">
        <seg>```ruby
ptr = Pointer(Int32).malloc(1)
ptr as Int8*                    #:: Pointer(Int8)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts "Hello world!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072447Z" creationid="hirofumiwakasugi" creationdate="20150901T072447Z">
        <seg>```ruby
puts "Hello world!"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T010959Z" creationid="hirofumiwakasugi" creationdate="20150916T010959Z">
        <seg>```ruby
puts Color.new(1) #=&gt; prints "Green"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011201Z" creationid="hirofumiwakasugi" creationdate="20150916T011201Z">
        <seg>```ruby
puts Color.new(10) #=&gt; prints "10"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
puts(Color::Red)                    # prints "Red"
puts(IOMode::Write | IOMode::Async) # prints "Write, Async"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150915T053216Z" creationid="hirofumiwakasugi" creationdate="20150915T053216Z">
        <seg>```ruby
puts(Color::Red)                    # "Red" を出力
puts(IOMode::Write | IOMode::Async) # "Write, Async" を出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
r = %r(regex with slash: /)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020207Z" creationid="hirofumiwakasugi" creationdate="20150902T020207Z">
        <seg>```ruby
r = %r(regex with slash: /)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
r = /foo/imx
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020140Z" creationid="hirofumiwakasugi" creationdate="20150902T020140Z">
        <seg>```ruby
r = /foo/imx
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011245Z" creationid="hirofumiwakasugi" creationdate="20150907T011245Z">
        <seg>```ruby
raise "OH NO!"
raise Exception.new("Some error")
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>```ruby
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
s = "hello"
# s :: String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072403Z" creationid="hirofumiwakasugi" creationdate="20150901T072403Z">
        <seg>```ruby
s = "hello"
# s :: String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035352Z" creationid="hirofumiwakasugi" creationdate="20150906T035352Z">
        <seg>```ruby
sizeof(Int32)  #=&gt; 4
sizeof(Int64)  #=&gt; 8
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
slash = /\//
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020149Z" creationid="hirofumiwakasugi" creationdate="20150902T020149Z">
        <seg>```ruby
slash = /\//
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052614Z" creationid="hirofumiwakasugi" creationdate="20150905T052614Z">
        <seg>```ruby
some_exp1 &amp;&amp; some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
some_exp1 || some_exp2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052658Z" creationid="hirofumiwakasugi" creationdate="20150905T052658Z">
        <seg>```ruby
some_exp1 || some_exp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022256Z" creationid="hirofumiwakasugi" creationdate="20150902T022256Z">
        <seg>```ruby
str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') #=&gt; 1
proc.call('l') #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Int</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032021Z" creationid="hirofumiwakasugi" creationdate="20150916T032021Z">
        <seg>```ruby
struct Int</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Point</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>```ruby
struct Point</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
struct Vector2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025209Z" creationid="hirofumiwakasugi" creationdate="20150909T025209Z">
        <seg>```ruby
struct Vector2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143116Z" creationid="hirofumiwakasugi" creationdate="20150901T143116Z">
        <seg>```ruby
tmp = MyType(typeof("foo"), typeof("bar")).new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140508Z" creationid="hirofumiwakasugi" creationdate="20150901T140508Z">
        <seg>```ruby
tmp = MyType(typeof(1, 2, 3)).new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140411Z" creationid="hirofumiwakasugi" creationdate="20150901T140411Z">
        <seg>```ruby
tmp = MyType.new
tmp &lt;&lt; 1
tmp &lt;&lt; 2
tmp &lt;&lt; 3
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143115Z" creationid="hirofumiwakasugi" creationdate="20150901T143115Z">
        <seg>```ruby
tmp = MyType.new
tmp["foo"] = "bar"
tmp
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T051039Z" creationid="hirofumiwakasugi" creationdate="20150901T051039Z">
        <seg>```ruby
true  # A Bool that is true
false # A Bool that is false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T020745Z" creationid="hirofumiwakasugi" creationdate="20150902T020745Z">
        <seg>```ruby
tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  #=&gt; 1       (Int32)
tuple[1]                  #=&gt; "hello" (String)
tuple[2]                  #=&gt; 'x'     (Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025052Z" creationid="hirofumiwakasugi" creationdate="20150917T025052Z">
        <seg>```ruby
twice &amp;-&gt;{ puts "Hello" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T021104Z" creationid="hirofumiwakasugi" creationdate="20150916T021104Z">
        <seg>```ruby
twice { |i| puts "Got #{i}" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
twice() do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014757Z" creationid="hirofumiwakasugi" creationdate="20150916T014757Z">
        <seg>```ruby
twice() do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062606Z" creationid="hirofumiwakasugi" creationdate="20150930T062606Z">
        <seg>```ruby
typeof(1, "a", 'a') #=&gt; (Int32 | String | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz :: C::TimeZone
tz.minutes_west #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050330Z" creationid="hirofumiwakasugi" creationdate="20151007T050314Z">
        <seg>```ruby
tz :: C::TimeZone
tz.minutes_west #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045950Z" creationid="hirofumiwakasugi" creationdate="20151007T045950Z">
        <seg>```ruby
tz = C::TimeZone.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050359Z" creationid="hirofumiwakasugi" creationdate="20151007T050359Z">
        <seg>```ruby
tz = C::TimeZone.new
tz.minutes_west = 1
tz.minutes_west #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T050542Z" creationid="hirofumiwakasugi" creationdate="20151007T050542Z">
        <seg>```ruby
tz = C::TimeZone.new minutes_west: 1, dst_time: 2
tz.minutes_west #=&gt; 1
tz.dst_time     #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022842Z" creationid="hirofumiwakasugi" creationdate="20150903T022842Z">
        <seg>```ruby
unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052411Z" creationid="hirofumiwakasugi" creationdate="20150905T052411Z">
        <seg>```ruby
until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value :: U::IntOrFlaot
value.some_int #=&gt; some garbage value
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052311Z" creationid="hirofumiwakasugi" creationdate="20151007T052311Z">
        <seg>```ruby
value :: U::IntOrFlaot
value.some_int #=&gt; 何かゴミの値
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = U::IntOrFloat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052235Z" creationid="hirofumiwakasugi" creationdate="20151007T052235Z">
        <seg>```ruby
value = U::IntOrFloat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052314Z" creationid="hirofumiwakasugi" creationdate="20151007T052314Z">
        <seg>```ruby
value = U::IntOrFloat.new
value.some_int = 1
value.some_int #=&gt; 1
value.some_float #=&gt; 4.94066e-324
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025314Z" creationid="hirofumiwakasugi" creationdate="20150916T025314Z">
        <seg>```ruby
value = twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025421Z" creationid="hirofumiwakasugi" creationdate="20150916T025421Z">
        <seg>```ruby
value = twice { break }
value #=&gt; nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025407Z" creationid="hirofumiwakasugi" creationdate="20150916T025407Z">
        <seg>```ruby
values = twice { break 1, 2 }
values #=&gt; {1, 2}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
var = "Hello"
# At this point 'var' is a String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T052134Z" creationid="hirofumiwakasugi" creationdate="20150902T052134Z">
        <seg>```ruby
var = "Hello"
# At this point 'var' is a String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052045Z" creationid="hirofumiwakasugi" creationdate="20150905T052045Z">
        <seg>```ruby
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
while true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052159Z" creationid="hirofumiwakasugi" creationdate="20150905T052159Z">
        <seg>```ruby
while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x :: Int32
x #=&gt; some random value, garbage, unreliable
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T115216Z" creationid="hirofumiwakasugi" creationdate="20150906T115137Z">
        <seg>```ruby
x :: Int32
x #=&gt; 何かのランダムな値。つまり信頼できないゴミのようなもの…
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053707Z" creationid="hirofumiwakasugi" creationdate="20150918T053707Z">
        <seg>```ruby
x = 0
proc = -&gt;{ x += 1; x }
proc.call #=&gt; 1
proc.call #=&gt; 2
x         #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021503Z" creationid="hirofumiwakasugi" creationdate="20150904T021503Z">
        <seg>```ruby
x = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055059Z" creationid="hirofumiwakasugi" creationdate="20150918T055059Z">
        <seg>```ruby
x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
x..y  # an inclusive range, in mathematics: [x, y]
x...y # an exclusive range, in mathematics: [x, y)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T014711Z" creationid="hirofumiwakasugi" creationdate="20150902T014401Z">
        <seg>```ruby
x..y  # 右側の値を「含む」範囲です。数学的には閉区間となります: [x, y]
x...y # 右側の値を「含まない」範囲です。数学的には左閉右開区間となります: [x, y)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
y = 2
X.callback -&gt;(x) { x + y } # Error: can't send closure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024723Z" creationid="hirofumiwakasugi" creationdate="20151008T024704Z">
        <seg>```ruby
y = 2
X.callback -&gt;(x) { x + y } # エラー: クロージャは</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T143008Z" creationid="hirofumiwakasugi" creationdate="20150901T143008Z">
        <seg>```ruby
{"key1": 'a', "key2": 'b'} # Hash(String, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040453Z" creationid="hirofumiwakasugi" creationdate="20151001T040453Z">
        <seg>```ruby
{% for name, index in ["foo", "bar", "baz"] %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{% if env("TEST") %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040248Z" creationid="hirofumiwakasugi" creationdate="20151001T040248Z">
        <seg>```ruby
{% if env("TEST") %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T140853Z" creationid="hirofumiwakasugi" creationdate="20150901T140853Z">
        <seg>```ruby
{1 =&gt; 2, 3 =&gt; 4}     # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3}   # Hash(Int32 | Char, Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142946Z" creationid="hirofumiwakasugi" creationdate="20150901T142946Z">
        <seg>```ruby
{key1: 'a', key2: 'b'} # Hash(Symbol, Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>```ruby
{} of Int32 =&gt; Int32 # same as Hash(Int32, Int32).new
{}                   # syntax error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T142650Z" creationid="hirofumiwakasugi" creationdate="20150901T142650Z">
        <seg>```ruby
{} of Int32 =&gt; Int32 # Hash(Int32, Int32).new と同じ
{}                   # シンタックスエラーになる
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` and `next` can also be used inside an `until`.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052430Z" creationid="hirofumiwakasugi" creationdate="20150905T052420Z">
        <seg>`until` の中でも、`break` と `next`を利用することができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` and `next` can't be used inside a captured block.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062009Z" creationid="hirofumiwakasugi" creationdate="20150918T062009Z">
        <seg>`break` と `next` を捕捉されたブロックの中で使用することはできません。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`break` can also accept arguments: these become the method's return value.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024600Z" creationid="hirofumiwakasugi" creationdate="20150916T024600Z">
        <seg>`break` は引数を受けとることも可能で、その場合にはそれがメソッドの戻り値となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`class` is also useful for creating arrays and collections of class type:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012005Z" creationid="hirofumiwakasugi" creationdate="20151009T011956Z">
        <seg>`class` はクラスの型を持つ配列やコレクションを作る場合にも有効に使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`class` is used to refer to a class type, instead of an instance type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011903Z" creationid="hirofumiwakasugi" creationdate="20151009T011903Z">
        <seg>`class` は、インスタンスの型ではなく、クラスの型を参照するために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`echo foo`  # =&gt; "foo"
$?.success?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173821Z" creationid="makenowjust" creationdate="20200422T173821Z">
        <seg>`echo foo`  # =&gt; "foo"
$?.success? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ensure` clauses are usually used for clean up, freeing resources, etc.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013731Z" creationid="hirofumiwakasugi" creationdate="20150907T013731Z">
        <seg>通常、`ensure` 節は処理の後始末やリソースの開放などに利用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`ln -s [full path to bin/crystal] /usr/local/bin/crystal`</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055936Z" creationid="hirofumiwakasugi" creationdate="20150831T055936Z">
        <seg>`ln -s [full path to bin/crystal] /usr/local/bin/crystal`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`return` can be used and will exit from the block (not the surrounding method).</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T062014Z" creationid="hirofumiwakasugi" creationdate="20150918T062014Z">
        <seg>`return` を使うことで (周りのメソッドではなく) ブロックを抜けることができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`self` can be used in the type grammar to denote a `self` type.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011809Z" creationid="hirofumiwakasugi" creationdate="20151009T011809Z">
        <seg>`self` は型文法では `self` の型であることを示すために利用できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`typeof` is allowed in the type grammar.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012303Z" creationid="hirofumiwakasugi" creationdate="20151009T012303Z">
        <seg>型文法では `typeof` を使うことができます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055809Z" creationid="hirofumiwakasugi" creationdate="20150913T055809Z">
        <seg>a
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035024Z" creationid="hirofumiwakasugi" creationdate="20150906T035024Z">
        <seg>a #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>a += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012210Z" creationid="hirofumiwakasugi" creationdate="20150903T012210Z">
        <seg>a = "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011255Z" creationid="hirofumiwakasugi" creationdate="20150903T011255Z">
        <seg>a = "hello"
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = "hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014203Z" creationid="hirofumiwakasugi" creationdate="20150930T014203Z">
        <seg>a = "hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055807Z" creationid="hirofumiwakasugi" creationdate="20150913T055807Z">
        <seg>a = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T022312Z" creationid="hirofumiwakasugi" creationdate="20150907T022312Z">
        <seg>a = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
"sum: #{a} + #{b} = #{a + b}" # =&gt; "sum: 1 + 2 = 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192338Z" creationid="makenowjust" creationdate="20200419T192338Z">
        <seg>a = 1
b = 2
"sum: #{a} + #{b} = #{a + b}" # =&gt; "sum: 1 + 2 = 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045124Z" creationid="hirofumiwakasugi" creationdate="20151005T045124Z">
        <seg>a = 1
b = 2
C.printf "%d + %d = %d\n", a, b, a + b
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
b = 2
a, b = b, a
a # =&gt; 2
b # =&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175405Z" creationid="makenowjust" creationdate="20200422T175405Z">
        <seg>a = 1
b = 2
a, b = b, a
a # =&gt; 2
b # =&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023235Z" creationid="hirofumiwakasugi" creationdate="20150907T023235Z">
        <seg>a = 1
begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T014202Z" creationid="hirofumiwakasugi" creationdate="20150930T014202Z">
        <seg>a = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
if a &gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074225Z" creationid="makenowjust" creationdate="20200424T074225Z">
        <seg>a = 1
if a &gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074600Z" creationid="makenowjust" creationdate="20200424T074600Z">
        <seg>a = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
while a &lt; 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095903Z" creationid="makenowjust" creationdate="20200424T095903Z">
        <seg>a = 1
while a &lt; 5</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1
while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095122Z" creationid="makenowjust" creationdate="20200424T095122Z">
        <seg>a = 1
while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1 + 2
a #=&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162814Z" creationid="makenowjust" creationdate="20200413T162814Z">
        <seg>a = 1 + 2
a #=&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 1 &gt; 2 ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084550Z" creationid="makenowjust" creationdate="20200424T083425Z">
        <seg>a = 1 &gt; 2 ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 10
end
a # =&gt; 10

b = 1
if b &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074226Z" creationid="makenowjust" creationdate="20200424T074226Z">
        <seg>a = 10
end
a # =&gt; 10

b = 1
if b &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 10
end
a #=&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010129Z" creationid="hirofumiwakasugi" creationdate="20150903T010129Z">
        <seg>a = 10
end
a #=&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083438Z" creationid="makenowjust" creationdate="20200424T083438Z">
        <seg>a = 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012933Z" creationid="hirofumiwakasugi" creationdate="20150903T012933Z">
        <seg>a = 2
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115413Z" creationid="makenowjust" creationdate="20200417T115413Z">
        <seg>a = 2
while (a += 1) &lt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = 2 if some_condition

# The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080341Z" creationid="makenowjust" creationdate="20200424T080341Z">
        <seg>a = 2 if some_condition

# 上記は以下と同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = @a
if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022555Z" creationid="hirofumiwakasugi" creationdate="20150903T022555Z">
        <seg>a = @a
if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030612Z" creationid="hirofumiwakasugi" creationdate="20150903T030612Z">
        <seg>a = @a
if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T062323Z" creationid="hirofumiwakasugi" creationdate="20150930T062323Z">
        <seg>a = [] of Person
x = a.map { |f| f.name as String } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name } # Error: can't infer block return type
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061858Z" creationid="hirofumiwakasugi" creationdate="20150930T061858Z">
        <seg>a = [] of Person
x = a.map { |f| f.name } # Error: can't infer block return type
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = [] of Person
x = a.map { |f| f.name } # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151220T002341Z" creationid="hirofumiwakasugi" creationdate="20151220T002341Z">
        <seg>a = [] of Person
x = a.map { |f| f.name } # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = b = c = 123

# Now a, b and c have the same value:
a # =&gt; 123
b # =&gt; 123
c # =&gt; 123</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175053Z" creationid="makenowjust" creationdate="20200422T175053Z">
        <seg>a = b = c = 123

# このとき a, b, c は同じ値になる
a # =&gt; 123
b # =&gt; 123
c # =&gt; 123</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = if 2 &gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080441Z" creationid="makenowjust" creationdate="20200424T080441Z">
        <seg>a = if 2 &gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = some_condition ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084316Z" creationid="makenowjust" creationdate="20200424T083248Z">
        <seg>a = some_condition ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = something_dangerous_that_returns_Int32
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020142Z" creationid="hirofumiwakasugi" creationdate="20150907T020142Z">
        <seg>a = something_dangerous_that_returns_Int32
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a : String | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061706Z" creationid="hirofumiwakasugi" creationdate="20160204T061706Z">
        <seg>a = true
end
# a : String | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a : String | Bool

b = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074602Z" creationid="makenowjust" creationdate="20200424T074602Z">
        <seg>a = true
end
# a : String | Bool

b = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a = true
end
# a :: String | Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>a = true
end
# a :: String | Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a convenient syntax is provided for some common types.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T005817Z" creationid="hirofumiwakasugi" creationdate="20151009T005817Z">
        <seg>一般的な型に対する便利な記法が用意されています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.abs
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083357Z" creationid="makenowjust" creationdate="20200424T083357Z">
        <seg>a.abs
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.abs
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014451Z" creationid="hirofumiwakasugi" creationdate="20150903T014451Z">
        <seg>a.abs
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.length
end
# a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T130410Z" creationid="hirofumiwakasugi" creationdate="20150901T130410Z">
        <seg>a.length
end
# a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.length
end
# a :: String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012211Z" creationid="hirofumiwakasugi" creationdate="20150903T012211Z">
        <seg>a.length
end
# a :: String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095139Z" creationid="makenowjust" creationdate="20200424T095139Z">
        <seg>a.size
end
# a : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062433Z" creationid="hirofumiwakasugi" creationdate="20160204T062433Z">
        <seg>a.size
end
# a : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a : String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061713Z" creationid="hirofumiwakasugi" creationdate="20160204T061713Z">
        <seg>a.size
end
# a : String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140103Z" creationid="hirofumiwakasugi" creationdate="20151009T140103Z">
        <seg>a.size
end
# a :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>a.size
end
# a :: String | Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024558Z" creationid="hirofumiwakasugi" creationdate="20151009T024558Z">
        <seg>a.size
end
# a :: String | Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213216Z" creationid="makenowjust" creationdate="20200412T213216Z">
        <seg>abstract class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract class Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213748Z" creationid="makenowjust" creationdate="20200412T213748Z">
        <seg>abstract class Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def id : Int32
end

class Child &lt; Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213751Z" creationid="makenowjust" creationdate="20200412T213751Z">
        <seg>abstract def id : Int32
end

class Child &lt; Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def name : String
end

class Unicorn &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213220Z" creationid="makenowjust" creationdate="20200412T213220Z">
        <seg>abstract def name : String
end

class Unicorn &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>abstract def talk
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040130Z" creationid="hirofumiwakasugi" creationdate="20150910T040130Z">
        <seg>abstract def talk
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>actual.should be &lt; expected  # passes if actual &lt;  expected
actual.should be &lt;= expected # passes if actual &lt;= expected
actual.should be &gt; expected  # passes if actual &gt;  expected
actual.should be &gt;= expected # passes if actual &gt;= expected</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T140238Z" creationid="akiji" creationdate="20200505T140238Z">
        <seg>actual.should be &lt; expected  # actual &lt;  expected であれば合格
actual.should be &lt;= expected # actual &lt;= expected であれば合格
actual.should be &gt; expected  # actual &gt;  expected であれば合格
actual.should be &gt;= expected # actual &gt;= expected であれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>actual.should be_close(expected, delta) # passes if actual is within delta of expected:</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200520T234502Z" creationid="akiji" creationdate="20200505T140409Z">
        <seg>actual.should be_close(expected, delta) # actual が expected から delta 以内の値であれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>actual.should be_true   # passes if actual == true
actual.should be_false  # passes if actual == false
actual.should be_truthy # passes if actual is truthy (neither nil nor false nor Pointer.null)
actual.should be_falsey # passes if actual is falsey (nil, false or Pointer.null)</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T140213Z" creationid="akiji" creationdate="20200505T140044Z">
        <seg>actual.should be_true   # actual == trueであれば合格
actual.should be_false  # actual == falseであれば合格
actual.should be_truthy # actual が truthy な値（nil でも false でも Pointer.null でもない）であれば合格
actual.should be_falsey # actual が alsey な値（nil や false、もしくはPointer.null）であれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>actual.should eq(expected)   # passes if actual == expected
actual.should be(expected)   # passes if actual.same?(expected)
actual.should be_a(expected) # passes if actual.is_a?(expected)
actual.should be_nil         # passes if actual.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="akiji" changedate="20200505T140006Z" creationid="akiji" creationdate="20200505T140006Z">
        <seg>actual.should eq(expected)   # actual == expected であれば合格
actual.should be(expected)   # actual.same?(expected) であれば合格
actual.should be_a(expected) # actual.is_a?(expected) であれば合格
actual.should be_nil         # actual.nil? であれば合格</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add true, false
^~~</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042922Z" creationid="hirofumiwakasugi" creationdate="20150907T042922Z">
        <seg>add true, false
^~~</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add true, false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042850Z" creationid="hirofumiwakasugi" creationdate="20150907T042850Z">
        <seg>add true, false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021138Z" creationid="hirofumiwakasugi" creationdate="20150904T021138Z">
        <seg>add(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>add(2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021538Z" creationid="hirofumiwakasugi" creationdate="20150904T021538Z">
        <seg>add(2)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>adder = -&gt;add(Int32, Int32)
adder.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061648Z" creationid="hirofumiwakasugi" creationdate="20150918T061648Z">
        <seg>adder = -&gt;add(Int32, Int32)
adder.call(1, 2) #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>address = server.bind_tcp 8080</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T162345Z" creationid="makenowjust" creationdate="20200413T162345Z">
        <seg>address = server.bind_tcp 8080</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias MyInt = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023912Z" creationid="hirofumiwakasugi" creationdate="20151008T023912Z">
        <seg>alias MyInt = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias MyInt = Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023844Z" creationid="hirofumiwakasugi" creationdate="20151008T023844Z">
        <seg>alias MyInt = Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias NumericValue = Int32 | Int64 | Float32 | Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010227Z" creationid="hirofumiwakasugi" creationdate="20151010T010227Z">
        <seg>alias NumericValue = Int32 | Int64 | Float32 | Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022652Z" creationid="hirofumiwakasugi" creationdate="20151009T022652Z">
        <seg>alias SizeT = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T022651Z" creationid="hirofumiwakasugi" creationdate="20151009T022651Z">
        <seg>alias SizeT = Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = UInt32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043756Z" creationid="hirofumiwakasugi" creationdate="20150908T043756Z">
        <seg>alias SizeT = UInt32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias SizeT = UInt64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043754Z" creationid="hirofumiwakasugi" creationdate="20150908T043754Z">
        <seg>alias SizeT = UInt64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>alias Type = Nil |</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071412Z" creationid="hirofumiwakasugi" creationdate="20150919T071412Z">
        <seg>alias Type = Nil |</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and if we run: &lt;g1&gt;crystal -h&lt;/g1&gt;, then Crystal will show all the accepted options and how to use them.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T191302Z" creationid="makenowjust" creationdate="20200413T172114Z">
        <seg>そして&lt;g1&gt;crystal -h&lt;/g1&gt;と実行すると、Crystal は自身のオプションとそれらの利用方法を表示します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then check what the compiler inferred with `crystal hierarchy file.cr`, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060119Z" creationid="hirofumiwakasugi" creationdate="20150912T055624Z">
        <seg>このとき、コンパイラが型推論した結果を `crystal hierarchy file.cr` で確認すると以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and then check what the compiler inferred with `crystal tool hierarchy file.cr`, we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024357Z" creationid="hirofumiwakasugi" creationdate="20151009T024357Z">
        <seg>このとき、コンパイラが型推論した結果を `crystal tool hierarchy file.cr` で確認すると以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>and you're ready to start hacking.</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T060521Z" creationid="hirofumiwakasugi" creationdate="20150831T060521Z">
        <seg>これでハックする準備は OK です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>argument.some_method
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160115T153020Z" creationid="hirofumiwakasugi" creationdate="20160115T153020Z">
        <seg>argument.some_method
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array = MyArray.new</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031035Z" creationid="hirofumiwakasugi" creationdate="20150909T031035Z">
        <seg>array = MyArray.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array.[](1)       # invokes the first method
array.[](1, 2, 3) # invokes the second method
array.[]=(1, 2)   # invokes the third method
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031143Z" creationid="hirofumiwakasugi" creationdate="20150909T031143Z">
        <seg>array.[](1)       # 1つ目のメソッドを実行
array.[](1, 2, 3) # 2つ目のメソッドを実行
array.[]=(1, 2)   # 3つ目のメソッドを実行
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array[1]       # invokes the first method
array[1, 2, 3] # invokes the second method
array[1] = 2   # invokes the third method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031133Z" creationid="hirofumiwakasugi" creationdate="20150909T031133Z">
        <seg>array[1]       # 1つ目のメソッドを実行
array[1, 2, 3] # 2つ目のメソッドを実行
array[1] = 2   # 3つ目のメソッドを実行</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_like = IO::Memory.new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173624Z" creationid="makenowjust" creationdate="20200420T173624Z">
        <seg>array_like = IO::Memory.new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_like = Set(typeof(1, 2, 3)).new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T174450Z" creationid="makenowjust" creationdate="20200420T174450Z">
        <seg>array_like = Set(typeof(1, 2, 3)).new
array_like &lt;&lt; 1
array_like &lt;&lt; 2
array_like &lt;&lt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>array_of_numbers = [1, 2, 3] of Float64 | Int32 # =&gt; Array(Float64 | Int32)
array_of_numbers &lt;&lt; 0.5                         # =&gt; [1, 2, 3, 0.5]

array_of_int_or_string = [1, 2, 3] of Int32 | String # =&gt; Array(Int32 | String)
array_of_int_or_string &lt;&lt; "foo"                      # =&gt; [1, 2, 3, "foo"]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T173239Z" creationid="makenowjust" creationdate="20200420T173239Z">
        <seg>array_of_numbers = [1, 2, 3] of Float64 | Int32 # =&gt; Array(Float64 | Int32)
array_of_numbers &lt;&lt; 0.5                         # =&gt; [1, 2, 3, 0.5]

array_of_int_or_string = [1, 2, 3] of Int32 | String # =&gt; Array(Int32 | String)
array_of_int_or_string &lt;&lt; "foo"                      # =&gt; [1, 2, 3, "foo"]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012020Z" creationid="hirofumiwakasugi" creationdate="20151009T012020Z">
        <seg>ary = [] of Parent.class
ary &lt;&lt; Child1
ary &lt;&lt; Child2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary #=&gt; [[1, 2, 3], [...]]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T071329Z" creationid="hirofumiwakasugi" creationdate="20150919T071329Z">
        <seg>ary = [] of RecArray
ary.push [1, 2, 3]
ary.push ary
ary #=&gt; [[1, 2, 3], [...]]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ary2 #:: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T061414Z" creationid="hirofumiwakasugi" creationdate="20150930T061414Z">
        <seg>ary2 #:: Array(Int32 | Float64)
ary2 &lt;&lt; 1.5 # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061707Z" creationid="hirofumiwakasugi" creationdate="20160204T061707Z">
        <seg>b = "hello"
end
# b : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b : Int32 | String

if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074603Z" creationid="makenowjust" creationdate="20200424T074603Z">
        <seg>b = "hello"
end
# b : Int32 | String

if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = "hello"
end
# b :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>b = "hello"
end
# b :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 1
if b &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010130Z" creationid="hirofumiwakasugi" creationdate="20150903T010130Z">
        <seg>b = 1
if b &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 1
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011256Z" creationid="hirofumiwakasugi" creationdate="20150903T011256Z">
        <seg>b = 1
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 10
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010130Z" creationid="hirofumiwakasugi" creationdate="20150903T010130Z">
        <seg>b = 10
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 20
end
b # =&gt; 20</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074229Z" creationid="makenowjust" creationdate="20200424T074229Z">
        <seg>b = 20
end
b # =&gt; 20</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = 20
end
b #=&gt; 20
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010131Z" creationid="hirofumiwakasugi" creationdate="20150903T010131Z">
        <seg>b = 20
end
b #=&gt; 20
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>b = some_condition ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085852Z" creationid="makenowjust" creationdate="20200424T085852Z">
        <seg>b = some_condition ? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>bar.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155853Z" creationid="hirofumiwakasugi" creationdate="20150905T155853Z">
        <seg>bar.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>baz(1, 2)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021152Z" creationid="hirofumiwakasugi" creationdate="20150904T021152Z">
        <seg>baz(1, 2)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>baz(4, 2) #=&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021410Z" creationid="hirofumiwakasugi" creationdate="20150904T021410Z">
        <seg>baz(4, 2) #=&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>begin</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014247Z" creationid="hirofumiwakasugi" creationdate="20150907T014247Z">
        <seg>begin</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040124Z" creationid="hirofumiwakasugi" creationdate="20150916T040124Z">
        <seg>block
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>block.call
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024155Z" creationid="hirofumiwakasugi" creationdate="20150917T024155Z">
        <seg>block.call
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065528Z" creationid="hirofumiwakasugi" creationdate="20150912T065524Z">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # OK
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064935Z" creationid="hirofumiwakasugi" creationdate="20150912T064935Z">
        <seg>box = MyBox(Int32).new(1) # OK
box.value = "hello"       # OK
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(String).new("hello")
box.value.length #=&gt; 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T062108Z" creationid="hirofumiwakasugi" creationdate="20150912T062108Z">
        <seg>box = MyBox(String).new("hello")
box.value.length #=&gt; 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox(String).new("hello")
box.value.size #=&gt; 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024434Z" creationid="hirofumiwakasugi" creationdate="20151009T024434Z">
        <seg>box = MyBox(String).new("hello")
box.value.size #=&gt; 5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox.new("hello")
box.value.length # Error: undefined method 'length' for Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T060706Z" creationid="hirofumiwakasugi" creationdate="20150912T060706Z">
        <seg>box = MyBox.new("hello")
box.value.length # Error: undefined method 'length' for Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>box = MyBox.new("hello")
box.value.size # Error: undefined method 'size' for Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T024425Z" creationid="hirofumiwakasugi" creationdate="20151009T024425Z">
        <seg>box = MyBox.new("hello")
box.value.size # Error: undefined method 'size' for Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052249Z" creationid="hirofumiwakasugi" creationdate="20150905T052249Z">
        <seg>break</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095705Z" creationid="makenowjust" creationdate="20200424T095705Z">
        <seg>break "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025315Z" creationid="hirofumiwakasugi" creationdate="20150916T025315Z">
        <seg>break "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break # error
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T032354Z" creationid="hirofumiwakasugi" creationdate="20150917T032354Z">
        <seg>break # error
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break # goes to 'puts a'</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115450Z" creationid="makenowjust" creationdate="20200417T115416Z">
        <seg>break # ループを抜けて 'puts a' に行く</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break if some_condition
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095154Z" creationid="makenowjust" creationdate="20200424T095154Z">
        <seg>break if some_condition
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>break if some_condition
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052200Z" creationid="hirofumiwakasugi" creationdate="20150905T052200Z">
        <seg>break if some_condition
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>browser                  open an http server to browse program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>browser                  open an http server to browse program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>build                    compile program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>build                    compile program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061709Z" creationid="hirofumiwakasugi" creationdate="20160204T061709Z">
        <seg>c = "hello"
end
# c : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c : Int32 | String

if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074605Z" creationid="makenowjust" creationdate="20200424T074605Z">
        <seg>c = "hello"
end
# c : Int32 | String

if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = "hello"
end
# c :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011258Z" creationid="hirofumiwakasugi" creationdate="20150903T011258Z">
        <seg>c = "hello"
end
# c :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>c = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011257Z" creationid="hirofumiwakasugi" creationdate="20150903T011257Z">
        <seg>c = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>callback.call</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061909Z" creationid="hirofumiwakasugi" creationdate="20150918T061909Z">
        <seg>callback.call</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090854Z" creationid="makenowjust" creationdate="20200424T090854Z">
        <seg>case</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case
when cond1, cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093315Z" creationid="makenowjust" creationdate="20200424T093315Z">
        <seg>case
when cond1, cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case color</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011821Z" creationid="hirofumiwakasugi" creationdate="20150916T011821Z">
        <seg>case color</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case exp
when value1, value2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090855Z" creationid="makenowjust" creationdate="20200424T090855Z">
        <seg>case exp
when value1, value2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case exp
when value1, value2 then do_something
when value3         then do_something_else
else                     do_another_thing
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093253Z" creationid="makenowjust" creationdate="20200424T093253Z">
        <seg>case exp
when value1, value2 then do_something
when value3         then do_something_else
else                     do_another_thing
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case num
when .even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093131Z" creationid="makenowjust" creationdate="20200424T093131Z">
        <seg>case num
when .even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case var
when String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T091450Z" creationid="makenowjust" creationdate="20200424T091450Z">
        <seg>case var
when String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {.even?, .odd?}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093721Z" creationid="makenowjust" creationdate="20200424T093721Z">
        <seg>case {value1, value2}
when {.even?, .odd?}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {0, 0} # OK, 2 elements</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093519Z" creationid="makenowjust" creationdate="20200424T093519Z">
        <seg>case {value1, value2}
when {0, 0} # 大きさが2で等しいのでOK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {0, _}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093624Z" creationid="makenowjust" creationdate="20200424T093624Z">
        <seg>case {value1, value2}
when {0, _}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>case {value1, value2}
when {String, Int32}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093838Z" creationid="makenowjust" creationdate="20200424T093838Z">
        <seg>case {value1, value2}
when {String, Int32}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name = Crystal
baseurl = http://dist.crystal-lang.org/rpm/
END
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055111Z" creationid="hirofumiwakasugi" creationdate="20150831T055111Z">
        <seg>cat &gt; /etc/yum.repos.d/crystal.repo &lt;&lt;END
[crystal]
name = Crystal
baseurl = http://dist.crystal-lang.org/rpm/
END
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>check</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093828Z" creationid="makenowjust" creationdate="20200424T093828Z">
        <seg></seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Amount</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>class Amount</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033519Z" creationid="hirofumiwakasugi" creationdate="20150909T033519Z">
        <seg>class Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Cat &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031540Z" creationid="hirofumiwakasugi" creationdate="20150910T031540Z">
        <seg>class Cat &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child &lt; Parent</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>class Child &lt; Parent</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014445Z" creationid="hirofumiwakasugi" creationdate="20151002T014445Z">
        <seg>class Child &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child1 &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012006Z" creationid="hirofumiwakasugi" creationdate="20151009T012006Z">
        <seg>class Child1 &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Child2 &lt; Parent
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T012007Z" creationid="hirofumiwakasugi" creationdate="20151009T012007Z">
        <seg>class Child2 &lt; Parent
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class CurrencyConversion</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>class CurrencyConversion</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Dog &lt; Animal</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>class Dog &lt; Animal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Employee &lt; Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023837Z" creationid="hirofumiwakasugi" creationdate="20150910T023837Z">
        <seg>class Employee &lt; Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Employee &lt; Person
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023718Z" creationid="hirofumiwakasugi" creationdate="20150910T023718Z">
        <seg>class Employee &lt; Person
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021116Z" creationid="hirofumiwakasugi" creationdate="20150904T021116Z">
        <seg>class Foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Foo(U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061138Z" creationid="hirofumiwakasugi" creationdate="20150924T061138Z">
        <seg>class Foo(U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class GenericChild(T) &lt; Parent(T)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062013Z" creationid="hirofumiwakasugi" creationdate="20150924T062013Z">
        <seg>class GenericChild(T) &lt; Parent(T)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010357Z" creationid="hirofumiwakasugi" creationdate="20151010T010357Z">
        <seg>class Greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Helper</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144014Z" creationid="hirofumiwakasugi" creationdate="20151010T144014Z">
        <seg>class Helper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Int32Child &lt; Parent(Int32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T062012Z" creationid="hirofumiwakasugi" creationdate="20150924T062012Z">
        <seg>class Int32Child &lt; Parent(Int32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class IntWrapper</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044605Z" creationid="hirofumiwakasugi" creationdate="20151005T044605Z">
        <seg>class IntWrapper</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Items</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133854Z" creationid="hirofumiwakasugi" creationdate="20150911T133854Z">
        <seg>class Items</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Legendary
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211700Z" creationid="makenowjust" creationdate="20200412T211700Z">
        <seg>class Legendary
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Legendary
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033519Z" creationid="hirofumiwakasugi" creationdate="20151010T033519Z">
        <seg>class Legendary
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class MyOtherException &lt; Exception
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011645Z" creationid="hirofumiwakasugi" creationdate="20150907T011645Z">
        <seg>class MyOtherException &lt; Exception
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class ParseError &lt; Exception
end

module HTTP</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205041Z" creationid="makenowjust" creationdate="20200412T205041Z">
        <seg>class ParseError &lt; Exception
end

module HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Parser</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011935Z" creationid="hirofumiwakasugi" creationdate="20151010T011935Z">
        <seg>class Parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122931Z" creationid="hirofumiwakasugi" creationdate="20150904T122931Z">
        <seg>class Person</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class RequestHandler</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010226Z" creationid="hirofumiwakasugi" creationdate="20151010T010226Z">
        <seg>class RequestHandler</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class SomeType</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142552Z" creationid="hirofumiwakasugi" creationdate="20150911T142552Z">
        <seg>class SomeType</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144049Z" creationid="hirofumiwakasugi" creationdate="20151010T144049Z">
        <seg>class Unicorn</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T033517Z" creationid="hirofumiwakasugi" creationdate="20151010T033517Z">
        <seg>class Unicorn
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Unicorn
end

# Bad: This is not attached to any class.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211657Z" creationid="makenowjust" creationdate="20200412T211657Z">
        <seg>class Unicorn
end

# Bad: This is not attached to any class.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>class Window</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T131045Z" creationid="hirofumiwakasugi" creationdate="20150911T131045Z">
        <seg>class Window</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.content_type = "text/plain"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061318Z" creationid="hirofumiwakasugi" creationdate="20160204T061318Z">
        <seg>context.response.content_type = "text/plain"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world!</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161814Z" creationid="makenowjust" creationdate="20200413T161814Z">
        <seg>context.response.print "Hello world!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061322Z" creationid="hirofumiwakasugi" creationdate="20160204T061322Z">
        <seg>context.response.print "Hello world! The time is #{Time.now}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>context.response.print "Hello world, got #{context.request.path}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T062437Z" creationid="hirofumiwakasugi" creationdate="20160204T062437Z">
        <seg>context.response.print "Hello world, got #{context.request.path}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/Projectfile</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/Projectfile</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072145Z" creationid="hirofumiwakasugi" creationdate="20150901T072145Z">
        <seg>create  MyCoolLib/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140108Z" creationid="hirofumiwakasugi" creationdate="20151009T140108Z">
        <seg>create  MyCoolLib/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/spec/MyCoolLib_spec.cr
Initialized empty Git repository in ~/MyCoolLib/.git/
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072147Z" creationid="hirofumiwakasugi" creationdate="20150901T072147Z">
        <seg>create  MyCoolLib/spec/MyCoolLib_spec.cr
Initialized empty Git repository in ~/MyCoolLib/.git/
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/src/MyCoolLib.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/src/MyCoolLib.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  MyCoolLib/src/MyCoolLib/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072146Z" creationid="hirofumiwakasugi" creationdate="20150901T072146Z">
        <seg>create  MyCoolLib/src/MyCoolLib/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.editorconfig</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161507Z" creationid="makenowjust" creationdate="20200419T161507Z">
        <seg>create  my_cool_lib/.editorconfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161506Z" creationid="makenowjust" creationdate="20200419T161506Z">
        <seg>create  my_cool_lib/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161509Z" creationid="makenowjust" creationdate="20200419T161509Z">
        <seg>create  my_cool_lib/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161508Z" creationid="makenowjust" creationdate="20200419T161508Z">
        <seg>create  my_cool_lib/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161508Z" creationid="makenowjust" creationdate="20200419T161508Z">
        <seg>create  my_cool_lib/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161510Z" creationid="makenowjust" creationdate="20200419T161510Z">
        <seg>create  my_cool_lib/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/spec/my_cool_lib_spec.cr
Initialized empty Git repository in ~/my_cool_lib/.git/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161512Z" creationid="makenowjust" creationdate="20200419T161512Z">
        <seg>create  my_cool_lib/spec/my_cool_lib_spec.cr
Initialized empty Git repository in ~/my_cool_lib/.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161511Z" creationid="makenowjust" creationdate="20200419T161511Z">
        <seg>create  my_cool_lib/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  my_cool_lib/src/my_cool_lib.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161511Z" creationid="makenowjust" creationdate="20200419T161511Z">
        <seg>create  my_cool_lib/src/my_cool_lib.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.editorconfig</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153550Z" creationid="makenowjust" creationdate="20200419T153550Z">
        <seg>create  myapp/.editorconfig</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.gitignore</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153549Z" creationid="makenowjust" creationdate="20200419T153549Z">
        <seg>create  myapp/.gitignore</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/.travis.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153605Z" creationid="makenowjust" creationdate="20200419T153605Z">
        <seg>create  myapp/.travis.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/LICENSE</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153551Z" creationid="makenowjust" creationdate="20200419T153551Z">
        <seg>create  myapp/LICENSE</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/README.md</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153603Z" creationid="makenowjust" creationdate="20200419T153603Z">
        <seg>create  myapp/README.md</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/shard.yml</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153606Z" creationid="makenowjust" creationdate="20200419T153606Z">
        <seg>create  myapp/shard.yml</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/spec/myapp_spec.cr
Initialized empty Git repository in /home/crystal/myapp/.git/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153613Z" creationid="makenowjust" creationdate="20200419T153613Z">
        <seg>create  myapp/spec/myapp_spec.cr
Initialized empty Git repository in /home/crystal/myapp/.git/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/spec/spec_helper.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153611Z" creationid="makenowjust" creationdate="20200419T153611Z">
        <seg>create  myapp/spec/spec_helper.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/src/myapp.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153608Z" creationid="makenowjust" creationdate="20200419T153608Z">
        <seg>create  myapp/src/myapp.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>create  myapp/src/myapp/version.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T153609Z" creationid="makenowjust" creationdate="20200419T153609Z">
        <seg>create  myapp/src/myapp/version.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal [run] [&lt;options&gt;] &lt;programfile&gt; [-- &lt;argument&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T154456Z" creationid="makenowjust" creationdate="20200419T154456Z">
        <seg>crystal [run] [&lt;options&gt;] &lt;programfile&gt; [-- &lt;argument&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal build [&lt;options&gt;] &lt;programfile&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155041Z" creationid="makenowjust" creationdate="20200419T155041Z">
        <seg>crystal build [&lt;options&gt;] &lt;programfile&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs --output public --canonical-base-url http://example.com/ src/my_app.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163139Z" creationid="makenowjust" creationdate="20200419T163139Z">
        <seg>crystal docs --output public --canonical-base-url http://example.com/ src/my_app.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs [--output=&lt;output_dir&gt;] [--canonical-base-url=&lt;url&gt;] [&lt;source_file&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161639Z" creationid="makenowjust" creationdate="20200419T161639Z">
        <seg>crystal docs [--output=&lt;output_dir&gt;] [--canonical-base-url=&lt;url&gt;] [&lt;source_file&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal docs src/my_app.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T162434Z" creationid="makenowjust" creationdate="20200419T162434Z">
        <seg>crystal docs src/my_app.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal env [&lt;var&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163205Z" creationid="makenowjust" creationdate="20200419T163205Z">
        <seg>crystal env [&lt;var&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal eval [&lt;options&gt;] [&lt;source&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T155924Z" creationid="makenowjust" creationdate="20200419T155924Z">
        <seg>crystal eval [&lt;options&gt;] [&lt;source&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal init (lib|app) &lt;name&gt; [&lt;dir&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T161041Z" creationid="makenowjust" creationdate="20200419T161041Z">
        <seg>crystal init (lib|app) &lt;name&gt; [&lt;dir&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal play [--port &lt;port&gt;] [--binding &lt;host&gt;] [--verbose] [file]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165322Z" creationid="makenowjust" creationdate="20200419T165322Z">
        <seg>crystal play [--port &lt;port&gt;] [--binding &lt;host&gt;] [--verbose] [file]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal spec [&lt;options&gt;] [&lt;file&gt;...] [-- [&lt;runner_options&gt;]]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T163508Z" creationid="makenowjust" creationdate="20200419T163508Z">
        <seg>crystal spec [&lt;options&gt;] [&lt;file&gt;...] [-- [&lt;runner_options&gt;]]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal tool format [--check] [&lt;path&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165807Z" creationid="makenowjust" creationdate="20200419T165807Z">
        <seg>crystal tool format [--check] [&lt;path&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>crystal version</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T160756Z" creationid="makenowjust" creationdate="20200419T160756Z">
        <seg>crystal version</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>curl http://dist.crystal-lang.org/apt/setup.sh | sudo bash
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T052827Z" creationid="hirofumiwakasugi" creationdate="20150831T052827Z">
        <seg>curl http://dist.crystal-lang.org/apt/setup.sh | sudo bash
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>curl http://dist.crystal-lang.org/rpm/setup.sh | sudo bash
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150831T055106Z" creationid="hirofumiwakasugi" creationdate="20150831T055106Z">
        <seg>curl http://dist.crystal-lang.org/rpm/setup.sh | sudo bash
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>current_age &lt; 20 ? 10 : 30
end
person.age #=&gt; 28
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071821Z" creationid="hirofumiwakasugi" creationdate="20150906T071821Z">
        <seg>current_age &lt; 20 ? 10 : 30
end
person.age #=&gt; 28
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d : Int32 | Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074606Z" creationid="makenowjust" creationdate="20200424T074606Z">
        <seg>d = 1
end
# d : Int32 | Nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d : Int32 | Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061710Z" creationid="hirofumiwakasugi" creationdate="20160204T061710Z">
        <seg>d = 1
end
# d : Int32 | Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>d = 1
end
# d :: Int32 | Nil
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011301Z" creationid="hirofumiwakasugi" creationdate="20150903T011301Z">
        <seg>d = 1
end
# d :: Int32 | Nil
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def +(other)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025210Z" creationid="hirofumiwakasugi" creationdate="20150909T025210Z">
        <seg>def +(other)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def -</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025726Z" creationid="hirofumiwakasugi" creationdate="20150909T025726Z">
        <seg>def -</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def ==(other : self)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022637Z" creationid="hirofumiwakasugi" creationdate="20150908T022637Z">
        <seg>def ==(other : self)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def ==(other)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023040Z" creationid="hirofumiwakasugi" creationdate="20150908T023040Z">
        <seg>def ==(other)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def [](index)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031030Z" creationid="hirofumiwakasugi" creationdate="20150909T031030Z">
        <seg>def [](index)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def [](index1, index2, index3)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031032Z" creationid="hirofumiwakasugi" creationdate="20150909T031032Z">
        <seg>def [](index1, index2, index3)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def []=(index, value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T031033Z" creationid="hirofumiwakasugi" creationdate="20150909T031033Z">
        <seg>def []=(index, value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def add(y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021504Z" creationid="hirofumiwakasugi" creationdate="20150904T021504Z">
        <seg>def add(y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def address</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054209Z" creationid="hirofumiwakasugi" creationdate="20150905T054209Z">
        <seg>def address</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def address=(@address)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054210Z" creationid="hirofumiwakasugi" creationdate="20150905T054210Z">
        <seg>def address=(@address)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def age</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055613Z" creationid="hirofumiwakasugi" creationdate="20150904T055613Z">
        <seg>def age</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def amount</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012158Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg>def amount</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def bar</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021117Z" creationid="hirofumiwakasugi" creationdate="20150904T021117Z">
        <seg>def bar</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def baz(x, y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021152Z" creationid="hirofumiwakasugi" creationdate="20150904T021152Z">
        <seg>def baz(x, y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122228Z" creationid="hirofumiwakasugi" creationdate="20150904T122228Z">
        <seg>def become_older</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072138Z" creationid="hirofumiwakasugi" creationdate="20150906T072138Z">
        <seg>def become_older(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(age : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072843Z" creationid="hirofumiwakasugi" creationdate="20150906T072843Z">
        <seg>def become_older(age : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(age)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T072600Z" creationid="hirofumiwakasugi" creationdate="20150906T072600Z">
        <seg>def become_older(age)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(by = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T111213Z" creationid="hirofumiwakasugi" creationdate="20150906T111213Z">
        <seg>def become_older(by = 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071455Z" creationid="hirofumiwakasugi" creationdate="20150906T071455Z">
        <seg>def become_older(years : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years : String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071534Z" creationid="hirofumiwakasugi" creationdate="20150906T071534Z">
        <seg>def become_older(years : String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def become_older(years)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070843Z" creationid="hirofumiwakasugi" creationdate="20150906T070843Z">
        <seg>def become_older(years)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def block</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095957Z" creationid="makenowjust" creationdate="20200424T095957Z">
        <seg>def block</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def date_of_birth</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010347Z" creationid="hirofumiwakasugi" creationdate="20151010T010347Z">
        <seg>def date_of_birth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def decode64(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142911Z" creationid="hirofumiwakasugi" creationdate="20150911T142911Z">
        <seg>def decode64(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def encode64(string)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142823Z" creationid="hirofumiwakasugi" creationdate="20150911T142823Z">
        <seg>def encode64(string)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def finalize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041637Z" creationid="hirofumiwakasugi" creationdate="20150910T041637Z">
        <seg>def finalize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def first_name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010346Z" creationid="hirofumiwakasugi" creationdate="20151010T010346Z">
        <seg>def first_name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095700Z" creationid="makenowjust" creationdate="20200424T095700Z">
        <seg>def foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(*args : String)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025930Z" creationid="hirofumiwakasugi" creationdate="20150908T025930Z">
        <seg>def foo(*args : String)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : Int32.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011920Z" creationid="hirofumiwakasugi" creationdate="20151009T011920Z">
        <seg>def foo(x : Int32.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def foo(x : String.class)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025812Z" creationid="hirofumiwakasugi" creationdate="20150908T025812Z">
        <seg>def foo(x : String.class)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023717Z" creationid="hirofumiwakasugi" creationdate="20150910T023717Z">
        <seg>def greet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet(msg : Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024421Z" creationid="hirofumiwakasugi" creationdate="20150910T024421Z">
        <seg>def greet(msg : Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def greet(msg)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024146Z" creationid="hirofumiwakasugi" creationdate="20150910T024146Z">
        <seg>def greet(msg)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def homepage_url</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010348Z" creationid="hirofumiwakasugi" creationdate="20151010T010348Z">
        <seg>def homepage_url</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144053Z" creationid="hirofumiwakasugi" creationdate="20151010T144053Z">
        <seg>def horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def id : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213800Z" creationid="makenowjust" creationdate="20200412T213800Z">
        <seg>def id : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040809Z" creationid="hirofumiwakasugi" creationdate="20150910T040809Z">
        <seg>def initialize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@amount, @target_currency)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012158Z" creationid="hirofumiwakasugi" creationdate="20151010T012158Z">
        <seg>def initialize(@amount, @target_currency)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@currency, @value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>def initialize(@currency, @value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@custom_greeting = nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205104Z" creationid="makenowjust" creationdate="20200412T205104Z">
        <seg>def initialize(@custom_greeting = nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@custom_greeting=nil)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010358Z" creationid="hirofumiwakasugi" creationdate="20151010T010358Z">
        <seg>def initialize(@custom_greeting=nil)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@horns = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140505Z" creationid="hirofumiwakasugi" creationdate="20151010T140505Z">
        <seg>def initialize(@horns = 1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T121926Z" creationid="hirofumiwakasugi" creationdate="20150904T121926Z">
        <seg>def initialize(@name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @age)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012113Z" creationid="hirofumiwakasugi" creationdate="20151002T012113Z">
        <seg>def initialize(@name, @age)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @company_name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023838Z" creationid="hirofumiwakasugi" creationdate="20150910T023838Z">
        <seg>def initialize(@name, @company_name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@name, @pet)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031542Z" creationid="hirofumiwakasugi" creationdate="20150910T031542Z">
        <seg>def initialize(@name, @pet)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063739Z" creationid="hirofumiwakasugi" creationdate="20150912T063739Z">
        <seg>def initialize(@value : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value : U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061139Z" creationid="hirofumiwakasugi" creationdate="20150924T061139Z">
        <seg>def initialize(@value : U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055442Z" creationid="hirofumiwakasugi" creationdate="20150912T055442Z">
        <seg>def initialize(@value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(@x, @y)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035031Z" creationid="hirofumiwakasugi" creationdate="20150906T035031Z">
        <seg>def initialize(@x, @y)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def initialize(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055611Z" creationid="hirofumiwakasugi" creationdate="20150904T055611Z">
        <seg>def initialize(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def invoke(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024155Z" creationid="hirofumiwakasugi" creationdate="20150917T024155Z">
        <seg>def invoke(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def items</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133855Z" creationid="hirofumiwakasugi" creationdate="20150911T133855Z">
        <seg>def items</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133835Z" creationid="hirofumiwakasugi" creationdate="20150911T133835Z">
        <seg>def length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def make_a_person_talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033519Z" creationid="hirofumiwakasugi" creationdate="20150909T033519Z">
        <seg>def make_a_person_talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055612Z" creationid="hirofumiwakasugi" creationdate="20150904T055612Z">
        <seg>def name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def name : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T213222Z" creationid="makenowjust" creationdate="20200412T213222Z">
        <seg>def name : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def number_of_horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144054Z" creationid="hirofumiwakasugi" creationdate="20151010T144054Z">
        <seg>def number_of_horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def on_save(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>def on_save(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def one</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030941Z" creationid="hirofumiwakasugi" creationdate="20150916T030941Z">
        <seg>def one</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def parse(score_text)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011936Z" creationid="hirofumiwakasugi" creationdate="20151010T011936Z">
        <seg>def parse(score_text)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def plus_one(x)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172025Z" creationid="makenowjust" creationdate="20200422T172025Z">
        <seg>def plus_one(x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def print_greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010358Z" creationid="hirofumiwakasugi" creationdate="20151010T010358Z">
        <seg>def print_greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def red?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>def red?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def save</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061908Z" creationid="hirofumiwakasugi" creationdate="20150918T061908Z">
        <seg>def save</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def say_bye</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032833Z" creationid="hirofumiwakasugi" creationdate="20150909T032833Z">
        <seg>def say_bye</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def say_hello</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032702Z" creationid="hirofumiwakasugi" creationdate="20150909T032702Z">
        <seg>def say_hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.compare(p1 : self, p2 : self)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025133Z" creationid="hirofumiwakasugi" creationdate="20150908T025133Z">
        <seg>def self.compare(p1 : self, p2 : self)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.counter</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041159Z" creationid="hirofumiwakasugi" creationdate="20150910T041159Z">
        <seg>def self.counter</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.elem_type(typ)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063207Z" creationid="hirofumiwakasugi" creationdate="20150930T063207Z">
        <seg>def self.elem_type(typ)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.increment</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041100Z" creationid="hirofumiwakasugi" creationdate="20150910T041100Z">
        <seg>def self.increment</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.instances</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T040810Z" creationid="hirofumiwakasugi" creationdate="20150910T040810Z">
        <seg>def self.instances</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def self.new(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060126Z" creationid="hirofumiwakasugi" creationdate="20150904T060126Z">
        <seg>def self.new(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092222Z" creationid="hirofumiwakasugi" creationdate="20151009T092222Z">
        <seg>def size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def some_method</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142553Z" creationid="hirofumiwakasugi" creationdate="20150911T142553Z">
        <seg>def some_method</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def speak</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg>def speak</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def t</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061137Z" creationid="hirofumiwakasugi" creationdate="20150924T061137Z">
        <seg>def t</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def talk</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031539Z" creationid="hirofumiwakasugi" creationdate="20150910T031539Z">
        <seg>def talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def times</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032022Z" creationid="hirofumiwakasugi" creationdate="20150916T032022Z">
        <seg>def times</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044606Z" creationid="hirofumiwakasugi" creationdate="20151005T044606Z">
        <seg>def to_unsafe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def twice</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024952Z" creationid="hirofumiwakasugi" creationdate="20150917T024952Z">
        <seg>def twice</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055443Z" creationid="hirofumiwakasugi" creationdate="20150912T055443Z">
        <seg>def value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value=(new_value : T)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T065517Z" creationid="hirofumiwakasugi" creationdate="20150912T065517Z">
        <seg>def value=(new_value : T)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def value=(new_value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T064933Z" creationid="hirofumiwakasugi" creationdate="20150912T064933Z">
        <seg>def value=(new_value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def wrap_foo</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>def wrap_foo</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030543Z" creationid="hirofumiwakasugi" creationdate="20150917T030543Z">
        <seg>def wrap_foo(&amp;block : Int32 -&gt; _)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035031Z" creationid="hirofumiwakasugi" creationdate="20150906T035031Z">
        <seg>def x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def x_ptr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035033Z" creationid="hirofumiwakasugi" creationdate="20150906T035033Z">
        <seg>def x_ptr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def yield_normally</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030943Z" creationid="hirofumiwakasugi" creationdate="20150916T030943Z">
        <seg>def yield_normally</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def yield_with_self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030942Z" creationid="hirofumiwakasugi" creationdate="20150916T030942Z">
        <seg>def yield_with_self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{@type.name.downcase.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014444Z" creationid="hirofumiwakasugi" creationdate="20151002T014444Z">
        <seg>def {{@type.name.downcase.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{key.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>def {{key.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{name.id}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035809Z" creationid="hirofumiwakasugi" creationdate="20151001T035809Z">
        <seg>def {{name.id}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>def {{name}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014649Z" creationid="hirofumiwakasugi" creationdate="20151001T014649Z">
        <seg>def {{name}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_dummy_methods [foo, bar, baz]</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040353Z" creationid="hirofumiwakasugi" creationdate="20151001T040353Z">
        <seg>define_dummy_methods [foo, bar, baz]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_dummy_methods foo, bar, baz</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040739Z" creationid="hirofumiwakasugi" creationdate="20151001T040739Z">
        <seg>define_dummy_methods foo, bar, baz</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>define_method foo, 1
define_method bar, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035956Z" creationid="hirofumiwakasugi" creationdate="20151001T035956Z">
        <seg>define_method foo, 1
define_method bar, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>deps                     install project dependencies</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>deps                     install project dependencies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023534Z" creationid="hirofumiwakasugi" creationdate="20150903T023534Z">
        <seg>do_another_thing
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end

# The above is the same as:
if var.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T092929Z" creationid="makenowjust" creationdate="20200424T092929Z">
        <seg>do_another_thing
end

# 上記は以下と同じ
if var.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end

# The above is the same as:
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090907Z" creationid="makenowjust" creationdate="20200424T090907Z">
        <seg>do_another_thing
end

# 上記は以下と同じ
tmp = exp
if value1 === tmp || value2 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_another_thing
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023611Z" creationid="hirofumiwakasugi" creationdate="20150903T023611Z">
        <seg>do_another_thing
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052200Z" creationid="hirofumiwakasugi" creationdate="20150905T052200Z">
        <seg>do_something</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif cond3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010135Z" creationid="hirofumiwakasugi" creationdate="20151001T010135Z">
        <seg>do_something
elsif cond3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif some_other_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010636Z" creationid="hirofumiwakasugi" creationdate="20150903T010636Z">
        <seg>do_something
elsif some_other_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif tmp.odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010117Z" creationid="hirofumiwakasugi" creationdate="20151001T010117Z">
        <seg>do_something
elsif tmp.odd?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif value3 === tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023543Z" creationid="hirofumiwakasugi" creationdate="20150903T023543Z">
        <seg>do_something
elsif value3 === tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
elsif var.is_a?(Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010050Z" creationid="hirofumiwakasugi" creationdate="20151001T010050Z">
        <seg>do_something
elsif var.is_a?(Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when .odd?</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010102Z" creationid="hirofumiwakasugi" creationdate="20151001T010102Z">
        <seg>do_something
when .odd?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010028Z" creationid="hirofumiwakasugi" creationdate="20151001T010028Z">
        <seg>do_something
when Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when cond3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010126Z" creationid="hirofumiwakasugi" creationdate="20151001T010126Z">
        <seg>do_something
when cond3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something
when value3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T023533Z" creationid="hirofumiwakasugi" creationdate="20150903T023533Z">
        <seg>do_something
when value3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010637Z" creationid="hirofumiwakasugi" creationdate="20150903T010637Z">
        <seg>do_something_else
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010104Z" creationid="hirofumiwakasugi" creationdate="20151001T010104Z">
        <seg>do_something_else
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end

# The above is the same as:
if cond1 || cond2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093325Z" creationid="makenowjust" creationdate="20200424T093325Z">
        <seg>do_something_else
end

# 上記は以下に同じ
if cond1 || cond2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end

# The above is the same as:
tmp = num
if tmp.even?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T093140Z" creationid="makenowjust" creationdate="20200424T093140Z">
        <seg>do_something_else
end

# 上記は以下に同じ
tmp = num
if tmp.even?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_something_else
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T010118Z" creationid="hirofumiwakasugi" creationdate="20151001T010118Z">
        <seg>do_something_else
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_that
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T074306Z" creationid="makenowjust" creationdate="20200424T074306Z">
        <seg>do_that
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_that
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T010638Z" creationid="hirofumiwakasugi" creationdate="20150903T010638Z">
        <seg>do_that
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052411Z" creationid="hirofumiwakasugi" creationdate="20150905T052411Z">
        <seg>do_this
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end

# The above is the same as:
while !some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101056Z" creationid="makenowjust" creationdate="20200424T101056Z">
        <seg>do_this
end

# 上記は以下に同じ
while !some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>do_this
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052045Z" creationid="hirofumiwakasugi" creationdate="20150905T052045Z">
        <seg>do_this
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>docs                     generate documentation</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>docs                     generate documentation</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>dst_time     : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>dst_time     : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012732Z" creationid="hirofumiwakasugi" creationdate="20150903T012732Z">
        <seg>e = "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = 1
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012731Z" creationid="hirofumiwakasugi" creationdate="20150903T012731Z">
        <seg>e = 1
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = Employee.new
e.greet "everyone" # "Hello, everyone"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024150Z" creationid="hirofumiwakasugi" creationdate="20150910T024150Z">
        <seg>e = Employee.new
e.greet "everyone" # "Hello, everyone"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e = Employee.new
e.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024422Z" creationid="hirofumiwakasugi" creationdate="20150910T024422Z">
        <seg>e = Employee.new
e.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>e.greet 1 # "Hi, this is a number: 1"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024424Z" creationid="hirofumiwakasugi" creationdate="20150910T024424Z">
        <seg>e.greet 1 # "Hi, this is a number: 1"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>elem_type(typ.first)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063208Z" creationid="hirofumiwakasugi" creationdate="20150930T063208Z">
        <seg>elem_type(typ.first)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>elements.each do |value|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042105Z" creationid="hirofumiwakasugi" creationdate="20150907T042105Z">
        <seg>elements.each do |value|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013157Z" creationid="hirofumiwakasugi" creationdate="20150903T013157Z">
        <seg>else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022845Z" creationid="hirofumiwakasugi" creationdate="20150903T022845Z">
        <seg>else_expression
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022843Z" creationid="hirofumiwakasugi" creationdate="20150903T022843Z">
        <seg>else_expression
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>else_expression
end

# The above is the same as:
if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090523Z" creationid="makenowjust" creationdate="20200424T090523Z">
        <seg>else_expression
end

# 上記は以下に同じ
if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>employee = Employee.new "John"
employee.greet # "Hi, I'm John"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023719Z" creationid="hirofumiwakasugi" creationdate="20150910T023719Z">
        <seg>employee = Employee.new "John"
employee.greet # "Hi, I'm John"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T145243Z" creationid="hirofumiwakasugi" creationdate="20150911T145243Z">
        <seg>encode64 "hello" #=&gt; "aGVsbG8="
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072643Z" creationid="hirofumiwakasugi" creationdate="20150901T072643Z">
        <seg>end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013731Z" creationid="hirofumiwakasugi" creationdate="20150903T013731Z">
        <seg>end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
a # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080445Z" creationid="makenowjust" creationdate="20200424T080445Z">
        <seg>end
a # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
a #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013200Z" creationid="hirofumiwakasugi" creationdate="20150903T013200Z">
        <seg>end
a #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122230Z" creationid="hirofumiwakasugi" creationdate="20150904T122230Z">
        <seg>end
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

alias NumericValue = Float32 | Float64 | Int32 | Int64

lib LibYAML
end

struct TagDirective
end

enum Time::DayOfWeek
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205046Z" creationid="makenowjust" creationdate="20200412T205046Z">
        <seg>end
end

alias NumericValue = Float32 | Float64 | Int32 | Int64

lib LibYAML
end

struct TagDirective
end

enum Time::DayOfWeek
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

generate_method_downcase "HELLO"
hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200729Z" creationid="makenowjust" creationdate="20200413T200729Z">
        <seg>end
end

generate_method_downcase "HELLO"
hello{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174912Z" creationid="makenowjust" creationdate="20200413T174912Z">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts "Strawberry fields forever mode ON" if strawberry

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180434Z" creationid="makenowjust" creationdate="20200413T180434Z">
        <seg>end
end

members = the_beatles
members = the_beatles.map &amp;.upcase if shout

puts "Strawberry fields forever mode ON" if strawberry

puts ""
puts "Group members:"
puts "=============="
members.each do |member|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

puts foo # =&gt; "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095706Z" creationid="makenowjust" creationdate="20200424T095706Z">
        <seg>end
end

puts foo # =&gt; "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end

unless say_hi_to.empty?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175229Z" creationid="makenowjust" creationdate="20200413T175229Z">
        <seg>end
end

unless say_hi_to.empty?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021205Z" creationid="hirofumiwakasugi" creationdate="20150904T021205Z">
        <seg>end
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
`````</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144059Z" creationid="hirofumiwakasugi" creationdate="20151010T144059Z">
        <seg>end
end
`````</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
puts a # =&gt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200417T115452Z" creationid="makenowjust" creationdate="20200417T115452Z">
        <seg>end
end
puts a # =&gt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
end
puts a #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052249Z" creationid="hirofumiwakasugi" creationdate="20150905T052249Z">
        <seg>end
end
puts a #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>end
{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040454Z" creationid="hirofumiwakasugi" creationdate="20151001T040454Z">
        <seg>end
{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014330Z" creationid="hirofumiwakasugi" creationdate="20150907T014330Z">
        <seg>ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum SomeEnum</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052629Z" creationid="hirofumiwakasugi" creationdate="20151007T052629Z">
        <seg>enum SomeEnum</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum SomeEnum : Int8</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053244Z" creationid="hirofumiwakasugi" creationdate="20151007T053244Z">
        <seg>enum SomeEnum : Int8</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>enum Time::DayOfWeek
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010228Z" creationid="hirofumiwakasugi" creationdate="20151010T010228Z">
        <seg>enum Time::DayOfWeek
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eval                     eval code</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>eval                     eval code</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>eval                     eval code from args or standard input</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140114Z" creationid="hirofumiwakasugi" creationdate="20151009T140114Z">
        <seg>eval                     eval code from args or standard input</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exit</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172500Z" creationid="makenowjust" creationdate="20200413T172500Z">
        <seg>exit</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>exit(1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180429Z" creationid="makenowjust" creationdate="20200413T180429Z">
        <seg>exit(1)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend SomeLength
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T141821Z" creationid="hirofumiwakasugi" creationdate="20150911T141821Z">
        <seg>extend SomeLength
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend SomeSize
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092316Z" creationid="hirofumiwakasugi" creationdate="20151009T092316Z">
        <seg>extend SomeSize
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>extend self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142822Z" creationid="hirofumiwakasugi" creationdate="20150911T142822Z">
        <seg>extend self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>false</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023054Z" creationid="hirofumiwakasugi" creationdate="20150908T023054Z">
        <seg>false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>flower = "Tulip"
# At this point 'flower' is a String

flower = 1
# At this point 'flower' is an Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180258Z" creationid="makenowjust" creationdate="20200422T180258Z">
        <seg>flower = "Tulip"
# この時点では flower は String 型

flower = 1
# この時点では 'flower' は Int32 型</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>flower = 1
# At this point 'flower' is an Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025958Z" creationid="hirofumiwakasugi" creationdate="20151009T025947Z">
        <seg>flower = 1
# ここでは「flower」は Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo          # Prints: Got foo with 0 arguments
bar 'a', 'b' # Prints: Got bar with 2 arguments
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014539Z" creationid="hirofumiwakasugi" creationdate="20151002T014456Z">
        <seg>foo          # 出力: Got foo with 0 arguments
bar 'a', 'b' # 出力: Got bar with 2 arguments
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; 0
bar #=&gt; 1
baz #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040354Z" creationid="hirofumiwakasugi" creationdate="20151001T040354Z">
        <seg>foo #=&gt; 0
bar #=&gt; 1
baz #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014702Z" creationid="hirofumiwakasugi" creationdate="20151001T014702Z">
        <seg>foo #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo #=&gt; one
bar #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035956Z" creationid="hirofumiwakasugi" creationdate="20151001T035956Z">
        <seg>foo #=&gt; one
bar #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1       # OK
foo "hello" # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025550Z" creationid="hirofumiwakasugi" creationdate="20150908T025543Z">
        <seg>foo 1       # OK
foo "hello" # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1     # "instance"
foo Int32 # "class"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T011921Z" creationid="hirofumiwakasugi" creationdate="20151009T011921Z">
        <seg>foo 1     # "instance"
foo Int32 # "class"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo 1, 2, 3       # OK, invokes first overload
foo "a", "b", "c" # OK, invokes second overload
foo 1, 2, "hello" # Error
foo()             # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030023Z" creationid="hirofumiwakasugi" creationdate="20150908T030023Z">
        <seg>foo 1, 2, 3       # OK、最初のオーバーロードを実行
foo "a", "b", "c" # OK, 2つ目のオーバーロードを実行
foo 1, 2, "hello" # エラー
foo()             # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo = Foo.new(1)
foo.t # Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061140Z" creationid="hirofumiwakasugi" creationdate="20150924T061140Z">
        <seg>foo = Foo.new(1)
foo.t # Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo Int32  # OK
foo String # Error
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025729Z" creationid="hirofumiwakasugi" creationdate="20150908T025729Z">
        <seg>foo Int32  # OK
foo String # エラー
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo Int32  # prints "Got Int32"
foo String # prints "Got String"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025842Z" creationid="hirofumiwakasugi" creationdate="20150908T025821Z">
        <seg>foo Int32  # "Got Int32" を表示
foo String # "Got String" を表示
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo do |x|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>foo do |x|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(&amp;block)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T030544Z" creationid="hirofumiwakasugi" creationdate="20150917T030544Z">
        <seg>foo(&amp;block)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(1)       #=&gt; Int32
foo("hello") #=&gt; String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T030350Z" creationid="hirofumiwakasugi" creationdate="20150908T030350Z">
        <seg>foo(1)       #=&gt; Int32
foo("hello") #=&gt; String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo(Int32)  #=&gt; Array(Int32)
foo(String) #=&gt; Array(String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040536Z" creationid="hirofumiwakasugi" creationdate="20150908T040536Z">
        <seg>foo(Int32)  #=&gt; Array(Int32)
foo(String) #=&gt; Array(String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo([1, 2])   #=&gt; Int32
foo([1, "a"]) #=&gt; (Int32 | String)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T040223Z" creationid="hirofumiwakasugi" creationdate="20150908T040223Z">
        <seg>foo([1, 2])   #=&gt; Int32
foo([1, "a"]) #=&gt; (Int32 | String)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>foo.cr</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T155852Z" creationid="hirofumiwakasugi" creationdate="20150905T155852Z">
        <seg>foo.cr</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fresh_vars_sample a, b, c</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021034Z" creationid="hirofumiwakasugi" creationdate="20151002T021034Z">
        <seg>fresh_vars_sample a, b, c</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>from ...</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175922Z" creationid="makenowjust" creationdate="20200413T175922Z">
        <seg>from ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun callback(f : Int32 -&gt; Int32)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024226Z" creationid="hirofumiwakasugi" creationdate="20151008T024226Z">
        <seg>fun callback(f : Int32 -&gt; Int32)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041702Z" creationid="hirofumiwakasugi" creationdate="20151005T041702Z">
        <seg>fun ceil_f32 = "llvm.ceil.f32"(value : Float32) : Float32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun cos(value : Float64) : Float64
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151003T143754Z" creationid="hirofumiwakasugi" creationdate="20151003T143754Z">
        <seg>fun cos(value : Float64) : Float64
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun execute_callback
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052143Z" creationid="hirofumiwakasugi" creationdate="20151008T052143Z">
        <seg>fun execute_callback
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun execute_callback
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T053400Z" creationid="hirofumiwakasugi" creationdate="20151008T053400Z">
        <seg>fun execute_callback
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun exit(status : Int32) : NoReturn
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044605Z" creationid="hirofumiwakasugi" creationdate="20151005T044605Z">
        <seg>fun exit(status : Int32) : NoReturn
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun foo : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T074354Z" creationid="hirofumiwakasugi" creationdate="20150919T074354Z">
        <seg>fun foo : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun getch : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040641Z" creationid="hirofumiwakasugi" creationdate="20151005T040641Z">
        <seg>fun getch : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T041503Z" creationid="hirofumiwakasugi" creationdate="20151005T041503Z">
        <seg>fun init = SDL_Init(flags : UInt32) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T024054Z" creationid="hirofumiwakasugi" creationdate="20151008T024054Z">
        <seg>fun memcmp(p1 : Void*, p2 : Void*, size : C::SizeT) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun my_fun(some_size : LibC::SizeT)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T042605Z" creationid="hirofumiwakasugi" creationdate="20151005T042605Z">
        <seg>fun my_fun(some_size : LibC::SizeT)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun printf(format : UInt8*, ...) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T045122Z" creationid="hirofumiwakasugi" creationdate="20151005T045122Z">
        <seg>fun printf(format : UInt8*, ...) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : MyInt)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023153Z" creationid="hirofumiwakasugi" creationdate="20151008T023153Z">
        <seg>fun some_fun(value : MyInt)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun some_fun(value : SomeEnum)
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T053349Z" creationid="hirofumiwakasugi" creationdate="20151007T053349Z">
        <seg>fun some_fun(value : SomeEnum)
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun srand(seed : UInt32)
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040718Z" creationid="hirofumiwakasugi" creationdate="20151005T040718Z">
        <seg>fun srand(seed : UInt32)
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun store_callback(callback : -&gt;)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T052142Z" creationid="hirofumiwakasugi" creationdate="20151008T052142Z">
        <seg>fun store_callback(callback : -&gt;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun variadic(value : Int32, ...) : Int32
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T040825Z" creationid="hirofumiwakasugi" creationdate="20151005T040825Z">
        <seg>fun variadic(value : Int32, ...) : Int32
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T043346Z" creationid="hirofumiwakasugi" creationdate="20151005T043346Z">
        <seg>fun waitpid(pid : Int32, status_ptr : Int32*, options : Int32) : Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter :currency, :value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012157Z" creationid="hirofumiwakasugi" creationdate="20151010T012157Z">
        <seg>getter :currency, :value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131931Z" creationid="hirofumiwakasugi" creationdate="20150904T131931Z">
        <seg>getter name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter pet</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031542Z" creationid="hirofumiwakasugi" creationdate="20150910T031542Z">
        <seg>getter pet</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>getter x, y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025209Z" creationid="hirofumiwakasugi" creationdate="20150909T025209Z">
        <seg>getter x, y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>got: false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T165203Z" creationid="makenowjust" creationdate="20200419T165203Z">
        <seg>got: false</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greet # undefined local variable or method 'greet'
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040836Z" creationid="hirofumiwakasugi" creationdate="20150909T040836Z">
        <seg>greet # undefined local variable or method 'greet'
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greet #=&gt; "Hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040827Z" creationid="hirofumiwakasugi" creationdate="20150909T040827Z">
        <seg>greet #=&gt; "Hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>greeting = @custom_greeting || @@default_greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010359Z" creationid="hirofumiwakasugi" creationdate="20151010T010359Z">
        <seg>greeting = @custom_greeting || @@default_greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>handle_match(match)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011937Z" creationid="hirofumiwakasugi" creationdate="20151010T011937Z">
        <seg>handle_match(match)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>headers = HTTP::Headers.new
headers["foo"] = "bar"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180256Z" creationid="makenowjust" creationdate="20200420T180256Z">
        <seg>headers = HTTP::Headers.new
headers["foo"] = "bar"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hello</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034039Z" creationid="makenowjust" creationdate="20200420T034039Z">
        <seg>hello</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hello \n #{world}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034149Z" creationid="makenowjust" creationdate="20200420T034149Z">
        <seg>hello \n #{world}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>hierarchy                show type hierarchy</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>hierarchy                show type hierarchy</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144055Z" creationid="hirofumiwakasugi" creationdate="20151010T144055Z">
        <seg>horns</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T212645Z" creationid="makenowjust" creationdate="20200412T212645Z">
        <seg>horns
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>horns
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T143017Z" creationid="hirofumiwakasugi" creationdate="20151010T143017Z">
        <seg>horns
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/guides/concurrency.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221346Z" creationid="makenowjust" creationdate="20200413T221346Z">
        <seg>https://ja.crystal-lang.org/reference/guides/concurrency.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/overview/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210753Z" creationid="makenowjust" creationdate="20200413T210744Z">
        <seg>https://ja.crystal-lang.org/reference/overview/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/c_bindings/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221531Z" creationid="makenowjust" creationdate="20200413T221531Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/c_bindings/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/macros.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221030Z" creationid="makenowjust" creationdate="20200413T221030Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/macros.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://crystal-lang.org/reference/syntax_and_semantics/types_and_methods.html</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211239Z" creationid="makenowjust" creationdate="20200413T211235Z">
        <seg>https://ja.crystal-lang.org/reference/syntax_and_semantics/types_and_methods.html</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://fly.io</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222535Z" creationid="makenowjust" creationdate="20200413T222535Z">
        <seg>https://fly.io</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/crystal-book/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035251Z" creationid="makenowjust" creationdate="20200420T035251Z">
        <seg>https://github.com/crystal-jp/ja.crystal-lang.org/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/crystal/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222915Z" creationid="makenowjust" creationdate="20200413T222915Z">
        <seg>https://github.com/crystal-lang/crystal/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://github.com/crystal-lang/shards</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221945Z" creationid="makenowjust" creationdate="20200413T221945Z">
        <seg>https://github.com/crystal-lang/shards</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://gitter.im/crystal-lang/crystal</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223057Z" creationid="makenowjust" creationdate="20200413T223057Z">
        <seg>https://gitter.im/crystal-lang/crystal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://groups.google.com/forum/#!forum/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222941Z" creationid="makenowjust" creationdate="20200413T222941Z">
        <seg>https://groups.google.com/forum/#!forum/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://manas.tech/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222531Z" creationid="makenowjust" creationdate="20200413T222531Z">
        <seg>https://manas.tech/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://nikolamotor.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222534Z" creationid="makenowjust" creationdate="20200413T222534Z">
        <seg>https://nikolamotor.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://opencollective.com/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210323Z" creationid="makenowjust" creationdate="20200413T210323Z">
        <seg>https://opencollective.com/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://salt.bountysource.com/teams/crystal-lang</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210327Z" creationid="makenowjust" creationdate="20200413T210327Z">
        <seg>https://salt.bountysource.com/teams/crystal-lang</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://twitter.com/CrystalLanguage</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T223106Z" creationid="makenowjust" creationdate="20200413T223106Z">
        <seg>https://twitter.com/CrystalLanguage</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.84codes.com/</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222533Z" creationid="makenowjust" creationdate="20200413T222533Z">
        <seg>https://www.84codes.com/</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211330Z" creationid="makenowjust" creationdate="20200413T211330Z">
        <seg>https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030107Z" creationid="hirofumiwakasugi" creationdate="20150916T030107Z">
        <seg>i + 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023508Z" creationid="hirofumiwakasugi" creationdate="20150916T023508Z">
        <seg>i + 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i + 1
end
value #:: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025316Z" creationid="hirofumiwakasugi" creationdate="20150916T025316Z">
        <seg>i + 1
end
value #:: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032024Z" creationid="hirofumiwakasugi" creationdate="20150916T032024Z">
        <seg>i += 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i += 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032842Z" creationid="hirofumiwakasugi" creationdate="20150916T032842Z">
        <seg>i += 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>i = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032022Z" creationid="hirofumiwakasugi" creationdate="20150916T032022Z">
        <seg>i = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if !</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085449Z" creationid="makenowjust" creationdate="20200424T085449Z">
        <seg>if !</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if 1 &gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080545Z" creationid="makenowjust" creationdate="20200424T080545Z">
        <seg>if 1 &gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if @a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083258Z" creationid="makenowjust" creationdate="20200424T083258Z">
        <seg>if @a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if @a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T084051Z" creationid="makenowjust" creationdate="20200424T084051Z">
        <seg>if @a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T014259Z" creationid="hirofumiwakasugi" creationdate="20150903T014259Z">
        <seg>if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a &amp;&amp; b</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083401Z" creationid="makenowjust" creationdate="20200424T083401Z">
        <seg>if a &amp;&amp; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a = @a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083403Z" creationid="makenowjust" creationdate="20200424T083403Z">
        <seg>if a = @a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a = some_expression</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083359Z" creationid="makenowjust" creationdate="20200424T083359Z">
        <seg>if a = some_expression</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a == 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052239Z" creationid="hirofumiwakasugi" creationdate="20150905T052239Z">
        <seg>if a == 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a == 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052325Z" creationid="hirofumiwakasugi" creationdate="20150905T052325Z">
        <seg>if a == 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022014Z" creationid="hirofumiwakasugi" creationdate="20150903T022014Z">
        <seg>if a.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083246Z" creationid="makenowjust" creationdate="20200424T083246Z">
        <seg>if a.is_a?(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083255Z" creationid="makenowjust" creationdate="20200424T083255Z">
        <seg>if a.is_a?(String) &amp;&amp; b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if a.responds_to?(:abs)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T030404Z" creationid="hirofumiwakasugi" creationdate="20150903T030404Z">
        <seg>if a.responds_to?(:abs)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if b.is_a?(Number)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021711Z" creationid="hirofumiwakasugi" creationdate="20150903T021711Z">
        <seg>if b.is_a?(Number)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if callback = @on_save_callback</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061909Z" creationid="hirofumiwakasugi" creationdate="20150918T061909Z">
        <seg>if callback = @on_save_callback</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if i == 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025315Z" creationid="hirofumiwakasugi" creationdate="20150916T025315Z">
        <seg>if i == 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if i == 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024343Z" creationid="hirofumiwakasugi" creationdate="20150916T024343Z">
        <seg>if i == 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if method # first call to a method that can return Int32 or Nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082248Z" creationid="makenowjust" creationdate="20200424T082248Z">
        <seg>if method # 最初の呼び出しでメソッドは Int32 か Nil を返す</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if num % 2 == 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015356Z" creationid="hirofumiwakasugi" creationdate="20150904T015356Z">
        <seg>if num % 2 == 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T011257Z" creationid="hirofumiwakasugi" creationdate="20150903T011257Z">
        <seg>if some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if typ.is_a?(Array)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063208Z" creationid="hirofumiwakasugi" creationdate="20150930T063208Z">
        <seg>if typ.is_a?(Array)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083354Z" creationid="makenowjust" creationdate="20200424T083354Z">
        <seg>if var</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.is_a?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083244Z" creationid="makenowjust" creationdate="20200424T083244Z">
        <seg>if var.is_a?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085224Z" creationid="makenowjust" creationdate="20200424T085224Z">
        <seg>if var.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>if var.responds_to?(...)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083705Z" creationid="makenowjust" creationdate="20200424T083705Z">
        <seg>if var.responds_to?(...)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ifdef linux</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043752Z" creationid="hirofumiwakasugi" creationdate="20150909T043752Z">
        <seg>ifdef linux</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ifdef x86_64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T043754Z" creationid="hirofumiwakasugi" creationdate="20150908T043754Z">
        <seg>ifdef x86_64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:12: undefined method 'length' for Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043749Z" creationid="hirofumiwakasugi" creationdate="20150905T043749Z">
        <seg>in foo.cr:12: undefined method 'length' for Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:12: undefined method 'size' for Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025350Z" creationid="hirofumiwakasugi" creationdate="20151009T025350Z">
        <seg>in foo.cr:12: undefined method 'size' for Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042923Z" creationid="hirofumiwakasugi" creationdate="20150907T042923Z">
        <seg>in foo.cr:2: undefined method '+' for Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include ItemsLength</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133854Z" creationid="hirofumiwakasugi" creationdate="20150911T133854Z">
        <seg>include ItemsLength</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include ItemsSize</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092236Z" creationid="hirofumiwakasugi" creationdate="20151009T092236Z">
        <seg>include ItemsSize</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include Legendary</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144050Z" creationid="hirofumiwakasugi" creationdate="20151010T144050Z">
        <seg>include Legendary</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include Moo(U)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150924T061139Z" creationid="hirofumiwakasugi" creationdate="20150924T061139Z">
        <seg>include Moo(U)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>include SomeModule</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T142555Z" creationid="hirofumiwakasugi" creationdate="20150911T142555Z">
        <seg>include SomeModule</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>init                     generate new crystal project</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072215Z" creationid="hirofumiwakasugi" creationdate="20150901T072215Z">
        <seg>init                     generate new crystal project</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060138Z" creationid="hirofumiwakasugi" creationdate="20150904T060138Z">
        <seg>instance</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance = Person.allocate</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060127Z" creationid="hirofumiwakasugi" creationdate="20150904T060127Z">
        <seg>instance = Person.allocate</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instance.initialize(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T060127Z" creationid="hirofumiwakasugi" creationdate="20150904T060127Z">
        <seg>instance.initialize(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>instantiating 'Person#initialize(Int32)'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043749Z" creationid="hirofumiwakasugi" creationdate="20150905T043749Z">
        <seg>instantiating 'Person#initialize(Int32)'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; " + "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192848Z" creationid="makenowjust" creationdate="20200419T192848Z">
        <seg>io &lt;&lt; " + "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; " = "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192850Z" creationid="makenowjust" creationdate="20200419T192850Z">
        <seg>io &lt;&lt; " = "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; "sum: "</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192846Z" creationid="makenowjust" creationdate="20200419T192846Z">
        <seg>io &lt;&lt; "sum: "</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192847Z" creationid="makenowjust" creationdate="20200419T192847Z">
        <seg>io &lt;&lt; a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; a + b
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192851Z" creationid="makenowjust" creationdate="20200419T192851Z">
        <seg>io &lt;&lt; a + b
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>io &lt;&lt; b</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T192849Z" creationid="makenowjust" creationdate="20200419T192849Z">
        <seg>io &lt;&lt; b</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is exactly the same as writing this:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031436Z" creationid="hirofumiwakasugi" creationdate="20150916T031436Z">
        <seg>上記は以下のように書くことと完全に同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>is the same as:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025101Z" creationid="hirofumiwakasugi" creationdate="20150909T025101Z">
        <seg>これは以下と同じです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items = Items.new
items.length #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133857Z" creationid="hirofumiwakasugi" creationdate="20150911T133857Z">
        <seg>items = Items.new
items.length #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items = Items.new
items.size #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092303Z" creationid="hirofumiwakasugi" creationdate="20151009T092303Z">
        <seg>items = Items.new
items.size #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150911T133853Z" creationid="hirofumiwakasugi" creationdate="20150911T133853Z">
        <seg>items.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>items.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T092228Z" creationid="hirofumiwakasugi" creationdate="20151009T092228Z">
        <seg>items.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023329Z" creationid="hirofumiwakasugi" creationdate="20150908T023329Z">
        <seg>john = Person.new "John"
another_john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.address = "Argentina"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T054211Z" creationid="hirofumiwakasugi" creationdate="20150905T054211Z">
        <seg>john = Person.new "John"
john.address = "Argentina"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070844Z" creationid="hirofumiwakasugi" creationdate="20150906T070844Z">
        <seg>john = Person.new "John"
john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.length #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T131933Z" creationid="hirofumiwakasugi" creationdate="20150904T131933Z">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.length #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.size #=&gt; 4
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025313Z" creationid="hirofumiwakasugi" creationdate="20151009T025313Z">
        <seg>john = Person.new "John"
john.name #=&gt; "John"
john.name.size #=&gt; 4
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122230Z" creationid="hirofumiwakasugi" creationdate="20150904T122230Z">
        <seg>john = Person.new "John"
peter = Person.new "Peter"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T031544Z" creationid="hirofumiwakasugi" creationdate="20150910T031544Z">
        <seg>john = Person.new "John", Dog.new
peter = Person.new "Peter", Cat.new
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john == another_john #=&gt; true
john == peter #=&gt; false (names differ)
john == 1 #=&gt; false (because 1 is not a Person)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T023557Z" creationid="hirofumiwakasugi" creationdate="20150908T023557Z">
        <seg>john == another_john #=&gt; true
john == peter #=&gt; false (name が異なるため)
john == 1 #=&gt; false (1 は Person ではないため)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122231Z" creationid="hirofumiwakasugi" creationdate="20150904T122231Z">
        <seg>john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older
john.age #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122232Z" creationid="hirofumiwakasugi" creationdate="20150904T122232Z">
        <seg>john.become_older
john.age #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older 2
john.age #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T112821Z" creationid="hirofumiwakasugi" creationdate="20150906T112821Z">
        <seg>john.become_older 2
john.age #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.become_older 5
john.age #=&gt; 6
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T070845Z" creationid="hirofumiwakasugi" creationdate="20150906T070845Z">
        <seg>john.become_older 5
john.age #=&gt; 6
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name #=&gt; "John"
john.age #=&gt; 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055721Z" creationid="hirofumiwakasugi" creationdate="20150904T055721Z">
        <seg>john.name #=&gt; "John"
john.age #=&gt; 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name.length</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043750Z" creationid="hirofumiwakasugi" creationdate="20150905T043750Z">
        <seg>john.name.length</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>john.name.size</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T025352Z" creationid="hirofumiwakasugi" creationdate="20151009T025352Z">
        <seg>john.name.size</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>lib LibYAML
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010227Z" creationid="hirofumiwakasugi" creationdate="20151010T010227Z">
        <seg>lib LibYAML
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local += 1  # same as: local = local + 1

# The above is valid with these operators:
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;

local ||= 1 # same as: local || (local = 1)
local &amp;&amp;= 1 # same as: local &amp;&amp; (local = 1)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174406Z" creationid="makenowjust" creationdate="20200422T174406Z">
        <seg>local += 1  # local = local + 1 と同じ

# 上記は以下の演算子でも有効
# +, -, *, /, %, |, &amp;, ^, **, &lt;&lt;, &gt;&gt;

local ||= 1 # local || (local = 1) と同じ
local &amp;&amp;= 1 # local &amp;&amp; (local = 1) と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>local ||= 1 # same as: local || (local = 1)
local &amp;&amp;= 1 # same as: local &amp;&amp; (local = 1)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T054504Z" creationid="hirofumiwakasugi" creationdate="20150902T054504Z">
        <seg>local ||= 1 # local || (local = 1) と同じ
local &amp;&amp;= 1 # local &amp;&amp; (local = 1) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>loop do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095209Z" creationid="makenowjust" creationdate="20200424T095209Z">
        <seg>loop do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro compile_time_date</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200748Z" creationid="makenowjust" creationdate="20200413T200704Z">
        <seg>{% highlight crystal %}macro compile_time_date</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro def has_instance_var?(name) : Bool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030759Z" creationid="hirofumiwakasugi" creationdate="20151009T030759Z">
        <seg>macro def has_instance_var?(name) : Bool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro def instance_vars_names : Array(String)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>macro def instance_vars_names : Array(String)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro emphasize(value)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T020422Z" creationid="hirofumiwakasugi" creationdate="20151001T020422Z">
        <seg>macro emphasize(value)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro generate_method_downcase(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200743Z" creationid="makenowjust" creationdate="20200413T200743Z">
        <seg>{% highlight crystal %}macro generate_method_downcase(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro generate_methods(names)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200905Z" creationid="makenowjust" creationdate="20200413T200905Z">
        <seg>{% highlight crystal %}macro generate_methods(names)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro getter(name)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T201150Z" creationid="makenowjust" creationdate="20200413T201043Z">
        <seg>{% highlight crystal %}macro getter(name)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>macro inherited</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014443Z" creationid="hirofumiwakasugi" creationdate="20151002T014443Z">
        <seg>macro inherited</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>many do |x, y, z|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022217Z" creationid="hirofumiwakasugi" creationdate="20150916T022217Z">
        <seg>many do |x, y, z|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>many do |x, y|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022444Z" creationid="hirofumiwakasugi" creationdate="20150916T022444Z">
        <seg>many do |x, y|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method  # second call can still return Int32 or Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T021404Z" creationid="hirofumiwakasugi" creationdate="20150903T021326Z">
        <seg>method  # しかし、2回目の呼び出しは、また Int32 か Nil のどちらかを返す
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>method # second call can still return Int32 or Nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T082325Z" creationid="makenowjust" creationdate="20200424T082325Z">
        <seg>method # 2度目の呼び出しでも Int32 か Nil を返す
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>minutes_west : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>minutes_west : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>minutes_west, dst_time : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045757Z" creationid="hirofumiwakasugi" creationdate="20151007T045757Z">
        <seg>minutes_west, dst_time : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>model = Model.new
model.on_save { puts "Saved!" }
model.save # prints "Saved!"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061923Z" creationid="hirofumiwakasugi" creationdate="20150918T061923Z">
        <seg>model = Model.new
model.on_save { puts "Saved!" }
model.save # "Saved!" と出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Earth</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055323Z" creationid="hirofumiwakasugi" creationdate="20150913T055323Z">
        <seg>module Earth</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module HTTP</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010225Z" creationid="hirofumiwakasugi" creationdate="20151010T010225Z">
        <seg>module HTTP</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Money</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205212Z" creationid="makenowjust" creationdate="20200412T205212Z">
        <seg>module Money</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>module Scorecard</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T205020Z" creationid="makenowjust" creationdate="20200412T205020Z">
        <seg>module Scorecard</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>my_hash = MyHash(typeof("foo", "bar"), typeof(1, "baz")).new
my_hash["foo"] = 1
my_hash["bar"] = "baz"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T180558Z" creationid="makenowjust" creationdate="20200420T180558Z">
        <seg>my_hash = MyHash(typeof("foo", "bar"), typeof(1, "baz")).new
my_hash["foo"] = 1
my_hash["bar"] = "baz"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = "Crystal"
age = 1</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T180227Z" creationid="makenowjust" creationdate="20200422T180227Z">
        <seg>name = "Crystal"
age = 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name = "world"
%q(hello \n #{name}) # =&gt; "hello \\n \#{name}"
%Q(hello \n #{name}) # =&gt; "hello \n world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T193621Z" creationid="makenowjust" creationdate="20200419T193621Z">
        <seg>name = "world"
%q(hello \n #{name}) # =&gt; "hello \\n \#{name}"
%Q(hello \n #{name}) # =&gt; "hello \n world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age = "Crystal", 1

# The above is the same as this:
temp1 = "Crystal"
temp2 = 1
name = temp1
age = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175403Z" creationid="makenowjust" creationdate="20200422T175403Z">
        <seg>name, age = "Crystal", 1

# 上記は以下と同じ
temp1 = "Crystal"
temp2 = 1
name = temp1
age = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>name, age, source = "Crystal, 123, GitHub".split(", ")

# The above is the same as this:
temp = "Crystal, 123, GitHub".split(", ")
name = temp[0]
age = temp[1]
source = temp[2]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175556Z" creationid="makenowjust" creationdate="20200422T175556Z">
        <seg>name, age, source = "Crystal, 123, GitHub".split(", ")

# 上記は以下に同じ
temp = "Crystal, 123, GitHub".split(", ")
name = temp[0]
age = temp[1]
source = temp[2]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) #=&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) #=&gt; Array(String | Int32 | Symbol | Char)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063211Z" creationid="hirofumiwakasugi" creationdate="20150930T063211Z">
        <seg>nest = [1, ["b", [:c, ['d']]]]
flat = Array(typeof(Array.elem_type(nest))).new
typeof(nest) #=&gt; Array(Int32 | Array(String | Array(Symbol | Array(Char))))
typeof(flat) #=&gt; Array(String | Int32 | Symbol | Char)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052326Z" creationid="hirofumiwakasugi" creationdate="20150905T052326Z">
        <seg>next</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next "hello"
end

# The above prints "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100428Z" creationid="makenowjust" creationdate="20200424T100403Z">
        <seg>next "hello"
end

# 上記を実行すると "hello" と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>next 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030107Z" creationid="hirofumiwakasugi" creationdate="20150916T030107Z">
        <seg>next 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T000907Z" creationid="makenowjust" creationdate="20200414T000907Z">
        <seg>nil</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013600Z" creationid="hirofumiwakasugi" creationdate="20150903T013600Z">
        <seg>nil
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T013522Z" creationid="hirofumiwakasugi" creationdate="20150903T013522Z">
        <seg>nil
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil
end

# Another example:
if 1 &gt; 2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T080609Z" creationid="makenowjust" creationdate="20200424T080604Z">
        <seg>nil
end

# 他の例
if 1 &gt; 2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
# a is Int32 or Nil

if a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T083356Z" creationid="makenowjust" creationdate="20200424T083356Z">
        <seg>nil : 3
# a is Int32 or Nil

if a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
if !a</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085746Z" creationid="makenowjust" creationdate="20200424T085746Z">
        <seg>nil : 3
if !a</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>nil : 3
if a.nil?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T085227Z" creationid="makenowjust" creationdate="20200424T085227Z">
        <seg>nil : 3
if a.nil?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194806Z" creationid="makenowjust" creationdate="20200419T194806Z">
        <seg>no newlines" # same as "hello world, no newlines"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>no newlines" # same as "hello world, no newlines"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104125Z" creationid="hirofumiwakasugi" creationdate="20150901T104125Z">
        <seg>no newlines" # "hello world, no newlines" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>node : Node*</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045919Z" creationid="hirofumiwakasugi" creationdate="20151007T045919Z">
        <seg>node : Node*</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>numbers = [1, 10, 3, 4, 5, 8]
numbers.select(6..) # =&gt; [10, 8]
numbers.select(..6) # =&gt; [1, 3, 4, 5]

numbers[2..] = [3, 4, 5, 8]
numbers[..2] = [1, 10, 3]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200421T035742Z" creationid="makenowjust" creationdate="20200421T035742Z">
        <seg>numbers = [1, 10, 3, 4, 5, 8]
numbers.select(6..) # =&gt; [10, 8]
numbers.select(..6) # =&gt; [1, 3, 4, 5]

numbers[2..] = [3, 4, 5, 8]
numbers[..2] = [1, 10, 3]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1] += 2        # same as: objects[1] = objects[1] + 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055115Z" creationid="hirofumiwakasugi" creationdate="20150902T055115Z">
        <seg>objects[1] += 2        # objects[1] = objects[1] + 2 と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1] ||= 2       # same as: objects[1]? || (objects[1] = 2)
objects[1] &amp;&amp;= 2       # same as: objects[1]? &amp;&amp; (objects[1] = 2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055129Z" creationid="hirofumiwakasugi" creationdate="20150902T055122Z">
        <seg>objects[1] ||= 2       # objects[1]? || (objects[1] = 2) と同じ
objects[1] &amp;&amp;= 2       # objects[1]? &amp;&amp; (objects[1] = 2) と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>objects[1], objects[2] = 3, 4

# Same as:
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175709Z" creationid="makenowjust" creationdate="20200422T175709Z">
        <seg>objects[1], objects[2] = 3, 4

#以下に同じ
temp1 = 3
temp2 = 4
objects[1] = temp1
objects[2] = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one = Person.new 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T043748Z" creationid="hirofumiwakasugi" creationdate="20150905T043748Z">
        <seg>one = Person.new 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>one_more = Person.new "One more"
one_more.say "hello" # Error, one_more is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033726Z" creationid="hirofumiwakasugi" creationdate="20150909T033652Z">
        <seg>one_more = Person.new "One more"
one_more.say "hello" # one_more が Person だが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>or</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140809Z" creationid="hirofumiwakasugi" creationdate="20151010T140807Z">
        <seg>または</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other = Person.new "Other"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032731Z" creationid="hirofumiwakasugi" creationdate="20150909T032731Z">
        <seg>other = Person.new "Other"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.name == name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T022640Z" creationid="hirofumiwakasugi" creationdate="20150908T022640Z">
        <seg>other.name == name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.say "hello" # Error, other is a receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032746Z" creationid="hirofumiwakasugi" creationdate="20150909T032746Z">
        <seg>other.say "hello" # other というレシーバが指定されているのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>other.say "hello" # OK, other is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033742Z" creationid="hirofumiwakasugi" creationdate="20150909T033500Z">
        <seg>other.say "hello" # other は Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p = Person.new
p.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024149Z" creationid="hirofumiwakasugi" creationdate="20150910T024149Z">
        <seg>p = Person.new
p.greet "everyone" # "Hi, everyone"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>p1.name == p2.name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025142Z" creationid="hirofumiwakasugi" creationdate="20150908T025142Z">
        <seg>p1.name == p2.name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paint :red
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012136Z" creationid="hirofumiwakasugi" creationdate="20150916T012136Z">
        <seg>paint :red
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>paint Color::Red
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012101Z" creationid="hirofumiwakasugi" creationdate="20150916T012101Z">
        <seg>paint Color::Red
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.banner = "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T184309Z" creationid="makenowjust" creationdate="20200413T184309Z">
        <seg>parser.banner = "#{"The Beatles".colorize(:yellow).on(:black)} App"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.banner = "Welcome to The Beatles App!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172456Z" creationid="makenowjust" creationdate="20200413T172456Z">
        <seg>parser.banner = "Welcome to The Beatles App!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.invalid_option do |option_flag|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180431Z" creationid="makenowjust" creationdate="20200413T180431Z">
        <seg>parser.invalid_option do |option_flag|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.missing_option do |option_flag|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180424Z" creationid="makenowjust" creationdate="20200413T180424Z">
        <seg>parser.missing_option do |option_flag|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-g NAME", "--goodbye_hello=NAME", "Say hello to whoever you want" do |name|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175226Z" creationid="makenowjust" creationdate="20200413T175226Z">
        <seg>parser.on "-g NAME", "--goodbye_hello=NAME", "Say hello to whoever you want" do |name|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-h", "--help", "Show help" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172503Z" creationid="makenowjust" creationdate="20200413T172503Z">
        <seg>parser.on "-h", "--help", "Show help" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-r", "--random_goodbye_hello", "Say hello to one random member" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180419Z" creationid="makenowjust" creationdate="20200413T180419Z">
        <seg>parser.on "-r", "--random_goodbye_hello", "Say hello to one random member" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-s", "--strawberry", "Strawberry fields forever mode ON" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180421Z" creationid="makenowjust" creationdate="20200413T180421Z">
        <seg>parser.on "-s", "--strawberry", "Strawberry fields forever mode ON" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-t", "--twist", "Twist and SHOUT" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174910Z" creationid="makenowjust" creationdate="20200413T174910Z">
        <seg>parser.on "-t", "--twist", "Twist and SHOUT" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>parser.on "-v", "--version", "Show version" do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172458Z" creationid="makenowjust" creationdate="20200413T172458Z">
        <seg>parser.on "-v", "--version", "Show version" do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033520Z" creationid="hirofumiwakasugi" creationdate="20150909T033520Z">
        <seg>person = Person.new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>person = Person.new "John"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123112Z" creationid="hirofumiwakasugi" creationdate="20150904T123112Z">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 3
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123334Z" creationid="hirofumiwakasugi" creationdate="20150904T123334Z">
        <seg>person = Person.new "John"
person.become_older
person.age #=&gt; 3
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John", 30
person.has_instance_var?("name") #=&gt; true
person.has_instance_var?("birthday") #=&gt; false
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031041Z" creationid="hirofumiwakasugi" creationdate="20151009T031041Z">
        <seg>person = Person.new "John", 30
person.has_instance_var?("name") #=&gt; true
person.has_instance_var?("birthday") #=&gt; false
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person = Person.new "John", 30
person.instance_vars_names #=&gt; ["name", "age"]
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012114Z" creationid="hirofumiwakasugi" creationdate="20151002T012114Z">
        <seg>person = Person.new "John", 30
person.instance_vars_names #=&gt; ["name", "age"]
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.age += 1 # same as: person.age = person.age + 1

person.name ||= "John" # same as: person.name || (person.name = "John")
person.name &amp;&amp;= "John" # same as: person.name &amp;&amp; (person.name = "John")

objects[1] += 2 # same as: objects[1] = objects[1] + 2

objects[1] ||= 2 # same as: objects[1]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174912Z" creationid="makenowjust" creationdate="20200422T174838Z">
        <seg>person.age += 1 # person.age = person.age + 1 と同じ

person.name ||= "John" # person.name || (person.name = "John") と同じ
person.name &amp;&amp;= "John" # person.name &amp;&amp; (person.name = "John") と同じ

objects[1] += 2 # objects[1] = objects[1] + 2 と同じ

objects[1] ||= 2 # objects[1]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older
person.age #=&gt; 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071817Z" creationid="hirofumiwakasugi" creationdate="20150906T071817Z">
        <seg>person.become_older
person.age #=&gt; 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older "12"
person.age #=&gt; 18</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071818Z" creationid="hirofumiwakasugi" creationdate="20150906T071818Z">
        <seg>person.become_older "12"
person.age #=&gt; 18</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older 5
person.age #=&gt; 6</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071818Z" creationid="hirofumiwakasugi" creationdate="20150906T071818Z">
        <seg>person.become_older 5
person.age #=&gt; 6</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.become_older do |current_age|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T071819Z" creationid="hirofumiwakasugi" creationdate="20150906T071819Z">
        <seg>person.become_older do |current_age|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.name ||= "John" # same as: person.name || (person.name = "John")
person.name &amp;&amp;= "John" # same as: person.name &amp;&amp; (person.name = "John")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T055108Z" creationid="hirofumiwakasugi" creationdate="20150902T055102Z">
        <seg>person.name ||= "John" # person.name || (person.name = "John") と同じ
person.name &amp;&amp;= "John" # person.name &amp;&amp; (person.name = "John") と同じ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.name, person.age = "John", 32

# Same as:
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T175627Z" creationid="makenowjust" creationdate="20200422T175627Z">
        <seg>person.name, person.age = "John", 32

# 以下に同じ
temp1 = "John"
temp2 = 32
person.name = temp1
person.age = temp2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>person.say "hello" # Error, person is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033730Z" creationid="hirofumiwakasugi" creationdate="20150909T033536Z">
        <seg>person.say "hello" # person は Person だが</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>peter.age #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T122233Z" creationid="hirofumiwakasugi" creationdate="20150904T122233Z">
        <seg>peter.age #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>peter.name #=&gt; "Peter"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T055722Z" creationid="hirofumiwakasugi" creationdate="20150904T055722Z">
        <seg>peter.name #=&gt; "Peter"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>point = Point.new 1, 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035034Z" creationid="hirofumiwakasugi" creationdate="20150906T035034Z">
        <seg>point = Point.new 1, 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>point.x #=&gt; 10
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035035Z" creationid="hirofumiwakasugi" creationdate="20150906T035035Z">
        <seg>point.x #=&gt; 10
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>pointerof(@x)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035033Z" creationid="hirofumiwakasugi" creationdate="20150906T035033Z">
        <seg>pointerof(@x)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>previous_def</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T123325Z" creationid="hirofumiwakasugi" creationdate="20150904T123325Z">
        <seg>previous_def</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "%name{index}: ", %name{index}, '\n'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021033Z" creationid="hirofumiwakasugi" creationdate="20151002T021033Z">
        <seg>print "%name{index}: ", %name{index}, '\n'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Declaring: ", "%name{index}", '\n'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T021007Z" creationid="hirofumiwakasugi" creationdate="20151002T021007Z">
        <seg>print "Declaring: ", "%name{index}", '\n'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.length}}, " arguments", '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T014453Z" creationid="hirofumiwakasugi" creationdate="20151002T014453Z">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.length}}, " arguments", '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.size}}, " arguments", '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T030040Z" creationid="hirofumiwakasugi" creationdate="20151009T030040Z">
        <seg>print "Got ", {{name.id.stringify}}, " with ", {{args.size}}, " arguments", '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>print {{*values}}, '\n'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040859Z" creationid="hirofumiwakasugi" creationdate="20151001T040859Z">
        <seg>print {{*values}}, '\n'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>println 1, 2, 3 # outputs 123\n
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040912Z" creationid="hirofumiwakasugi" creationdate="20151001T040912Z">
        <seg>println 1, 2, 3 # 123\n と出力
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>private def say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032701Z" creationid="hirofumiwakasugi" creationdate="20150909T032701Z">
        <seg>private def say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) # =&gt; 3</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172008Z" creationid="makenowjust" creationdate="20200422T172008Z">
        <seg>proc = -&gt;(x : Int32, y : Int32) { x + y }
proc.call(1, 2) # =&gt; 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;one
proc.call #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022052Z" creationid="hirofumiwakasugi" creationdate="20150902T022052Z">
        <seg>proc = -&gt;one
proc.call #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = -&gt;plus_one(Int32)
proc.call(41) #=&gt; 42
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022126Z" creationid="hirofumiwakasugi" creationdate="20150902T022126Z">
        <seg>proc = -&gt;plus_one(Int32)
proc.call(41) #=&gt; 42
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = capture { puts "Hello" }
invoke(&amp;proc) # prints "Hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024216Z" creationid="hirofumiwakasugi" creationdate="20150917T024156Z">
        <seg>proc = capture { puts "Hello" }
invoke(&amp;proc) # "Hello" を表示
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = capture { puts "Hello" }
twice &amp;proc
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T024954Z" creationid="hirofumiwakasugi" creationdate="20150917T024954Z">
        <seg>proc = capture { puts "Hello" }
twice &amp;proc
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = counter
proc.call #=&gt; 1
proc.call #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053729Z" creationid="hirofumiwakasugi" creationdate="20150918T053729Z">
        <seg>proc = counter
proc.call #=&gt; 1
proc.call #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = int_to_int { |x| x + 1 }
proc.call(1) #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T040125Z" creationid="hirofumiwakasugi" creationdate="20150916T040125Z">
        <seg>proc = int_to_int { |x| x + 1 }
proc.call(1) #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061952Z" creationid="hirofumiwakasugi" creationdate="20150918T061952Z">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # void
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061943Z" creationid="hirofumiwakasugi" creationdate="20150918T061943Z">
        <seg>proc = some_proc { |x| x + 1 }
proc.call(1) # void
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc = some_proc { |x| x.to_s }
proc.call(1) # "1"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061952Z" creationid="hirofumiwakasugi" creationdate="20150918T061952Z">
        <seg>proc = some_proc { |x| x.to_s }
proc.call(1) # "1"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>proc.call
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025015Z" creationid="hirofumiwakasugi" creationdate="20150917T025015Z">
        <seg>proc.call
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>property x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>property y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T053815Z" creationid="hirofumiwakasugi" creationdate="20150913T053815Z">
        <seg>property y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033414Z" creationid="hirofumiwakasugi" creationdate="20150909T033414Z">
        <seg>protected def say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>protected def self.say(message)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040624Z" creationid="hirofumiwakasugi" creationdate="20150909T040624Z">
        <seg>protected def self.say(message)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = PInt32.malloc(1) # : Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061341Z" creationid="hirofumiwakasugi" creationdate="20160204T061339Z">
        <seg>ptr = PInt32.malloc(1) # : Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = PInt32.malloc(1) # :: Pointer(Int32)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150919T070810Z" creationid="hirofumiwakasugi" creationdate="20150919T070810Z">
        <seg>ptr = PInt32.malloc(1) # :: Pointer(Int32)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = point.x_ptr
ptr.value = 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035034Z" creationid="hirofumiwakasugi" creationdate="20150906T035034Z">
        <seg>ptr = point.x_ptr
ptr.value = 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>ptr = pointerof(a)
ptr.value = 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T035023Z" creationid="hirofumiwakasugi" creationdate="20150906T035023Z">
        <seg>ptr = pointerof(a)
ptr.value = 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts ""</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175231Z" creationid="makenowjust" creationdate="20200413T175231Z">
        <seg>puts ""</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "#{strawberry ?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180435Z" creationid="makenowjust" creationdate="20200413T180435Z">
        <seg>puts "#{strawberry ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After 3"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>puts "After 3"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "After foo"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>puts "After foo"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024340Z" creationid="hirofumiwakasugi" creationdate="20150916T024340Z">
        <seg>puts "Before 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 2"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024341Z" creationid="hirofumiwakasugi" creationdate="20150916T024341Z">
        <seg>puts "Before 2"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before 3"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>puts "Before 3"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Before foo"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>puts "Before foo"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Bye bye from #{self}!"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T041659Z" creationid="hirofumiwakasugi" creationdate="20150910T041659Z">
        <seg>puts "Bye bye from #{self}!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Cleanup..."
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013357Z" creationid="hirofumiwakasugi" creationdate="20150907T013357Z">
        <seg>puts "Cleanup..."
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025706Z" creationid="hirofumiwakasugi" creationdate="20150916T025706Z">
        <seg>puts "Got #{i}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got #{i}"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015730Z" creationid="hirofumiwakasugi" creationdate="20150916T015730Z">
        <seg>puts "Got #{i}"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got Int32"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025811Z" creationid="hirofumiwakasugi" creationdate="20150908T025811Z">
        <seg>puts "Got Int32"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got String"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150908T025813Z" creationid="hirofumiwakasugi" creationdate="20150908T025813Z">
        <seg>puts "Got String"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Got: #{i}"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031409Z" creationid="hirofumiwakasugi" creationdate="20150916T031409Z">
        <seg>puts "Got: #{i}"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello world!"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161805Z" creationid="makenowjust" creationdate="20200413T161805Z">
        <seg>puts "Hello world!"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014757Z" creationid="hirofumiwakasugi" creationdate="20150916T014757Z">
        <seg>puts "Hello!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello!"
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>puts "Hello!"
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T040820Z" creationid="hirofumiwakasugi" creationdate="20150909T040820Z">
        <seg>puts "Hello"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello, "#{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024758Z" creationid="hirofumiwakasugi" creationdate="20150910T024758Z">
        <seg>puts "Hello, "#{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hello, #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024148Z" creationid="hirofumiwakasugi" creationdate="20150910T024148Z">
        <seg>puts "Hello, #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024146Z" creationid="hirofumiwakasugi" creationdate="20150910T024146Z">
        <seg>puts "Hi, #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, I'm #{@name}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T023717Z" creationid="hirofumiwakasugi" creationdate="20150910T023717Z">
        <seg>puts "Hi, I'm #{@name}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Hi, this is a number: #{msg}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024421Z" creationid="hirofumiwakasugi" creationdate="20150910T024421Z">
        <seg>puts "Hi, this is a number: #{msg}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144059Z" creationid="hirofumiwakasugi" creationdate="20151010T144059Z">
        <seg>puts "I'm a unicorn"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214638Z" creationid="makenowjust" creationdate="20200412T214638Z">
        <seg>puts "I'm a unicorn"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "I'm a unicorn"
end

# Makes the unicorn talk to STDOUT
#
# DEPRECATED: Use `speak`
def talk</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T214636Z" creationid="makenowjust" creationdate="20200412T214636Z">
        <seg>puts "I'm a unicorn"
end

# Makes the unicorn talk to STDOUT
#
# DEPRECATED: Use `speak`
def talk</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072632Z" creationid="hirofumiwakasugi" creationdate="20150901T072632Z">
        <seg>puts "Listening on http://0.0.0.0:8080"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072546Z" creationid="hirofumiwakasugi" creationdate="20150901T072546Z">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
{% endhighlight %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034947Z" creationid="hirofumiwakasugi" creationdate="20151102T034947Z">
        <seg>puts "Listening on http://0.0.0.0:8080"
server.listen
{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012244Z" creationid="hirofumiwakasugi" creationdate="20150907T012244Z">
        <seg>puts "Rescued MyException"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued MyException: #{ex.message}"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012418Z" creationid="hirofumiwakasugi" creationdate="20150907T012418Z">
        <seg>puts "Rescued MyException: #{ex.message}"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Rescued!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011958Z" creationid="hirofumiwakasugi" creationdate="20150907T011958Z">
        <seg>puts "Rescued!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "Skipping 1"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T025704Z" creationid="hirofumiwakasugi" creationdate="20150916T025704Z">
        <seg>puts "Skipping 1"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "We are in test mode"
{% end %}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040249Z" creationid="hirofumiwakasugi" creationdate="20151001T040249Z">
        <seg>puts "We are in test mode"
{% end %}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175236Z" creationid="makenowjust" creationdate="20200413T175236Z">
        <seg>puts "You say goodbye, and #{the_beatles.sample} says hello to #{say_hi_to}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180438Z" creationid="makenowjust" creationdate="20200413T180438Z">
        <seg>puts "You say goodbye, and I say hello to #{say_hi_to}!"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100255Z" creationid="makenowjust" creationdate="20200424T100255Z">
        <seg>puts "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "version 1.0"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172459Z" creationid="makenowjust" creationdate="20200413T172459Z">
        <seg>puts "version 1.0"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts "world"
end

# The above prints "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100424Z" creationid="makenowjust" creationdate="20200424T100258Z">
        <seg>puts "world"
end

# 上記を実行すると "hello" と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts %x
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020012Z" creationid="hirofumiwakasugi" creationdate="20151002T020012Z">
        <seg>puts %x
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a
end

# The above prints the numbers 2, 4 and 5</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100414Z" creationid="makenowjust" creationdate="20200424T095923Z">
        <seg>puts a
end

# 上記を実行すると2、4、5と表示する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a
end
# The above prints the numbers 2, 4 and 5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052338Z" creationid="hirofumiwakasugi" creationdate="20150905T052333Z">
        <seg>puts a
end
# 上記を実行すると 2、4、5 と表示されます。
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T020149Z" creationid="hirofumiwakasugi" creationdate="20150907T020149Z">
        <seg>puts a + 1 # error, undefined method '+' for Nil
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts a + 1 # works
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T023246Z" creationid="hirofumiwakasugi" creationdate="20150907T023246Z">
        <seg>puts a + 1 # エラーにならない
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts ex.message
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012109Z" creationid="hirofumiwakasugi" creationdate="20150907T012109Z">
        <seg>puts ex.message
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts greeting</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010359Z" creationid="hirofumiwakasugi" creationdate="20151010T010359Z">
        <seg>puts greeting</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032842Z" creationid="hirofumiwakasugi" creationdate="20150916T032842Z">
        <seg>puts i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025545Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>puts i
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T031810Z" creationid="hirofumiwakasugi" creationdate="20150916T031810Z">
        <seg>puts i
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts i.inspect
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022550Z" creationid="hirofumiwakasugi" creationdate="20150916T022550Z">
        <seg>puts i.inspect
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts member
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174915Z" creationid="makenowjust" creationdate="20200413T174915Z">
        <seg>puts member
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts message</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032701Z" creationid="hirofumiwakasugi" creationdate="20150909T032701Z">
        <seg>puts message</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts parser</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T172504Z" creationid="makenowjust" creationdate="20200413T172504Z">
        <seg>puts parser</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts v1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023506Z" creationid="hirofumiwakasugi" creationdate="20150916T023506Z">
        <seg>puts v1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts v2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023507Z" creationid="hirofumiwakasugi" creationdate="20150916T023507Z">
        <seg>puts v2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022444Z" creationid="hirofumiwakasugi" creationdate="20150916T022444Z">
        <seg>puts x + y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts x + y + z
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022218Z" creationid="hirofumiwakasugi" creationdate="20150916T022218Z">
        <seg>puts x + y + z
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts yield
end

block do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100344Z" creationid="makenowjust" creationdate="20200424T100344Z">
        <seg>puts yield
end

block do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>puts {{value}}
{% end %}
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041454Z" creationid="hirofumiwakasugi" creationdate="20151001T041454Z">
        <seg>puts {{value}}
{% end %}
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T144051Z" creationid="hirofumiwakasugi" creationdate="20151010T144051Z">
        <seg>raise "Not a unicorn" if @horns != 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200412T211949Z" creationid="makenowjust" creationdate="20200412T211949Z">
        <seg>raise "Not a unicorn" if @horns != 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "Not a unicorn" if @horns != 1
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T140506Z" creationid="hirofumiwakasugi" creationdate="20151010T140506Z">
        <seg>raise "Not a unicorn" if @horns != 1
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "OH NO!"
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T011957Z" creationid="hirofumiwakasugi" creationdate="20150907T011957Z">
        <seg>raise "OH NO!"
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "OH NO!"
rescue ex</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012108Z" creationid="hirofumiwakasugi" creationdate="20150907T012108Z">
        <seg>raise "OH NO!"
rescue ex</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise "unknown color: #{color}"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012101Z" creationid="hirofumiwakasugi" creationdate="20150916T012101Z">
        <seg>raise "unknown color: #{color}"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise MyException.new("OH NO!")
rescue MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012243Z" creationid="hirofumiwakasugi" creationdate="20150907T012243Z">
        <seg>raise MyException.new("OH NO!")
rescue MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>raise MyException.new("OH NO!")
rescue ex : MyException</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T012417Z" creationid="hirofumiwakasugi" creationdate="20150907T012417Z">
        <seg>raise MyException.new("OH NO!")
rescue ex : MyException</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "./filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090702Z" creationid="makenowjust" creationdate="20200427T090702Z">
        <seg>require "./filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "filename"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T084504Z" creationid="makenowjust" creationdate="20200427T084504Z">
        <seg>require "filename"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072605Z" creationid="hirofumiwakasugi" creationdate="20150901T072605Z">
        <seg>require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>require "http/server"

server = HTTP::Server.new do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T161812Z" creationid="makenowjust" creationdate="20200413T161812Z">
        <seg>require "http/server"

server = HTTP::Server.new do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014249Z" creationid="hirofumiwakasugi" creationdate="20150907T014249Z">
        <seg>rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>rescue err : ParseError</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011938Z" creationid="hirofumiwakasugi" creationdate="20151010T011938Z">
        <seg>rescue err : ParseError</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T075230Z" creationid="makenowjust" creationdate="20200424T075230Z">
        <seg>return
end
# e : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e : Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061716Z" creationid="hirofumiwakasugi" creationdate="20160204T061716Z">
        <seg>return
end
# e : Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return
end
# e :: Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T012733Z" creationid="hirofumiwakasugi" creationdate="20150903T012733Z">
        <seg>return
end
# e :: Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return false
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015403Z" creationid="hirofumiwakasugi" creationdate="20150904T015403Z">
        <seg>return false
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>return true</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015357Z" creationid="hirofumiwakasugi" creationdate="20150904T015357Z">
        <seg>return true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>run (default)            compile and run program file</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>run (default)            compile and run program file</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>s = "hello"
# s : String</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T170043Z" creationid="makenowjust" creationdate="20200413T170043Z">
        <seg>s = "hello"
# s : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "bye" # OK</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032834Z" creationid="hirofumiwakasugi" creationdate="20150909T032834Z">
        <seg>say "bye" # OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello" # OK, implicit self is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033511Z" creationid="hirofumiwakasugi" creationdate="20150909T033434Z">
        <seg>say "hello" # 暗黙の self が Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say "hello" # OK, no receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032715Z" creationid="hirofumiwakasugi" creationdate="20150909T032715Z">
        <seg>say "hello" # レシーバなしなので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say_hi_to = name</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T175227Z" creationid="makenowjust" creationdate="20200413T175227Z">
        <seg>say_hi_to = name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>say_hi_to = the_beatles.sample</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180420Z" creationid="makenowjust" creationdate="20200413T180420Z">
        <seg>say_hi_to = the_beatles.sample</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>score_text.scan(SCORE_PATTERN) do |match|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T011937Z" creationid="hirofumiwakasugi" creationdate="20151010T011937Z">
        <seg>score_text.scan(SCORE_PATTERN) do |match|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self == Color::Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011445Z" creationid="hirofumiwakasugi" creationdate="20150916T011445Z">
        <seg>self == Color::Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self.say "hello" # Error, self is a receiver</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T032729Z" creationid="hirofumiwakasugi" creationdate="20150909T032729Z">
        <seg>self.say "hello" # self というレシーバが指定されているのでエラー</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>self.say "hello" # OK, self is a Person</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T033748Z" creationid="hirofumiwakasugi" creationdate="20150909T033446Z">
        <seg>self.say "hello" # self は Person なので OK</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new ...</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072615Z" creationid="hirofumiwakasugi" creationdate="20150901T072615Z">
        <seg>server = HTTP::Server.new ...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new(8080) do |context|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061318Z" creationid="hirofumiwakasugi" creationdate="20160204T061318Z">
        <seg>server = HTTP::Server.new(8080) do |context|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server = HTTP::Server.new(8080) do |request|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T034948Z" creationid="hirofumiwakasugi" creationdate="20151102T034948Z">
        <seg>server = HTTP::Server.new(8080) do |request|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>server.listen</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072633Z" creationid="hirofumiwakasugi" creationdate="20150901T072633Z">
        <seg>server.listen</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards [&lt;options&gt;...] [&lt;command&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T174622Z" creationid="makenowjust" creationdate="20200419T174622Z">
        <seg>shards [&lt;options&gt;...] [&lt;command&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards build [&lt;targets&gt;] [&lt;options&gt;...]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180043Z" creationid="makenowjust" creationdate="20200419T180043Z">
        <seg>shards build [&lt;targets&gt;] [&lt;options&gt;...]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards check</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180334Z" creationid="makenowjust" creationdate="20200419T180334Z">
        <seg>shards check</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards init</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180452Z" creationid="makenowjust" creationdate="20200419T180452Z">
        <seg>shards init</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards install</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T180514Z" creationid="makenowjust" creationdate="20200419T180514Z">
        <seg>shards install</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards list</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181023Z" creationid="makenowjust" creationdate="20200419T181023Z">
        <seg>shards list</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards prune</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181042Z" creationid="makenowjust" creationdate="20200419T181042Z">
        <seg>shards prune</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards update</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181105Z" creationid="makenowjust" creationdate="20200419T181105Z">
        <seg>shards update</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shards version [&lt;path&gt;]</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T181249Z" creationid="makenowjust" creationdate="20200419T181249Z">
        <seg>shards version [&lt;path&gt;]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>shout = true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T174911Z" creationid="makenowjust" creationdate="20200413T174911Z">
        <seg>shout = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some do |first, second|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023035Z" creationid="hirofumiwakasugi" creationdate="20150916T023035Z">
        <seg>some do |first, second|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp1 &amp;&amp; some_exp2

# The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101634Z" creationid="makenowjust" creationdate="20200424T101634Z">
        <seg>some_exp1 &amp;&amp; some_exp2

# 上記は以下に同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp1 || some_exp2

# The above is the same as:
tmp = some_exp1
if tmp</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101813Z" creationid="makenowjust" creationdate="20200424T101813Z">
        <seg>some_exp1 || some_exp2

# 上記は以下に同じ
tmp = some_exp1
if tmp</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052621Z" creationid="hirofumiwakasugi" creationdate="20150905T052621Z">
        <seg>some_exp2
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101814Z" creationid="makenowjust" creationdate="20200424T101814Z">
        <seg>some_exp2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_exp2
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052700Z" creationid="hirofumiwakasugi" creationdate="20150905T052700Z">
        <seg>some_exp2
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_field : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043753Z" creationid="hirofumiwakasugi" creationdate="20150909T043753Z">
        <seg>some_field : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_field : Int64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043755Z" creationid="hirofumiwakasugi" creationdate="20150909T043755Z">
        <seg>some_field : Int64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_float : Float64</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052211Z" creationid="hirofumiwakasugi" creationdate="20151007T052211Z">
        <seg>some_float : Float64</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_int : Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052211Z" creationid="hirofumiwakasugi" creationdate="20151007T052211Z">
        <seg>some_int : Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>some_method 10 # x = 10, y = 1, z = 2, w = 3
some_method 10, z: 10 # x = 10, y = 1, z = 10, w = 3
some_method 10, w: 1, y: 2, z: 3 # x = 10, y = 2, z = 3, w = 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150906T113344Z" creationid="hirofumiwakasugi" creationdate="20150906T113344Z">
        <seg>some_method 10 # x = 10, y = 1, z = 2, w = 3
some_method 10, z: 10 # x = 10, y = 1, z = 10, w = 3
some_method 10, w: 1, y: 2, z: 3 # x = 10, y = 2, z = 3, w = 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T014248Z" creationid="hirofumiwakasugi" creationdate="20150907T014248Z">
        <seg>something_dangerous</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous
ensure</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013356Z" creationid="hirofumiwakasugi" creationdate="20150907T013356Z">
        <seg>something_dangerous
ensure</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>something_dangerous
rescue</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T013614Z" creationid="hirofumiwakasugi" creationdate="20150907T013614Z">
        <seg>something_dangerous
rescue</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>spec                     compile and run specs (in spec directory)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>spec                     compile and run specs (in spec directory)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') # =&gt; 1
proc.call('l') # =&gt; 2</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172029Z" creationid="makenowjust" creationdate="20200422T172029Z">
        <seg>str = "hello"
proc = -&gt;str.count(Char)
proc.call('e') # =&gt; 1
proc.call('l') # =&gt; 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>strawberry = true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T180422Z" creationid="makenowjust" creationdate="20200413T180422Z">
        <seg>strawberry = true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>string.upcase
end

upcase(&lt;&lt;-SOME) # =&gt; "HELLO"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T034039Z" creationid="makenowjust" creationdate="20200420T034039Z">
        <seg>string.upcase
end

upcase(&lt;&lt;-SOME) # =&gt; "HELLO"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct Node</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045919Z" creationid="hirofumiwakasugi" creationdate="20151007T045919Z">
        <seg>struct Node</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct SomeStruct</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T043732Z" creationid="hirofumiwakasugi" creationdate="20150909T043732Z">
        <seg>struct SomeStruct</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct TagDirective
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T010228Z" creationid="hirofumiwakasugi" creationdate="20151010T010228Z">
        <seg>struct TagDirective
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>struct TimeZone</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T045657Z" creationid="hirofumiwakasugi" creationdate="20151007T045657Z">
        <seg>struct TimeZone</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>sum 1, 2, 3    #=&gt; 6
sum 1, 2, 3, 4.5 #=&gt; 10.5
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042107Z" creationid="hirofumiwakasugi" creationdate="20150907T042107Z">
        <seg>sum 1, 2, 3    #=&gt; 6
sum 1, 2, 3, 4.5 #=&gt; 10.5
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>super # Same as: super(msg)</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024800Z" creationid="hirofumiwakasugi" creationdate="20150910T024800Z">
        <seg>super # Same as: super(msg)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>super("another message")</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150910T024800Z" creationid="hirofumiwakasugi" creationdate="20150910T024800Z">
        <seg>super("another message")</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022842Z" creationid="hirofumiwakasugi" creationdate="20150903T022842Z">
        <seg>then_expression
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150903T022845Z" creationid="hirofumiwakasugi" creationdate="20150903T022845Z">
        <seg>then_expression
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>then_expression
end

# Can also be written as a suffix
close_door unless door_closed?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090541Z" creationid="makenowjust" creationdate="20200424T090541Z">
        <seg>then_expression
end

# このように後置して使うこともできる
close_door unless door_closed?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>thrice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024343Z" creationid="hirofumiwakasugi" creationdate="20150916T024343Z">
        <seg>thrice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
else</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052659Z" creationid="hirofumiwakasugi" creationdate="20150905T052659Z">
        <seg>tmp
else</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101635Z" creationid="makenowjust" creationdate="20200424T101635Z">
        <seg>tmp
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tmp
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150905T052622Z" creationid="hirofumiwakasugi" creationdate="20150905T052622Z">
        <seg>tmp
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tool                     run a tool</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T140115Z" creationid="hirofumiwakasugi" creationdate="20151009T140115Z">
        <seg>tool                     run a tool</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042106Z" creationid="hirofumiwakasugi" creationdate="20150907T042106Z">
        <seg>total
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total += value</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042106Z" creationid="hirofumiwakasugi" creationdate="20150907T042106Z">
        <seg>total += value</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>total = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042105Z" creationid="hirofumiwakasugi" creationdate="20150907T042105Z">
        <seg>total = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>transform(1) { |x| x + 1 } #=&gt; 2
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024144Z" creationid="hirofumiwakasugi" creationdate="20150916T024144Z">
        <seg>transform(1) { |x| x + 1 } #=&gt; 2
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>true  # A Bool that is true
false # A Bool that is false</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200414T001212Z" creationid="makenowjust" creationdate="20200414T001143Z">
        <seg>true  # 真の Bool 値
false # 偽の Bool 値</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  # =&gt; 1       (Int32)
tuple[1]                  # =&gt; "hello" (String)
tuple[2]                  # =&gt; 'x'     (Char)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T164922Z" creationid="makenowjust" creationdate="20200422T164922Z">
        <seg>tuple = {1, "hello", 'x'} # Tuple(Int32, String, Char)
tuple[0]                  # =&gt; 1       (Int32)
tuple[1]                  # =&gt; "hello" (String)
tuple[2]                  # =&gt; 'x'     (Char)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tuple = {name: "Crystal", year: 2011} # NamedTuple(name: String, year: Int32)
tuple[:name]                          # =&gt; "Crystal" (String)
tuple[:year]                          # =&gt; 2011      (Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T165934Z" creationid="makenowjust" creationdate="20200422T165934Z">
        <seg>tuple = {name: "Crystal", year: 2011} # NamedTuple(name: String, year: Int32)
tuple[:name]                          # =&gt; "Crystal" (String)
tuple[:year]                          # =&gt; 2011      (Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice &amp;-&gt;say_hello
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025107Z" creationid="hirofumiwakasugi" creationdate="20150917T025107Z">
        <seg>twice &amp;-&gt;say_hello
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>twice do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015729Z" creationid="hirofumiwakasugi" creationdate="20150916T015729Z">
        <seg>twice do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice { puts "Hello!" }
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014758Z" creationid="hirofumiwakasugi" creationdate="20150916T014758Z">
        <seg>twice { puts "Hello!" }
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>twice { |i| i + 1 } #=&gt; 3
twice { |i| break "hello" } #=&gt; "hello"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024602Z" creationid="hirofumiwakasugi" creationdate="20150916T024602Z">
        <seg>twice { |i| i + 1 } #=&gt; 3
twice { |i| break "hello" } #=&gt; "hello"
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>typ</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150930T063209Z" creationid="hirofumiwakasugi" creationdate="20150930T063209Z">
        <seg>typ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type MyInt = Int32</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023153Z" creationid="hirofumiwakasugi" creationdate="20151008T023153Z">
        <seg>type MyInt = Int32</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>type MyInt = Int32
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151008T023124Z" creationid="hirofumiwakasugi" creationdate="20151008T023124Z">
        <seg>type MyInt = Int32
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>types                    show type of main variables</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T072216Z" creationid="hirofumiwakasugi" creationdate="20150901T072216Z">
        <seg>types                    show type of main variables</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz = C::TimeZone.new
change_it tz
tz.minutes_west #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051843Z" creationid="hirofumiwakasugi" creationdate="20151007T051843Z">
        <seg>tz = C::TimeZone.new
change_it tz
tz.minutes_west #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>tz.minutes_west = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T051842Z" creationid="hirofumiwakasugi" creationdate="20151007T051842Z">
        <seg>tz.minutes_west = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>union IntOrFloat</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052210Z" creationid="hirofumiwakasugi" creationdate="20151007T052210Z">
        <seg>union IntOrFloat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unless</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090401Z" creationid="makenowjust" creationdate="20200424T090401Z">
        <seg>unless</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>unless some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T090502Z" creationid="makenowjust" creationdate="20200424T090502Z">
        <seg>unless some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>until</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T100933Z" creationid="makenowjust" creationdate="20200424T100933Z">
        <seg>until</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>until some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101047Z" creationid="makenowjust" creationdate="20200424T101047Z">
        <seg>until some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user_input = "hello; rm -rf *"
`echo #{user_input}`</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173139Z" creationid="makenowjust" creationdate="20200422T173139Z">
        <seg>user_input = "hello; rm -rf *"
`echo #{user_input}`</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>user_input = "hello; rm -rf *"
process = Process.new("echo", [user_input], output: Process::Redirect::Pipe)
process.output.gets_to_end # =&gt; "hello; rm -rf *"
process.wait.success?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T173608Z" creationid="makenowjust" creationdate="20200422T173320Z">
        <seg>user_input = "hello; rm -rf *"
process = Process.new("echo", [user_input], output: Process::Redirect::Pipe)
process.output.gets_to_end # =&gt; "hello; rm -rf *"
process.wait.success?      </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = Vector2.new(1, 2)
-v1                    #=&gt; Vector2(@x=-1, @y=-2)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025729Z" creationid="hirofumiwakasugi" creationdate="20150909T025729Z">
        <seg>v1 = Vector2.new(1, 2)
-v1                    #=&gt; Vector2(@x=-1, @y=-2)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2               #=&gt; Vector2(@x=4, @y=6)
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150909T025223Z" creationid="hirofumiwakasugi" creationdate="20150909T025223Z">
        <seg>v1 = Vector2.new(1, 2)
v2 = Vector2.new(3, 4)
v1 + v2               #=&gt; Vector2(@x=4, @y=6)
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v1 = yield 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023506Z" creationid="hirofumiwakasugi" creationdate="20150916T023506Z">
        <seg>v1 = yield 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>v2 = yield 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023507Z" creationid="hirofumiwakasugi" creationdate="20150916T023507Z">
        <seg>v2 = yield 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value = U::IntOrFloat.new
change_it value
value.some_int #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052424Z" creationid="hirofumiwakasugi" creationdate="20151007T052424Z">
        <seg>value = U::IntOrFloat.new
change_it value
value.some_int #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>value.some_int = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151007T052423Z" creationid="hirofumiwakasugi" creationdate="20151007T052423Z">
        <seg>value.some_int = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>var = 1
# At this point 'var' is an Int32
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T052142Z" creationid="hirofumiwakasugi" creationdate="20150902T052142Z">
        <seg>var = 1
# At this point 'var' is an Int32
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>we get:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T055924Z" creationid="hirofumiwakasugi" creationdate="20150912T055916Z">
        <seg>すると、結果は以下となります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when :red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T012133Z" creationid="hirofumiwakasugi" creationdate="20150916T012133Z">
        <seg>when :red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>when Color::Red</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T011857Z" creationid="hirofumiwakasugi" creationdate="20150916T011857Z">
        <seg>when Color::Red</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>which might be a bit cleaner depending on your taste.</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T090010Z" creationid="makenowjust" creationdate="20200427T090010Z">
        <seg>こちらの方が良いと感じる人もいるでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094511Z" creationid="makenowjust" creationdate="20200424T094511Z">
        <seg>while</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while a &lt; 10</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150913T055808Z" creationid="hirofumiwakasugi" creationdate="20150913T055808Z">
        <seg>while a &lt; 10</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while i &lt; self</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032023Z" creationid="hirofumiwakasugi" creationdate="20150916T032023Z">
        <seg>while i &lt; self</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while some_condition</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T094710Z" creationid="makenowjust" creationdate="20200424T094710Z">
        <seg>while some_condition</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>while true</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095151Z" creationid="makenowjust" creationdate="20200424T095151Z">
        <seg>while true</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>with self yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T030942Z" creationid="hirofumiwakasugi" creationdate="20150916T030942Z">
        <seg>with self yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T063555Z" creationid="hirofumiwakasugi" creationdate="20160204T062353Z">
        <seg>world</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world" # =&gt; "hello\n      world"</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T194215Z" creationid="makenowjust" creationdate="20200419T194215Z">
        <seg>world" # =&gt; "hello\n      world"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world" # same as "hello\n      world"
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T081348Z" creationid="hirofumiwakasugi" creationdate="20150901T081305Z">
        <seg>world" # "hello\n      world" と同じ
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>world, \</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150901T104118Z" creationid="hirofumiwakasugi" creationdate="20150901T104118Z">
        <seg>world, \</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrap_foo do |i|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025545Z" creationid="hirofumiwakasugi" creationdate="20150917T025545Z">
        <seg>wrap_foo do |i|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper is not an Int32, but its to_unsafe</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151005T044815Z" creationid="hirofumiwakasugi" creationdate="20151005T044627Z">
        <seg>wrapper = IntWrapper.new(1)
C.exit(wrapper) # wrapper は Int32 ではないが、</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x * y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021153Z" creationid="hirofumiwakasugi" creationdate="20150904T021153Z">
        <seg>x * y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150902T022126Z" creationid="hirofumiwakasugi" creationdate="20150902T022126Z">
        <seg>x + 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + 1
end

proc = -&gt;plus_one(Int32)
proc.call(41) # =&gt; 42</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T172026Z" creationid="makenowjust" creationdate="20200422T172026Z">
        <seg>x + 1
end

proc = -&gt;plus_one(Int32)
proc.call(41) # =&gt; 42</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150907T042924Z" creationid="hirofumiwakasugi" creationdate="20150907T042924Z">
        <seg>x + y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T015153Z" creationid="hirofumiwakasugi" creationdate="20150904T015153Z">
        <seg>x + y
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x + y # error: undefined local variable or method 'x'
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021550Z" creationid="hirofumiwakasugi" creationdate="20150904T021509Z">
        <seg>x + y # error: undefined local variable or method 'x'
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x - y</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T021414Z" creationid="hirofumiwakasugi" creationdate="20150904T021414Z">
        <seg>x - y</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # : Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061614Z" creationid="hirofumiwakasugi" creationdate="20160204T061614Z">
        <seg>x = "hello"
end
x # : Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # : Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061611Z" creationid="hirofumiwakasugi" creationdate="20160204T061611Z">
        <seg>x = "hello"
end
x # : Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # :: Int32 | String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055059Z" creationid="hirofumiwakasugi" creationdate="20150918T055059Z">
        <seg>x = "hello"
end
x # :: Int32 | String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = "hello"
end
x # :: Int32 | String
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054338Z" creationid="hirofumiwakasugi" creationdate="20150918T054338Z">
        <seg>x = "hello"
end
x # :: Int32 | String
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # : Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061617Z" creationid="hirofumiwakasugi" creationdate="20160204T061617Z">
        <seg>x = 'a'
x # : Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # : Int32 | String | Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061619Z" creationid="hirofumiwakasugi" creationdate="20160204T061619Z">
        <seg>x = 'a'
x # : Int32 | String | Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # :: Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055102Z" creationid="hirofumiwakasugi" creationdate="20150918T055102Z">
        <seg>x = 'a'
x # :: Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 'a'
x # :: Int32 | String | Char
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055221Z" creationid="hirofumiwakasugi" creationdate="20150918T055221Z">
        <seg>x = 'a'
x # :: Int32 | String | Char
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T053728Z" creationid="hirofumiwakasugi" creationdate="20150918T053728Z">
        <seg>x = 0</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
dont_update_x # outputs 1
x #=&gt; 0
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T020021Z" creationid="hirofumiwakasugi" creationdate="20151002T020021Z">
        <seg>x = 0
dont_update_x # 1を出力
x #=&gt; 0
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  #=&gt; 1
proc.call(10) #=&gt; 11
x #=&gt; 11
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T061639Z" creationid="hirofumiwakasugi" creationdate="20150918T061639Z">
        <seg>x = 0
proc = -&gt;(i : Int32) { x += i }
proc = some_proc(&amp;proc)
proc.call(1)  #=&gt; 1
proc.call(10) #=&gt; 11
x #=&gt; 11
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 0
update_x
x #=&gt; 1
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015558Z" creationid="hirofumiwakasugi" creationdate="20151002T015558Z">
        <seg>x = 0
update_x
x #=&gt; 1
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
-&gt;{ x = "hello" }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T060106Z" creationid="hirofumiwakasugi" creationdate="20150918T060106Z">
        <seg>x = 1
-&gt;{ x = "hello" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
capture { x = "hello" }</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T055220Z" creationid="hirofumiwakasugi" creationdate="20150918T055220Z">
        <seg>x = 1
capture { x = "hello" }</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T015558Z" creationid="hirofumiwakasugi" creationdate="20151002T015558Z">
        <seg>x = 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x = 1
foo do</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150918T054337Z" creationid="hirofumiwakasugi" creationdate="20150918T054337Z">
        <seg>x = 1
foo do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>x.to_s.upcase
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212543Z" creationid="makenowjust" creationdate="20200413T212543Z">
        <seg>  x.to_s.upcase
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013505Z" creationid="hirofumiwakasugi" creationdate="20150916T013505Z">
        <seg>yield</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T013506Z" creationid="hirofumiwakasugi" creationdate="20150916T013506Z">
        <seg>yield
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end

block do</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T095959Z" creationid="makenowjust" creationdate="20200424T095959Z">
        <seg>yield
end

block do</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield
end
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T014713Z" creationid="hirofumiwakasugi" creationdate="20150916T014713Z">
        <seg>yield
end
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015728Z" creationid="hirofumiwakasugi" creationdate="20150916T015728Z">
        <seg>yield 1</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025543Z" creationid="hirofumiwakasugi" creationdate="20150917T025543Z">
        <seg>yield 1
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 'a'</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023033Z" creationid="hirofumiwakasugi" creationdate="20150916T023033Z">
        <seg>yield 1, 'a'</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 1, 2, 3
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T022217Z" creationid="hirofumiwakasugi" creationdate="20150916T022217Z">
        <seg>yield 1, 2, 3
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024341Z" creationid="hirofumiwakasugi" creationdate="20150916T024341Z">
        <seg>yield 2</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 2
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T015728Z" creationid="hirofumiwakasugi" creationdate="20150916T015728Z">
        <seg>yield 2
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield 3</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024342Z" creationid="hirofumiwakasugi" creationdate="20150916T024342Z">
        <seg>yield 3</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield i</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T032023Z" creationid="hirofumiwakasugi" creationdate="20150916T032023Z">
        <seg>yield i</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield true, "hello"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T023034Z" creationid="hirofumiwakasugi" creationdate="20150916T023034Z">
        <seg>yield true, "hello"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield value
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150916T024143Z" creationid="hirofumiwakasugi" creationdate="20150916T024143Z">
        <seg>yield value
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>yield x</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150917T025544Z" creationid="hirofumiwakasugi" creationdate="20150917T025544Z">
        <seg>yield x</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you can have it like this:</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200427T085901Z" creationid="makenowjust" creationdate="20200427T085711Z">
        <seg>このようにすることができることも意味しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>you need to reinstall the command line tools and then select the default active toolchain:</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20160204T061307Z" creationid="hirofumiwakasugi" creationdate="20160204T061241Z">
        <seg>この場合、Command Line Tools を再インストールした後、デフォルトのツールチェインを選択する必要がありあります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035525Z" creationid="makenowjust" creationdate="20200420T035525Z">
        <seg>{</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175322Z" creationid="makenowjust" creationdate="20200420T175322Z">
        <seg>{"one" =&gt; 1, "two" =&gt; 2}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{"this is a key": 1}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T170054Z" creationid="makenowjust" creationdate="20200422T170054Z">
        <seg>{"this is a key": 1}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign articles = site.posts | where_exp: "item","item.release_notes != true" %} {% for post in articles limit: 3 %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222643Z" creationid="makenowjust" creationdate="20200413T222643Z">
        <seg>{% assign articles = site.posts | where_exp: "item","item.release_notes != true" %} {% for post in articles limit: 3 %} {% include blog_row.html post=post %} {% endfor %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% assign releases = site.posts | where: "release_notes",true %} {% for post in releases limit: 10 %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222650Z" creationid="makenowjust" creationdate="20200413T222650Z">
        <seg>{% assign releases = site.posts | where: "release_notes",true %} {% for post in releases limit: 10 %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% else %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035954Z" creationid="hirofumiwakasugi" creationdate="20151001T035954Z">
        <seg>{% else %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035955Z" creationid="hirofumiwakasugi" creationdate="20151001T035955Z">
        <seg>{% end %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040353Z" creationid="hirofumiwakasugi" creationdate="20151001T040353Z">
        <seg>{% end %}
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end

generate_methods [foo, bar, baz]
foo #=&gt; 0
baz #=&gt; 2
bar # (compile-time error, `bar` undefined)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200816Z" creationid="makenowjust" creationdate="20200413T200038Z">
        <seg>{% end %}
end

generate_methods [foo, bar, baz]
foo #=&gt; 0
baz #=&gt; 2
bar # (compile-time error, `bar` undefined){% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% end %}
end
define_dummy_methods({foo: 10, bar: 20})
foo #=&gt; 10
bar #=&gt; 20
```</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040430Z" creationid="hirofumiwakasugi" creationdate="20151001T040430Z">
        <seg>{% end %}
end
define_dummy_methods({foo: 10, bar: 20})
foo #=&gt; 10
bar #=&gt; 20
```</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% endfor %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222901Z" creationid="makenowjust" creationdate="20200413T222901Z">
        <seg>{% endfor %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for key, value in hash %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>{% for key, value in hash %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for name, index in names %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040351Z" creationid="hirofumiwakasugi" creationdate="20151001T040351Z">
        <seg>{% for name, index in names %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% for value in VALUES %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T041454Z" creationid="hirofumiwakasugi" creationdate="20151001T041454Z">
        <seg>{% for value in VALUES %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight crystal %}
if rand(2) &gt; 0
my_string = "hello world"
end</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T212451Z" creationid="makenowjust" creationdate="20200413T212446Z">
        <seg>{% highlight crystal %}
if rand(2) &gt; 0
  my_string = "hello world"
end</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% highlight ruby %}
# A very basic HTTP server
require "http/server"</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151102T035021Z" creationid="hirofumiwakasugi" creationdate="20151102T034949Z">
        <seg>{% highlight ruby %}
# 簡易 HTTP サーバー
require "http/server"</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% if content == 1 %}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T035953Z" creationid="hirofumiwakasugi" creationdate="20151001T035953Z">
        <seg>{% if content == 1 %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include community_row.html title="Language Reference" divId="language-reference" content="Documentation of the Crystal language and compiler features." link_text="crystal-lang.org/reference" url="https://crystal-lang.org/reference" icon="menu_book" %} {% include community_row.html title="API Docs" divId="api" content="Documentation for the Crystal standard-library." link_text="crystal-lang.org/api" url="https://crystal-lang.org/api" icon="explore" %} {% include community_row.html title="Installation instructions" divId="install" content="Installation instructions for Crystal." link_text="crystal-lang.org/install" url="/install" icon="get_app" %} {% include community_row.html title="Media" divId="media" content="Logos and style guide." link_text="crystal-lang.org/media" url="/media" icon="palette" %} {% include community_row.html title="Developer Wiki" divId="developer-wiki" content="Developer resources." link_text="GitHub Wiki" url="https://github.com/crystal-lang/crystal/wiki" icon="github" custom_icon="true" %} {% include community_row.html title="Shards documentation" divId="shards" content="Documentation for official shards." link_text="crystal-db" url="http://crystal-lang.github.io/crystal-db/api/latest/" icon="apps" %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T202139Z" creationid="makenowjust" creationdate="20200413T201803Z">
        <seg>{% include community_row.html
   title="Language Reference"
   divId="language-reference"
   content="Documentation of the Crystal language and compiler features."
   link_text="crystal-lang.org/reference"
   url="https://crystal-lang.org/reference"
   icon="menu_book" %}

{% include community_row.html
   title="API Docs"
   divId="api"
   content="Documentation for the Crystal standard-library."
   link_text="crystal-lang.org/api"
   url="https://crystal-lang.org/api"
   icon="explore" %}

{% include community_row.html
   title="Installation instructions"
   divId="install"
   content="Installation instructions for Crystal."
   link_text="crystal-lang.org/install"
   url="/install"
   icon="get_app" %}

{% include community_row.html
   title="Media"
   divId="media"
   content="Logos and style guide."
   link_text="crystal-lang.org/media"
   url="/media"
   icon="palette" %}

{% include community_row.html
   title="Developer Wiki"
   divId="developer-wiki"
   content="Developer resources."
   link_text="GitHub Wiki"
   url="https://github.com/crystal-lang/crystal/wiki"
   icon="github"
   custom_icon="true" %}

{% include community_row.html
   title="Shards documentation"
   divId="shards"
   content="Documentation for official shards."
   link_text="crystal-db"
   url="http://crystal-lang.github.io/crystal-db/api/latest/"
   icon="apps" %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_bindings.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221526Z" creationid="makenowjust" creationdate="20200413T221526Z">
        <seg>{% include sample_bindings.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_concurrency.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221340Z" creationid="makenowjust" creationdate="20200413T221340Z">
        <seg>{% include sample_concurrency.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_dependencies.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221854Z" creationid="makenowjust" creationdate="20200413T221854Z">
        <seg>{% include sample_dependencies.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_macros.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T221025Z" creationid="makenowjust" creationdate="20200413T221025Z">
        <seg>{% include sample_macros.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_null.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211637Z" creationid="makenowjust" creationdate="20200413T211637Z">
        <seg>{% include sample_null.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_null_refs.html %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211712Z" creationid="makenowjust" creationdate="20200413T211712Z">
        <seg>{% include sample_null_refs.html %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_server.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210742Z" creationid="makenowjust" creationdate="20200413T210742Z">
        <seg>{% include sample_server.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{% include sample_type_system.md %}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T211233Z" creationid="makenowjust" creationdate="20200413T211233Z">
        <seg>{% include sample_type_system.md %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{1 =&gt; 2, 3 =&gt; 4}   # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3} # Hash(Int32 | Char, Int32)</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175605Z" creationid="makenowjust" creationdate="20200420T175605Z">
        <seg>{1 =&gt; 2, 3 =&gt; 4}   # Hash(Int32, Int32)
{1 =&gt; 2, 'a' =&gt; 3} # Hash(Int32 | Char, Int32)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ 'bounty.png' | asset_path }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210328Z" creationid="makenowjust" creationdate="20200413T210328Z">
        <seg>{{ 'bounty.png' | asset_path }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ 'oc.png' | asset_path }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T210324Z" creationid="makenowjust" creationdate="20200413T210324Z">
        <seg>{{ 'oc.png' | asset_path }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151002T012112Z" creationid="hirofumiwakasugi" creationdate="20151002T012112Z">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes? name</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151009T031040Z" creationid="hirofumiwakasugi" creationdate="20151009T031040Z">
        <seg>{{ @type.instance_vars.map &amp;.name.stringify }}.includes? name</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.date | date_to_string }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222653Z" creationid="makenowjust" creationdate="20200413T222653Z">
        <seg>{{ post.date | date_to_string }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.title }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222656Z" creationid="makenowjust" creationdate="20200413T222656Z">
        <seg>{{ post.title }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ post.url }}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T222647Z" creationid="makenowjust" creationdate="20200413T222647Z">
        <seg>{{ post.url }}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{ system("date").stringify }}
end

build_date = compile_time_date
puts build_date</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200413T200651Z" creationid="makenowjust" creationdate="20200413T200138Z">
        <seg>{{ system("date").stringify }}
end

build_date = compile_time_date
puts build_date{% endhighlight %}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{content}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T014650Z" creationid="hirofumiwakasugi" creationdate="20151001T014650Z">
        <seg>{{content}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{index}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040352Z" creationid="hirofumiwakasugi" creationdate="20151001T040352Z">
        <seg>{{index}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{{value}}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151001T040429Z" creationid="hirofumiwakasugi" creationdate="20151001T040429Z">
        <seg>{{value}}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>{} of Int32 =&gt; Int32 # =&gt; Hash(Int32, Int32).new</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T175831Z" creationid="makenowjust" creationdate="20200420T175831Z">
        <seg>{} of Int32 =&gt; Int32 # =&gt; Hash(Int32, Int32).new</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150904T135124Z" creationid="hirofumiwakasugi" creationdate="20150904T135124Z">
        <seg>|</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|      @value : String</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20150912T063041Z" creationid="hirofumiwakasugi" creationdate="20150912T063041Z">
        <seg>|      @value : String</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|| (objects[1] = 2)
objects[1] &amp;&amp;= 2 # same as: objects[1]?</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200422T174925Z" creationid="makenowjust" creationdate="20200422T174925Z">
        <seg>|| (objects[1] = 2) と同じ
objects[1] &amp;&amp;= 2 # objects[1]? </seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>|| - Logical OR Operator</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200424T101655Z" creationid="makenowjust" creationdate="20200424T101655Z">
        <seg>|| - 論理和 (または) 演算子</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}</seg>
      </tuv>
      <tuv lang="JA" changeid="hirofumiwakasugi" changedate="20151010T012156Z" creationid="hirofumiwakasugi" creationdate="20151010T012156Z">
        <seg>}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>}
}</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035517Z" creationid="makenowjust" creationdate="20200420T035517Z">
        <seg>}
}</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>},</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200420T035933Z" creationid="makenowjust" creationdate="20200420T035933Z">
        <seg>},</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−2,147,483,648</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182050Z" creationid="makenowjust" creationdate="20200419T182050Z">
        <seg>−2,147,483,648</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−2&lt;x1/&gt;63&lt;x2/&gt;</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182056Z" creationid="makenowjust" creationdate="20200419T182056Z">
        <seg>−2&lt;x1/&gt;63&lt;x2/&gt;</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>−32,768</seg>
      </tuv>
      <tuv lang="JA" changeid="makenowjust" changedate="20200419T182046Z" creationid="makenowjust" creationdate="20200419T182046Z">
        <seg>−32,768</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
